From: neginegi88586 <idunegi@gmail.com>

---
 Inc/config.h                        | 38 +++++++++++++++++++++++++++++
 Drivers/BLDC_Lib/Inc/units_q16_16.h | 18 +++++++------
 Src/fixedpoint.h                    | 69 +++++++++++++++++++++++++++++++++++++
 3 files changed, 115 insertions(+), 10 deletions(-)
 create mode 100644 Src/fixedpoint.h

diff --git /Inc/config.h
--- /Inc/config.h
+++ /Inc/config.h
@@ -1,3 +1,41 @@
 /* config.h
  * プロジェクト共通設定
  */
+
+/* ========= 物理定数・スケールの一元管理（Q16.16）========= */
+#ifndef CONFIG_PHYS_Q16_16_DEFINED
+#define CONFIG_PHYS_Q16_16_DEFINED
+
+/* 電源・ADC 関連 */
+#define CONFIG_ADC_RESOLUTION_COUNTS      (4095)        /* 12bit ADC */
+#define CONFIG_REF_PA0_VOLT_Q16           ((1235 * (1<<16)) / 1000)  /* 1.235 V */
+
+/* シャント・アンプ・オフセット（回路図の実値に合わせて設定）*/
+#define CONFIG_RSHUNT_OHM_Q16             ((int32_t)( (5  * (1<<16)) / 100 ))  /* 0.05 Ω */
+#define CONFIG_AMP_GAIN_Q16               ((int32_t)( 10  << 16 ))             /* ×10    */
+#define CONFIG_VOFFSET_V_Q16              ((int32_t)( (165 * (1<<16)) / 100 )) /* 1.65 V */
+
+/* 制御周期 */
+#ifndef PWM_FREQ_HZ
+#define PWM_FREQ_HZ                       (20000)       /* 20 kHz デフォルト */
+#endif
+#define CONFIG_DT_S_Q16                   ((int32_t)((1<<16) / PWM_FREQ_HZ))
+
+/* 電流フルスケール（正規化→物理[A] 換算などで使用する場合に備え）*/
+#define CONFIG_I_MAX_A_Q16                ((int32_t)(10 << 16)) /* 10 A を初期値（必要に応じ調整）*/
+
+/* スルーレートとソフトスタート（初期値）*/
+#define CONFIG_SLEW_UP_PER_S_Q16          ((int32_t)(1  << 16))  /* 1.0 / s */
+#define CONFIG_SLEW_DN_PER_S_Q16          ((int32_t)(3  << 16))  /* 3.0 / s */
+#define CONFIG_SOFTSTART_RISE_S_Q16       ((int32_t)( (3 * (1<<16)) / 10 )) /* 0.3 s */
+
+/* 角速度変換で使用（定数） */
+#define CONFIG_TWO_PI_Q16                 ((int32_t)( (710 * (1<<16)) / 113 )) /* ≈ 2π */
+#define CONFIG_60_Q16                     ((int32_t)( 60 << 16 ))
+
+#endif /* CONFIG_PHYS_Q16_16_DEFINED */
+
+/* 既存の他設定項目がここに続く場合は残してください */
+
diff --git /Inc/BLDC_Lib/units_q16.h
--- /Inc/BLDC_Lib/units_q16.h
+++ /Inc/BLDC_Lib/units_q16.h
@@ -6,24 +6,26 @@
 #ifndef UNITS_Q16_H
 #define UNITS_Q16_H
 #include <stdint.h>
+#include "config.h"               /* ← 物理定数は config.h に集約 */
 #include "fixed_q16_16.h"
 #include "adc_vcal_q16_16.h"
 extern adc_vcal_t g_vcal; /* app.c で定義 */
-/* 実機値に合わせて修正：シャント・アンプ・オフセット */
-static const q16_16_t UQ_RSHUNT_OHM = q16_16_from_frac(5, 100);   /* 0.05Ω */
-static const q16_16_t UQ_AMP_GAIN   = q16_16_from_int(10);        /* x10   */
-static const q16_16_t UQ_VOFFSET_V  = q16_16_from_frac(165, 100); /* 1.65V */
+/* 実機値は config.h の定数を使用（ビルド時一元管理） */
+static const q16_16_t UQ_RSHUNT_OHM = (q16_16_t)CONFIG_RSHUNT_OHM_Q16;
+static const q16_16_t UQ_AMP_GAIN   = (q16_16_t)CONFIG_AMP_GAIN_Q16;
+static const q16_16_t UQ_VOFFSET_V  = (q16_16_t)CONFIG_VOFFSET_V_Q16;
 
 /* ADC 生→電圧[V]（較正 V/LSB 使用）*/
 static inline q16_16_t uq_adc_to_volt(int32_t adc){
     q16_16_t vlsb = adc_vcal_get_v_per_lsb(&g_vcal);
     return q16_16_mul(q16_16_from_int(adc), vlsb);
 }
 /* 電圧→電流[A] */
 static inline q16_16_t uq_volt_to_curr(q16_16_t v){
     q16_16_t num = q16_16_sub_sat(v, UQ_VOFFSET_V);
     q16_16_t den = q16_16_mul(UQ_RSHUNT_OHM, UQ_AMP_GAIN);
     return q16_16_div(num, den);
 }
 /* 角速度の相互変換 */
-static const q16_16_t UQ_TWO_PI = q16_16_from_frac(710, 113); /* ≈ 2π */
-static const q16_16_t UQ_60     = q16_16_from_int(60);
+static const q16_16_t UQ_TWO_PI = (q16_16_t)CONFIG_TWO_PI_Q16; /* ≈ 2π */
+static const q16_16_t UQ_60     = (q16_16_t)CONFIG_60_Q16;
 static inline q16_16_t uq_rpm_to_rad_s(q16_16_t rpm){
     return q16_16_div(q16_16_mul(rpm, UQ_TWO_PI), UQ_60);
 }
 static inline uint16_t uq_duty_to_permille(q16_16_t duty){
     return (uint16_t)r;
 }
 #endif
diff --git /Src/fixedpoint.h
--- /dev/null
+++ /Src/fixedpoint.h
@@ -0,0 +1,69 @@
+/* fixedpoint.h  (Q31 API → Q16.16 バックエンドへ差し替え)
+ * 目的：
+ *   既存コードが参照する Q31用ユーティリティを「関数名は維持」しつつ、
+ *   実装を Q16.16（小数16bit）に置換して Q31 を完全廃止する。
+ * 方針：
+ *   - 値域は従来の [-1..+1] を Q16.16 で表現（±1.0 は ±65536）。
+ *   - 乗算は (a*b)>>16、加減算は飽和付きで Q16.16 として処理。
+ *   - これにより既存の FOC/SVPWM 等の呼び出し側は変更不要。
+ */
+#ifndef FIXEDPOINT_H
+#define FIXEDPOINT_H
+
+#include <stdint.h>
+#include "Drivers/BLDC_Lib/Inc/fixed_q16_16.h"
+
+/* 互換 typedef（q31_t 相当を Q16.16 に置換）*/
+typedef q16_16_t q31_t;
+
+/* 飽和リミット（±1.0 を基本にやや広めに取る場合は適宜変更）*/
+#define Q31_MAX   ((q31_t)Q16_16_ONE)
+#define Q31_MIN   ((q31_t)(-Q16_16_ONE))
+
+/* 基本演算（Q31 名称の互換 API、実体は Q16.16）*/
+static inline q31_t q31_from_float(float x)
+{
+    /* [-1..1] を想定。範囲外は飽和。*/
+    if (x >  1.0f) x = 1.0f;
+    if (x < -1.0f) x = -1.0f;
+    int32_t v = (int32_t)(x * (float)(1<<16));
+    return (q31_t)v;
+}
+static inline float q31_to_float(q31_t x)
+{
+    return (float)x / (float)(1<<16);
+}
+
+static inline q31_t q31_add_sat(q31_t a, q31_t b)
+{
+    /* Q16.16 飽和加算 */
+    q16_16_t s = q16_16_add_sat(a, b);
+    if (s > Q31_MAX) return Q31_MAX;
+    if (s < Q31_MIN) return Q31_MIN;
+    return s;
+}
+static inline q31_t q31_sub_sat(q31_t a, q31_t b)
+{
+    q16_16_t d = q16_16_sub_sat(a, b);
+    if (d > Q31_MAX) return Q31_MAX;
+    if (d < Q31_MIN) return Q31_MIN;
+    return d;
+}
+static inline q31_t q31_mul(q31_t a, q31_t b)
+{
+    /* Q16.16 乗算 (a*b)>>16、結果は [-1..1] を想定 */
+    q16_16_t m = q16_16_mul(a, b);
+    if (m > Q31_MAX) return Q31_MAX;
+    if (m < Q31_MIN) return Q31_MIN;
+    return m;
+}
+
+/* 右シフト系は Q31 前提コード互換のため残す（bitシフトに依存していればそのまま通る）
+ * ただし内部表現は Q16.16 なので、必要に応じて見直し推奨。
+ */
+static inline q31_t q31_shr(q31_t x, int n)
+{
+    return (q31_t)( (int32_t)x >> n );
+}
+static inline q31_t q31_shl(q31_t x, int n)
+{
+    return (q31_t)( (int32_t)x << n );
+}
+
+#endif /* FIXEDPOINT_H */
