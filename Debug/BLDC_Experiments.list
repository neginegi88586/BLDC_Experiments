
BLDC_Experiments.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000069d0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003b4  08006b60  08006b60  00007b60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006f14  08006f14  000081cc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006f14  08006f14  00007f14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006f1c  08006f1c  000081cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006f1c  08006f1c  00007f1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006f20  08006f20  00007f20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001cc  20000000  08006f24  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000081cc  2**0
                  CONTENTS
 10 .bss          000002c8  200001cc  200001cc  000081cc  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000494  20000494  000081cc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000081cc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000434d  00000000  00000000  000081fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000dee  00000000  00000000  0000c549  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000428  00000000  00000000  0000d338  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000030c  00000000  00000000  0000d760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001864a  00000000  00000000  0000da6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000477b  00000000  00000000  000260b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00085b99  00000000  00000000  0002a831  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000b03ca  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002110  00000000  00000000  000b0410  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000067  00000000  00000000  000b2520  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001cc 	.word	0x200001cc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006b48 	.word	0x08006b48

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d0 	.word	0x200001d0
 80001cc:	08006b48 	.word	0x08006b48

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_ldivmod>:
 8000ba8:	b97b      	cbnz	r3, 8000bca <__aeabi_ldivmod+0x22>
 8000baa:	b972      	cbnz	r2, 8000bca <__aeabi_ldivmod+0x22>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bfbe      	ittt	lt
 8000bb0:	2000      	movlt	r0, #0
 8000bb2:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000bb6:	e006      	blt.n	8000bc6 <__aeabi_ldivmod+0x1e>
 8000bb8:	bf08      	it	eq
 8000bba:	2800      	cmpeq	r0, #0
 8000bbc:	bf1c      	itt	ne
 8000bbe:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000bc2:	f04f 30ff 	movne.w	r0, #4294967295
 8000bc6:	f000 b9d3 	b.w	8000f70 <__aeabi_idiv0>
 8000bca:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bce:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd2:	2900      	cmp	r1, #0
 8000bd4:	db09      	blt.n	8000bea <__aeabi_ldivmod+0x42>
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	db1a      	blt.n	8000c10 <__aeabi_ldivmod+0x68>
 8000bda:	f000 f84d 	bl	8000c78 <__udivmoddi4>
 8000bde:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be6:	b004      	add	sp, #16
 8000be8:	4770      	bx	lr
 8000bea:	4240      	negs	r0, r0
 8000bec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	db1b      	blt.n	8000c2c <__aeabi_ldivmod+0x84>
 8000bf4:	f000 f840 	bl	8000c78 <__udivmoddi4>
 8000bf8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bfc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c00:	b004      	add	sp, #16
 8000c02:	4240      	negs	r0, r0
 8000c04:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c08:	4252      	negs	r2, r2
 8000c0a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c0e:	4770      	bx	lr
 8000c10:	4252      	negs	r2, r2
 8000c12:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c16:	f000 f82f 	bl	8000c78 <__udivmoddi4>
 8000c1a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c1e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c22:	b004      	add	sp, #16
 8000c24:	4240      	negs	r0, r0
 8000c26:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c2a:	4770      	bx	lr
 8000c2c:	4252      	negs	r2, r2
 8000c2e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c32:	f000 f821 	bl	8000c78 <__udivmoddi4>
 8000c36:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c3a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c3e:	b004      	add	sp, #16
 8000c40:	4252      	negs	r2, r2
 8000c42:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c46:	4770      	bx	lr

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b988 	b.w	8000f70 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	468e      	mov	lr, r1
 8000c80:	4604      	mov	r4, r0
 8000c82:	4688      	mov	r8, r1
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d14a      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4617      	mov	r7, r2
 8000c8c:	d962      	bls.n	8000d54 <__udivmoddi4+0xdc>
 8000c8e:	fab2 f682 	clz	r6, r2
 8000c92:	b14e      	cbz	r6, 8000ca8 <__udivmoddi4+0x30>
 8000c94:	f1c6 0320 	rsb	r3, r6, #32
 8000c98:	fa01 f806 	lsl.w	r8, r1, r6
 8000c9c:	fa20 f303 	lsr.w	r3, r0, r3
 8000ca0:	40b7      	lsls	r7, r6
 8000ca2:	ea43 0808 	orr.w	r8, r3, r8
 8000ca6:	40b4      	lsls	r4, r6
 8000ca8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cac:	fa1f fc87 	uxth.w	ip, r7
 8000cb0:	fbb8 f1fe 	udiv	r1, r8, lr
 8000cb4:	0c23      	lsrs	r3, r4, #16
 8000cb6:	fb0e 8811 	mls	r8, lr, r1, r8
 8000cba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cbe:	fb01 f20c 	mul.w	r2, r1, ip
 8000cc2:	429a      	cmp	r2, r3
 8000cc4:	d909      	bls.n	8000cda <__udivmoddi4+0x62>
 8000cc6:	18fb      	adds	r3, r7, r3
 8000cc8:	f101 30ff 	add.w	r0, r1, #4294967295
 8000ccc:	f080 80ea 	bcs.w	8000ea4 <__udivmoddi4+0x22c>
 8000cd0:	429a      	cmp	r2, r3
 8000cd2:	f240 80e7 	bls.w	8000ea4 <__udivmoddi4+0x22c>
 8000cd6:	3902      	subs	r1, #2
 8000cd8:	443b      	add	r3, r7
 8000cda:	1a9a      	subs	r2, r3, r2
 8000cdc:	b2a3      	uxth	r3, r4
 8000cde:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ce2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ce6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cea:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cee:	459c      	cmp	ip, r3
 8000cf0:	d909      	bls.n	8000d06 <__udivmoddi4+0x8e>
 8000cf2:	18fb      	adds	r3, r7, r3
 8000cf4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cf8:	f080 80d6 	bcs.w	8000ea8 <__udivmoddi4+0x230>
 8000cfc:	459c      	cmp	ip, r3
 8000cfe:	f240 80d3 	bls.w	8000ea8 <__udivmoddi4+0x230>
 8000d02:	443b      	add	r3, r7
 8000d04:	3802      	subs	r0, #2
 8000d06:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d0a:	eba3 030c 	sub.w	r3, r3, ip
 8000d0e:	2100      	movs	r1, #0
 8000d10:	b11d      	cbz	r5, 8000d1a <__udivmoddi4+0xa2>
 8000d12:	40f3      	lsrs	r3, r6
 8000d14:	2200      	movs	r2, #0
 8000d16:	e9c5 3200 	strd	r3, r2, [r5]
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d905      	bls.n	8000d2e <__udivmoddi4+0xb6>
 8000d22:	b10d      	cbz	r5, 8000d28 <__udivmoddi4+0xb0>
 8000d24:	e9c5 0100 	strd	r0, r1, [r5]
 8000d28:	2100      	movs	r1, #0
 8000d2a:	4608      	mov	r0, r1
 8000d2c:	e7f5      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d2e:	fab3 f183 	clz	r1, r3
 8000d32:	2900      	cmp	r1, #0
 8000d34:	d146      	bne.n	8000dc4 <__udivmoddi4+0x14c>
 8000d36:	4573      	cmp	r3, lr
 8000d38:	d302      	bcc.n	8000d40 <__udivmoddi4+0xc8>
 8000d3a:	4282      	cmp	r2, r0
 8000d3c:	f200 8105 	bhi.w	8000f4a <__udivmoddi4+0x2d2>
 8000d40:	1a84      	subs	r4, r0, r2
 8000d42:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d46:	2001      	movs	r0, #1
 8000d48:	4690      	mov	r8, r2
 8000d4a:	2d00      	cmp	r5, #0
 8000d4c:	d0e5      	beq.n	8000d1a <__udivmoddi4+0xa2>
 8000d4e:	e9c5 4800 	strd	r4, r8, [r5]
 8000d52:	e7e2      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d54:	2a00      	cmp	r2, #0
 8000d56:	f000 8090 	beq.w	8000e7a <__udivmoddi4+0x202>
 8000d5a:	fab2 f682 	clz	r6, r2
 8000d5e:	2e00      	cmp	r6, #0
 8000d60:	f040 80a4 	bne.w	8000eac <__udivmoddi4+0x234>
 8000d64:	1a8a      	subs	r2, r1, r2
 8000d66:	0c03      	lsrs	r3, r0, #16
 8000d68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d6c:	b280      	uxth	r0, r0
 8000d6e:	b2bc      	uxth	r4, r7
 8000d70:	2101      	movs	r1, #1
 8000d72:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d76:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d7a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d7e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d82:	429a      	cmp	r2, r3
 8000d84:	d907      	bls.n	8000d96 <__udivmoddi4+0x11e>
 8000d86:	18fb      	adds	r3, r7, r3
 8000d88:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d8c:	d202      	bcs.n	8000d94 <__udivmoddi4+0x11c>
 8000d8e:	429a      	cmp	r2, r3
 8000d90:	f200 80e0 	bhi.w	8000f54 <__udivmoddi4+0x2dc>
 8000d94:	46c4      	mov	ip, r8
 8000d96:	1a9b      	subs	r3, r3, r2
 8000d98:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d9c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000da0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000da4:	fb02 f404 	mul.w	r4, r2, r4
 8000da8:	429c      	cmp	r4, r3
 8000daa:	d907      	bls.n	8000dbc <__udivmoddi4+0x144>
 8000dac:	18fb      	adds	r3, r7, r3
 8000dae:	f102 30ff 	add.w	r0, r2, #4294967295
 8000db2:	d202      	bcs.n	8000dba <__udivmoddi4+0x142>
 8000db4:	429c      	cmp	r4, r3
 8000db6:	f200 80ca 	bhi.w	8000f4e <__udivmoddi4+0x2d6>
 8000dba:	4602      	mov	r2, r0
 8000dbc:	1b1b      	subs	r3, r3, r4
 8000dbe:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000dc2:	e7a5      	b.n	8000d10 <__udivmoddi4+0x98>
 8000dc4:	f1c1 0620 	rsb	r6, r1, #32
 8000dc8:	408b      	lsls	r3, r1
 8000dca:	fa22 f706 	lsr.w	r7, r2, r6
 8000dce:	431f      	orrs	r7, r3
 8000dd0:	fa0e f401 	lsl.w	r4, lr, r1
 8000dd4:	fa20 f306 	lsr.w	r3, r0, r6
 8000dd8:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ddc:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000de0:	4323      	orrs	r3, r4
 8000de2:	fa00 f801 	lsl.w	r8, r0, r1
 8000de6:	fa1f fc87 	uxth.w	ip, r7
 8000dea:	fbbe f0f9 	udiv	r0, lr, r9
 8000dee:	0c1c      	lsrs	r4, r3, #16
 8000df0:	fb09 ee10 	mls	lr, r9, r0, lr
 8000df4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000df8:	fb00 fe0c 	mul.w	lr, r0, ip
 8000dfc:	45a6      	cmp	lr, r4
 8000dfe:	fa02 f201 	lsl.w	r2, r2, r1
 8000e02:	d909      	bls.n	8000e18 <__udivmoddi4+0x1a0>
 8000e04:	193c      	adds	r4, r7, r4
 8000e06:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e0a:	f080 809c 	bcs.w	8000f46 <__udivmoddi4+0x2ce>
 8000e0e:	45a6      	cmp	lr, r4
 8000e10:	f240 8099 	bls.w	8000f46 <__udivmoddi4+0x2ce>
 8000e14:	3802      	subs	r0, #2
 8000e16:	443c      	add	r4, r7
 8000e18:	eba4 040e 	sub.w	r4, r4, lr
 8000e1c:	fa1f fe83 	uxth.w	lr, r3
 8000e20:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e24:	fb09 4413 	mls	r4, r9, r3, r4
 8000e28:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e2c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e30:	45a4      	cmp	ip, r4
 8000e32:	d908      	bls.n	8000e46 <__udivmoddi4+0x1ce>
 8000e34:	193c      	adds	r4, r7, r4
 8000e36:	f103 3eff 	add.w	lr, r3, #4294967295
 8000e3a:	f080 8082 	bcs.w	8000f42 <__udivmoddi4+0x2ca>
 8000e3e:	45a4      	cmp	ip, r4
 8000e40:	d97f      	bls.n	8000f42 <__udivmoddi4+0x2ca>
 8000e42:	3b02      	subs	r3, #2
 8000e44:	443c      	add	r4, r7
 8000e46:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e4a:	eba4 040c 	sub.w	r4, r4, ip
 8000e4e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e52:	4564      	cmp	r4, ip
 8000e54:	4673      	mov	r3, lr
 8000e56:	46e1      	mov	r9, ip
 8000e58:	d362      	bcc.n	8000f20 <__udivmoddi4+0x2a8>
 8000e5a:	d05f      	beq.n	8000f1c <__udivmoddi4+0x2a4>
 8000e5c:	b15d      	cbz	r5, 8000e76 <__udivmoddi4+0x1fe>
 8000e5e:	ebb8 0203 	subs.w	r2, r8, r3
 8000e62:	eb64 0409 	sbc.w	r4, r4, r9
 8000e66:	fa04 f606 	lsl.w	r6, r4, r6
 8000e6a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e6e:	431e      	orrs	r6, r3
 8000e70:	40cc      	lsrs	r4, r1
 8000e72:	e9c5 6400 	strd	r6, r4, [r5]
 8000e76:	2100      	movs	r1, #0
 8000e78:	e74f      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000e7a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e7e:	0c01      	lsrs	r1, r0, #16
 8000e80:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e84:	b280      	uxth	r0, r0
 8000e86:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e8a:	463b      	mov	r3, r7
 8000e8c:	4638      	mov	r0, r7
 8000e8e:	463c      	mov	r4, r7
 8000e90:	46b8      	mov	r8, r7
 8000e92:	46be      	mov	lr, r7
 8000e94:	2620      	movs	r6, #32
 8000e96:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e9a:	eba2 0208 	sub.w	r2, r2, r8
 8000e9e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000ea2:	e766      	b.n	8000d72 <__udivmoddi4+0xfa>
 8000ea4:	4601      	mov	r1, r0
 8000ea6:	e718      	b.n	8000cda <__udivmoddi4+0x62>
 8000ea8:	4610      	mov	r0, r2
 8000eaa:	e72c      	b.n	8000d06 <__udivmoddi4+0x8e>
 8000eac:	f1c6 0220 	rsb	r2, r6, #32
 8000eb0:	fa2e f302 	lsr.w	r3, lr, r2
 8000eb4:	40b7      	lsls	r7, r6
 8000eb6:	40b1      	lsls	r1, r6
 8000eb8:	fa20 f202 	lsr.w	r2, r0, r2
 8000ebc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ec0:	430a      	orrs	r2, r1
 8000ec2:	fbb3 f8fe 	udiv	r8, r3, lr
 8000ec6:	b2bc      	uxth	r4, r7
 8000ec8:	fb0e 3318 	mls	r3, lr, r8, r3
 8000ecc:	0c11      	lsrs	r1, r2, #16
 8000ece:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed2:	fb08 f904 	mul.w	r9, r8, r4
 8000ed6:	40b0      	lsls	r0, r6
 8000ed8:	4589      	cmp	r9, r1
 8000eda:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000ede:	b280      	uxth	r0, r0
 8000ee0:	d93e      	bls.n	8000f60 <__udivmoddi4+0x2e8>
 8000ee2:	1879      	adds	r1, r7, r1
 8000ee4:	f108 3cff 	add.w	ip, r8, #4294967295
 8000ee8:	d201      	bcs.n	8000eee <__udivmoddi4+0x276>
 8000eea:	4589      	cmp	r9, r1
 8000eec:	d81f      	bhi.n	8000f2e <__udivmoddi4+0x2b6>
 8000eee:	eba1 0109 	sub.w	r1, r1, r9
 8000ef2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ef6:	fb09 f804 	mul.w	r8, r9, r4
 8000efa:	fb0e 1119 	mls	r1, lr, r9, r1
 8000efe:	b292      	uxth	r2, r2
 8000f00:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f04:	4542      	cmp	r2, r8
 8000f06:	d229      	bcs.n	8000f5c <__udivmoddi4+0x2e4>
 8000f08:	18ba      	adds	r2, r7, r2
 8000f0a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f0e:	d2c4      	bcs.n	8000e9a <__udivmoddi4+0x222>
 8000f10:	4542      	cmp	r2, r8
 8000f12:	d2c2      	bcs.n	8000e9a <__udivmoddi4+0x222>
 8000f14:	f1a9 0102 	sub.w	r1, r9, #2
 8000f18:	443a      	add	r2, r7
 8000f1a:	e7be      	b.n	8000e9a <__udivmoddi4+0x222>
 8000f1c:	45f0      	cmp	r8, lr
 8000f1e:	d29d      	bcs.n	8000e5c <__udivmoddi4+0x1e4>
 8000f20:	ebbe 0302 	subs.w	r3, lr, r2
 8000f24:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f28:	3801      	subs	r0, #1
 8000f2a:	46e1      	mov	r9, ip
 8000f2c:	e796      	b.n	8000e5c <__udivmoddi4+0x1e4>
 8000f2e:	eba7 0909 	sub.w	r9, r7, r9
 8000f32:	4449      	add	r1, r9
 8000f34:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f38:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f3c:	fb09 f804 	mul.w	r8, r9, r4
 8000f40:	e7db      	b.n	8000efa <__udivmoddi4+0x282>
 8000f42:	4673      	mov	r3, lr
 8000f44:	e77f      	b.n	8000e46 <__udivmoddi4+0x1ce>
 8000f46:	4650      	mov	r0, sl
 8000f48:	e766      	b.n	8000e18 <__udivmoddi4+0x1a0>
 8000f4a:	4608      	mov	r0, r1
 8000f4c:	e6fd      	b.n	8000d4a <__udivmoddi4+0xd2>
 8000f4e:	443b      	add	r3, r7
 8000f50:	3a02      	subs	r2, #2
 8000f52:	e733      	b.n	8000dbc <__udivmoddi4+0x144>
 8000f54:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f58:	443b      	add	r3, r7
 8000f5a:	e71c      	b.n	8000d96 <__udivmoddi4+0x11e>
 8000f5c:	4649      	mov	r1, r9
 8000f5e:	e79c      	b.n	8000e9a <__udivmoddi4+0x222>
 8000f60:	eba1 0109 	sub.w	r1, r1, r9
 8000f64:	46c4      	mov	ip, r8
 8000f66:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f6a:	fb09 f804 	mul.w	r8, r9, r4
 8000f6e:	e7c4      	b.n	8000efa <__udivmoddi4+0x282>

08000f70 <__aeabi_idiv0>:
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop

08000f74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f78:	4b06      	ldr	r3, [pc, #24]	@ (8000f94 <SystemInit+0x20>)
 8000f7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f7e:	4a05      	ldr	r2, [pc, #20]	@ (8000f94 <SystemInit+0x20>)
 8000f80:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f84:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f88:	bf00      	nop
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop
 8000f94:	e000ed00 	.word	0xe000ed00

08000f98 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b087      	sub	sp, #28
 8000f9c:	af00      	add	r7, sp, #0
  uint32_t tmp, pllvco, pllp, pllsource, pllm;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000f9e:	4b34      	ldr	r3, [pc, #208]	@ (8001070 <SystemCoreClockUpdate+0xd8>)
 8000fa0:	689b      	ldr	r3, [r3, #8]
 8000fa2:	f003 030c 	and.w	r3, r3, #12
 8000fa6:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8000fa8:	693b      	ldr	r3, [r7, #16]
 8000faa:	2b08      	cmp	r3, #8
 8000fac:	d011      	beq.n	8000fd2 <SystemCoreClockUpdate+0x3a>
 8000fae:	693b      	ldr	r3, [r7, #16]
 8000fb0:	2b08      	cmp	r3, #8
 8000fb2:	d844      	bhi.n	800103e <SystemCoreClockUpdate+0xa6>
 8000fb4:	693b      	ldr	r3, [r7, #16]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d003      	beq.n	8000fc2 <SystemCoreClockUpdate+0x2a>
 8000fba:	693b      	ldr	r3, [r7, #16]
 8000fbc:	2b04      	cmp	r3, #4
 8000fbe:	d004      	beq.n	8000fca <SystemCoreClockUpdate+0x32>
 8000fc0:	e03d      	b.n	800103e <SystemCoreClockUpdate+0xa6>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8000fc2:	4b2c      	ldr	r3, [pc, #176]	@ (8001074 <SystemCoreClockUpdate+0xdc>)
 8000fc4:	4a2c      	ldr	r2, [pc, #176]	@ (8001078 <SystemCoreClockUpdate+0xe0>)
 8000fc6:	601a      	str	r2, [r3, #0]
      break;
 8000fc8:	e03d      	b.n	8001046 <SystemCoreClockUpdate+0xae>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8000fca:	4b2a      	ldr	r3, [pc, #168]	@ (8001074 <SystemCoreClockUpdate+0xdc>)
 8000fcc:	4a2b      	ldr	r2, [pc, #172]	@ (800107c <SystemCoreClockUpdate+0xe4>)
 8000fce:	601a      	str	r2, [r3, #0]
      break;
 8000fd0:	e039      	b.n	8001046 <SystemCoreClockUpdate+0xae>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8000fd2:	4b27      	ldr	r3, [pc, #156]	@ (8001070 <SystemCoreClockUpdate+0xd8>)
 8000fd4:	685b      	ldr	r3, [r3, #4]
 8000fd6:	0d9b      	lsrs	r3, r3, #22
 8000fd8:	f003 0301 	and.w	r3, r3, #1
 8000fdc:	60fb      	str	r3, [r7, #12]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000fde:	4b24      	ldr	r3, [pc, #144]	@ (8001070 <SystemCoreClockUpdate+0xd8>)
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000fe6:	60bb      	str	r3, [r7, #8]
      
      if (pllsource != 0)
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d00c      	beq.n	8001008 <SystemCoreClockUpdate+0x70>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000fee:	4a23      	ldr	r2, [pc, #140]	@ (800107c <SystemCoreClockUpdate+0xe4>)
 8000ff0:	68bb      	ldr	r3, [r7, #8]
 8000ff2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ff6:	4a1e      	ldr	r2, [pc, #120]	@ (8001070 <SystemCoreClockUpdate+0xd8>)
 8000ff8:	6852      	ldr	r2, [r2, #4]
 8000ffa:	0992      	lsrs	r2, r2, #6
 8000ffc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001000:	fb02 f303 	mul.w	r3, r2, r3
 8001004:	617b      	str	r3, [r7, #20]
 8001006:	e00b      	b.n	8001020 <SystemCoreClockUpdate+0x88>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8001008:	4a1b      	ldr	r2, [pc, #108]	@ (8001078 <SystemCoreClockUpdate+0xe0>)
 800100a:	68bb      	ldr	r3, [r7, #8]
 800100c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001010:	4a17      	ldr	r2, [pc, #92]	@ (8001070 <SystemCoreClockUpdate+0xd8>)
 8001012:	6852      	ldr	r2, [r2, #4]
 8001014:	0992      	lsrs	r2, r2, #6
 8001016:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800101a:	fb02 f303 	mul.w	r3, r2, r3
 800101e:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8001020:	4b13      	ldr	r3, [pc, #76]	@ (8001070 <SystemCoreClockUpdate+0xd8>)
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	0c1b      	lsrs	r3, r3, #16
 8001026:	f003 0303 	and.w	r3, r3, #3
 800102a:	3301      	adds	r3, #1
 800102c:	005b      	lsls	r3, r3, #1
 800102e:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllp;
 8001030:	697a      	ldr	r2, [r7, #20]
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	fbb2 f3f3 	udiv	r3, r2, r3
 8001038:	4a0e      	ldr	r2, [pc, #56]	@ (8001074 <SystemCoreClockUpdate+0xdc>)
 800103a:	6013      	str	r3, [r2, #0]
      break;
 800103c:	e003      	b.n	8001046 <SystemCoreClockUpdate+0xae>
    default:
      SystemCoreClock = HSI_VALUE;
 800103e:	4b0d      	ldr	r3, [pc, #52]	@ (8001074 <SystemCoreClockUpdate+0xdc>)
 8001040:	4a0d      	ldr	r2, [pc, #52]	@ (8001078 <SystemCoreClockUpdate+0xe0>)
 8001042:	601a      	str	r2, [r3, #0]
      break;
 8001044:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8001046:	4b0a      	ldr	r3, [pc, #40]	@ (8001070 <SystemCoreClockUpdate+0xd8>)
 8001048:	689b      	ldr	r3, [r3, #8]
 800104a:	091b      	lsrs	r3, r3, #4
 800104c:	f003 030f 	and.w	r3, r3, #15
 8001050:	4a0b      	ldr	r2, [pc, #44]	@ (8001080 <SystemCoreClockUpdate+0xe8>)
 8001052:	5cd3      	ldrb	r3, [r2, r3]
 8001054:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8001056:	4b07      	ldr	r3, [pc, #28]	@ (8001074 <SystemCoreClockUpdate+0xdc>)
 8001058:	681a      	ldr	r2, [r3, #0]
 800105a:	693b      	ldr	r3, [r7, #16]
 800105c:	fa22 f303 	lsr.w	r3, r2, r3
 8001060:	4a04      	ldr	r2, [pc, #16]	@ (8001074 <SystemCoreClockUpdate+0xdc>)
 8001062:	6013      	str	r3, [r2, #0]
}
 8001064:	bf00      	nop
 8001066:	371c      	adds	r7, #28
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr
 8001070:	40023800 	.word	0x40023800
 8001074:	20000000 	.word	0x20000000
 8001078:	00f42400 	.word	0x00f42400
 800107c:	016e3600 	.word	0x016e3600
 8001080:	08006b60 	.word	0x08006b60

08001084 <q31_mul>:
#define Q31_SQRT3_OVER_2 Q31_FRAC(866025404, 1000000000) // sqrt(3)/2
#define Q31_MARGIN_2PCT Q31_FRAC(1, 50) // 0.02
#define Q31_INV_TWOPI Q31_FRAC(159154943, 1000000000) // 1/(2π) ≈ 0.159154943

static inline int32_t q31_mul(int32_t a, int32_t b)
{
 8001084:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 8001088:	b085      	sub	sp, #20
 800108a:	af00      	add	r7, sp, #0
 800108c:	6078      	str	r0, [r7, #4]
 800108e:	6039      	str	r1, [r7, #0]
	int64_t t = (int64_t) a * (int64_t) b;
 8001090:	6879      	ldr	r1, [r7, #4]
 8001092:	17c8      	asrs	r0, r1, #31
 8001094:	4688      	mov	r8, r1
 8001096:	4681      	mov	r9, r0
 8001098:	6839      	ldr	r1, [r7, #0]
 800109a:	17c8      	asrs	r0, r1, #31
 800109c:	460c      	mov	r4, r1
 800109e:	4605      	mov	r5, r0
 80010a0:	fb04 f009 	mul.w	r0, r4, r9
 80010a4:	fb08 f105 	mul.w	r1, r8, r5
 80010a8:	4401      	add	r1, r0
 80010aa:	fba8 2304 	umull	r2, r3, r8, r4
 80010ae:	4419      	add	r1, r3
 80010b0:	460b      	mov	r3, r1
 80010b2:	e9c7 2302 	strd	r2, r3, [r7, #8]
 80010b6:	e9c7 2302 	strd	r2, r3, [r7, #8]
	t >>= 31;
 80010ba:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80010be:	f04f 0200 	mov.w	r2, #0
 80010c2:	f04f 0300 	mov.w	r3, #0
 80010c6:	0fc2      	lsrs	r2, r0, #31
 80010c8:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 80010cc:	17cb      	asrs	r3, r1, #31
 80010ce:	e9c7 2302 	strd	r2, r3, [r7, #8]
	if (t > 0x7FFFFFFFLL)
 80010d2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80010d6:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80010da:	f173 0300 	sbcs.w	r3, r3, #0
 80010de:	db05      	blt.n	80010ec <q31_mul+0x68>
		t = 0x7FFFFFFFLL;
 80010e0:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 80010e4:	f04f 0300 	mov.w	r3, #0
 80010e8:	e9c7 2302 	strd	r2, r3, [r7, #8]
	if (t < -0x80000000LL)
 80010ec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80010f0:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80010f4:	f173 33ff 	sbcs.w	r3, r3, #4294967295
 80010f8:	da05      	bge.n	8001106 <q31_mul+0x82>
		t = -0x80000000LL;
 80010fa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80010fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001102:	e9c7 2302 	strd	r2, r3, [r7, #8]
	return (int32_t) t;
 8001106:	68bb      	ldr	r3, [r7, #8]
}
 8001108:	4618      	mov	r0, r3
 800110a:	3714      	adds	r7, #20
 800110c:	46bd      	mov	sp, r7
 800110e:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 8001112:	4770      	bx	lr

08001114 <q31_add_sat>:
		t = -0x80000000LL;
	return (int32_t) t;
}

static inline int32_t q31_add_sat(int32_t a, int32_t b)
{
 8001114:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 8001118:	b085      	sub	sp, #20
 800111a:	af00      	add	r7, sp, #0
 800111c:	6078      	str	r0, [r7, #4]
 800111e:	6039      	str	r1, [r7, #0]
	int64_t t = (int64_t) a + (int64_t) b;
 8001120:	6879      	ldr	r1, [r7, #4]
 8001122:	17c8      	asrs	r0, r1, #31
 8001124:	460c      	mov	r4, r1
 8001126:	4605      	mov	r5, r0
 8001128:	6839      	ldr	r1, [r7, #0]
 800112a:	17c8      	asrs	r0, r1, #31
 800112c:	460a      	mov	r2, r1
 800112e:	4603      	mov	r3, r0
 8001130:	eb14 0802 	adds.w	r8, r4, r2
 8001134:	eb45 0903 	adc.w	r9, r5, r3
 8001138:	e9c7 8902 	strd	r8, r9, [r7, #8]
	if (t > 0x7FFFFFFFLL)
 800113c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001140:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8001144:	f173 0300 	sbcs.w	r3, r3, #0
 8001148:	db05      	blt.n	8001156 <q31_add_sat+0x42>
		t = 0x7FFFFFFFLL;
 800114a:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 800114e:	f04f 0300 	mov.w	r3, #0
 8001152:	e9c7 2302 	strd	r2, r3, [r7, #8]
	if (t < -0x80000000LL)
 8001156:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800115a:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 800115e:	f173 33ff 	sbcs.w	r3, r3, #4294967295
 8001162:	da05      	bge.n	8001170 <q31_add_sat+0x5c>
		t = -0x80000000LL;
 8001164:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001168:	f04f 33ff 	mov.w	r3, #4294967295
 800116c:	e9c7 2302 	strd	r2, r3, [r7, #8]
	return (int32_t) t;
 8001170:	68bb      	ldr	r3, [r7, #8]
}
 8001172:	4618      	mov	r0, r3
 8001174:	3714      	adds	r7, #20
 8001176:	46bd      	mov	sp, r7
 8001178:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 800117c:	4770      	bx	lr

0800117e <q31_sub_sat>:

static inline int32_t q31_sub_sat(int32_t a, int32_t b)
{
 800117e:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 8001182:	b085      	sub	sp, #20
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
 8001188:	6039      	str	r1, [r7, #0]
	int64_t t = (int64_t) a - (int64_t) b;
 800118a:	6879      	ldr	r1, [r7, #4]
 800118c:	17c8      	asrs	r0, r1, #31
 800118e:	460c      	mov	r4, r1
 8001190:	4605      	mov	r5, r0
 8001192:	6839      	ldr	r1, [r7, #0]
 8001194:	17c8      	asrs	r0, r1, #31
 8001196:	460a      	mov	r2, r1
 8001198:	4603      	mov	r3, r0
 800119a:	ebb4 0802 	subs.w	r8, r4, r2
 800119e:	eb65 0903 	sbc.w	r9, r5, r3
 80011a2:	e9c7 8902 	strd	r8, r9, [r7, #8]
	if (t > 0x7FFFFFFFLL)
 80011a6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80011aa:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80011ae:	f173 0300 	sbcs.w	r3, r3, #0
 80011b2:	db05      	blt.n	80011c0 <q31_sub_sat+0x42>
		t = 0x7FFFFFFFLL;
 80011b4:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 80011b8:	f04f 0300 	mov.w	r3, #0
 80011bc:	e9c7 2302 	strd	r2, r3, [r7, #8]
	if (t < -0x80000000LL)
 80011c0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80011c4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80011c8:	f173 33ff 	sbcs.w	r3, r3, #4294967295
 80011cc:	da05      	bge.n	80011da <q31_sub_sat+0x5c>
		t = -0x80000000LL;
 80011ce:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80011d2:	f04f 33ff 	mov.w	r3, #4294967295
 80011d6:	e9c7 2302 	strd	r2, r3, [r7, #8]
	return (int32_t) t;
 80011da:	68bb      	ldr	r3, [r7, #8]
}
 80011dc:	4618      	mov	r0, r3
 80011de:	3714      	adds	r7, #20
 80011e0:	46bd      	mov	sp, r7
 80011e2:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 80011e6:	4770      	bx	lr

080011e8 <angle_wrap_q31>:

// Q31の"turn"表現（1.0=2π）で ±1.0 の範囲に折り返す
static inline int32_t angle_wrap_q31(int32_t th)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b083      	sub	sp, #12
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
	if (th > Q31_ONE)
		th -= (Q31_ONE + 1);
	else if (th < -(Q31_ONE))
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80011f6:	d103      	bne.n	8001200 <angle_wrap_q31+0x18>
		th += (Q31_ONE + 1);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 80011fe:	607b      	str	r3, [r7, #4]
	return th;
 8001200:	687b      	ldr	r3, [r7, #4]
}
 8001202:	4618      	mov	r0, r3
 8001204:	370c      	adds	r7, #12
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr

0800120e <q16_16_from_int>:
#define Q16_16_HALF  ((q16_16_t)(1 << (Q16_16_FBITS - 1)))
#define Q16_16_MAX   ((q16_16_t)0x7FFFFFFF)
#define Q16_16_MIN   ((q16_16_t)0x80000000)

static inline q16_16_t q16_16_from_int(int32_t x)
{
 800120e:	b480      	push	{r7}
 8001210:	b083      	sub	sp, #12
 8001212:	af00      	add	r7, sp, #0
 8001214:	6078      	str	r0, [r7, #4]
	return (q16_16_t) (x << Q16_16_FBITS);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	041b      	lsls	r3, r3, #16
}
 800121a:	4618      	mov	r0, r3
 800121c:	370c      	adds	r7, #12
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr

08001226 <q16_16_from_frac>:
		return (int32_t) ((x + 1 - Q16_16_HALF) >> Q16_16_FBITS);
	}
}

static inline q16_16_t q16_16_from_frac(int32_t num, int32_t den)
{
 8001226:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800122a:	b08a      	sub	sp, #40	@ 0x28
 800122c:	af00      	add	r7, sp, #0
 800122e:	61f8      	str	r0, [r7, #28]
 8001230:	61b9      	str	r1, [r7, #24]
	int64_t t = ((int64_t) num << Q16_16_FBITS);
 8001232:	69fb      	ldr	r3, [r7, #28]
 8001234:	17da      	asrs	r2, r3, #31
 8001236:	461c      	mov	r4, r3
 8001238:	4615      	mov	r5, r2
 800123a:	f04f 0200 	mov.w	r2, #0
 800123e:	f04f 0300 	mov.w	r3, #0
 8001242:	042b      	lsls	r3, r5, #16
 8001244:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8001248:	0422      	lsls	r2, r4, #16
 800124a:	e9c7 2308 	strd	r2, r3, [r7, #32]
	if ((t >= 0 && den > 0) || (t < 0 && den < 0))
 800124e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001252:	2b00      	cmp	r3, #0
 8001254:	db02      	blt.n	800125c <q16_16_from_frac+0x36>
 8001256:	69bb      	ldr	r3, [r7, #24]
 8001258:	2b00      	cmp	r3, #0
 800125a:	dc06      	bgt.n	800126a <q16_16_from_frac+0x44>
 800125c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001260:	2b00      	cmp	r3, #0
 8001262:	da1f      	bge.n	80012a4 <q16_16_from_frac+0x7e>
 8001264:	69bb      	ldr	r3, [r7, #24]
 8001266:	2b00      	cmp	r3, #0
 8001268:	da1c      	bge.n	80012a4 <q16_16_from_frac+0x7e>
		t += (den > 0) ? (den / 2) : (-den / 2);
 800126a:	69bb      	ldr	r3, [r7, #24]
 800126c:	2b00      	cmp	r3, #0
 800126e:	dd04      	ble.n	800127a <q16_16_from_frac+0x54>
 8001270:	69bb      	ldr	r3, [r7, #24]
 8001272:	0fda      	lsrs	r2, r3, #31
 8001274:	4413      	add	r3, r2
 8001276:	105b      	asrs	r3, r3, #1
 8001278:	e004      	b.n	8001284 <q16_16_from_frac+0x5e>
 800127a:	69bb      	ldr	r3, [r7, #24]
 800127c:	425b      	negs	r3, r3
 800127e:	0fda      	lsrs	r2, r3, #31
 8001280:	4413      	add	r3, r2
 8001282:	105b      	asrs	r3, r3, #1
 8001284:	17da      	asrs	r2, r3, #31
 8001286:	469a      	mov	sl, r3
 8001288:	4693      	mov	fp, r2
 800128a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800128e:	eb12 010a 	adds.w	r1, r2, sl
 8001292:	60b9      	str	r1, [r7, #8]
 8001294:	eb43 030b 	adc.w	r3, r3, fp
 8001298:	60fb      	str	r3, [r7, #12]
 800129a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800129e:	e9c7 3408 	strd	r3, r4, [r7, #32]
 80012a2:	e01b      	b.n	80012dc <q16_16_from_frac+0xb6>
	else
		t -= (den > 0) ? (den / 2) : (-den / 2);
 80012a4:	69bb      	ldr	r3, [r7, #24]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	dd04      	ble.n	80012b4 <q16_16_from_frac+0x8e>
 80012aa:	69bb      	ldr	r3, [r7, #24]
 80012ac:	0fda      	lsrs	r2, r3, #31
 80012ae:	4413      	add	r3, r2
 80012b0:	105b      	asrs	r3, r3, #1
 80012b2:	e004      	b.n	80012be <q16_16_from_frac+0x98>
 80012b4:	69bb      	ldr	r3, [r7, #24]
 80012b6:	425b      	negs	r3, r3
 80012b8:	0fda      	lsrs	r2, r3, #31
 80012ba:	4413      	add	r3, r2
 80012bc:	105b      	asrs	r3, r3, #1
 80012be:	17da      	asrs	r2, r3, #31
 80012c0:	4698      	mov	r8, r3
 80012c2:	4691      	mov	r9, r2
 80012c4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80012c8:	ebb2 0108 	subs.w	r1, r2, r8
 80012cc:	6039      	str	r1, [r7, #0]
 80012ce:	eb63 0309 	sbc.w	r3, r3, r9
 80012d2:	607b      	str	r3, [r7, #4]
 80012d4:	e9d7 3400 	ldrd	r3, r4, [r7]
 80012d8:	e9c7 3408 	strd	r3, r4, [r7, #32]
	return (q16_16_t) (t / den);
 80012dc:	69bb      	ldr	r3, [r7, #24]
 80012de:	17da      	asrs	r2, r3, #31
 80012e0:	613b      	str	r3, [r7, #16]
 80012e2:	617a      	str	r2, [r7, #20]
 80012e4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80012e8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80012ec:	f7ff fc5c 	bl	8000ba8 <__aeabi_ldivmod>
 80012f0:	4602      	mov	r2, r0
 80012f2:	460b      	mov	r3, r1
 80012f4:	4613      	mov	r3, r2
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	3728      	adds	r7, #40	@ 0x28
 80012fa:	46bd      	mov	sp, r7
 80012fc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08001300 <q16_16_mul>:

static inline q16_16_t q16_16_mul(q16_16_t a, q16_16_t b)
{
 8001300:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8001304:	b085      	sub	sp, #20
 8001306:	af00      	add	r7, sp, #0
 8001308:	6078      	str	r0, [r7, #4]
 800130a:	6039      	str	r1, [r7, #0]
	int64_t t = (int64_t) a * (int64_t) b;
 800130c:	6879      	ldr	r1, [r7, #4]
 800130e:	17c8      	asrs	r0, r1, #31
 8001310:	468a      	mov	sl, r1
 8001312:	4683      	mov	fp, r0
 8001314:	6839      	ldr	r1, [r7, #0]
 8001316:	17c8      	asrs	r0, r1, #31
 8001318:	4688      	mov	r8, r1
 800131a:	4681      	mov	r9, r0
 800131c:	fb08 f00b 	mul.w	r0, r8, fp
 8001320:	fb0a f109 	mul.w	r1, sl, r9
 8001324:	4401      	add	r1, r0
 8001326:	fbaa 2308 	umull	r2, r3, sl, r8
 800132a:	4419      	add	r1, r3
 800132c:	460b      	mov	r3, r1
 800132e:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8001332:	e9c7 2302 	strd	r2, r3, [r7, #8]
	t = (t + (int64_t) Q16_16_HALF) >> Q16_16_FBITS;
 8001336:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800133a:	f512 4400 	adds.w	r4, r2, #32768	@ 0x8000
 800133e:	f143 0500 	adc.w	r5, r3, #0
 8001342:	f04f 0200 	mov.w	r2, #0
 8001346:	f04f 0300 	mov.w	r3, #0
 800134a:	0c22      	lsrs	r2, r4, #16
 800134c:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
 8001350:	142b      	asrs	r3, r5, #16
 8001352:	e9c7 2302 	strd	r2, r3, [r7, #8]
	if (t > (int64_t) Q16_16_MAX)
 8001356:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800135a:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 800135e:	f173 0300 	sbcs.w	r3, r3, #0
 8001362:	db02      	blt.n	800136a <q16_16_mul+0x6a>
		return Q16_16_MAX;
 8001364:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8001368:	e00a      	b.n	8001380 <q16_16_mul+0x80>
	if (t < (int64_t) Q16_16_MIN)
 800136a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800136e:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8001372:	f173 33ff 	sbcs.w	r3, r3, #4294967295
 8001376:	da02      	bge.n	800137e <q16_16_mul+0x7e>
		return Q16_16_MIN;
 8001378:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800137c:	e000      	b.n	8001380 <q16_16_mul+0x80>
	return (q16_16_t) t;
 800137e:	68bb      	ldr	r3, [r7, #8]
}
 8001380:	4618      	mov	r0, r3
 8001382:	3714      	adds	r7, #20
 8001384:	46bd      	mov	sp, r7
 8001386:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800138a:	4770      	bx	lr

0800138c <q16_16_div>:

static inline q16_16_t q16_16_div(q16_16_t a, q16_16_t b)
{
 800138c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001390:	b08c      	sub	sp, #48	@ 0x30
 8001392:	af00      	add	r7, sp, #0
 8001394:	61f8      	str	r0, [r7, #28]
 8001396:	61b9      	str	r1, [r7, #24]
	if (b == 0)
 8001398:	69bb      	ldr	r3, [r7, #24]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d108      	bne.n	80013b0 <q16_16_div+0x24>
		return (a >= 0) ? Q16_16_MAX : Q16_16_MIN;
 800139e:	69fb      	ldr	r3, [r7, #28]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	db02      	blt.n	80013aa <q16_16_div+0x1e>
 80013a4:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80013a8:	e07a      	b.n	80014a0 <q16_16_div+0x114>
 80013aa:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80013ae:	e077      	b.n	80014a0 <q16_16_div+0x114>
	int64_t t = ((int64_t) a << Q16_16_FBITS);
 80013b0:	69fb      	ldr	r3, [r7, #28]
 80013b2:	17da      	asrs	r2, r3, #31
 80013b4:	461c      	mov	r4, r3
 80013b6:	4615      	mov	r5, r2
 80013b8:	f04f 0200 	mov.w	r2, #0
 80013bc:	f04f 0300 	mov.w	r3, #0
 80013c0:	042b      	lsls	r3, r5, #16
 80013c2:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 80013c6:	0422      	lsls	r2, r4, #16
 80013c8:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
	if ((t >= 0 && b > 0) || (t < 0 && b < 0))
 80013cc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	db02      	blt.n	80013da <q16_16_div+0x4e>
 80013d4:	69bb      	ldr	r3, [r7, #24]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	dc06      	bgt.n	80013e8 <q16_16_div+0x5c>
 80013da:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80013de:	2b00      	cmp	r3, #0
 80013e0:	da1f      	bge.n	8001422 <q16_16_div+0x96>
 80013e2:	69bb      	ldr	r3, [r7, #24]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	da1c      	bge.n	8001422 <q16_16_div+0x96>
		t += (b > 0) ? (b / 2) : (-b / 2);
 80013e8:	69bb      	ldr	r3, [r7, #24]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	dd04      	ble.n	80013f8 <q16_16_div+0x6c>
 80013ee:	69bb      	ldr	r3, [r7, #24]
 80013f0:	0fda      	lsrs	r2, r3, #31
 80013f2:	4413      	add	r3, r2
 80013f4:	105b      	asrs	r3, r3, #1
 80013f6:	e004      	b.n	8001402 <q16_16_div+0x76>
 80013f8:	69bb      	ldr	r3, [r7, #24]
 80013fa:	425b      	negs	r3, r3
 80013fc:	0fda      	lsrs	r2, r3, #31
 80013fe:	4413      	add	r3, r2
 8001400:	105b      	asrs	r3, r3, #1
 8001402:	17da      	asrs	r2, r3, #31
 8001404:	469a      	mov	sl, r3
 8001406:	4693      	mov	fp, r2
 8001408:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800140c:	eb12 010a 	adds.w	r1, r2, sl
 8001410:	60b9      	str	r1, [r7, #8]
 8001412:	eb43 030b 	adc.w	r3, r3, fp
 8001416:	60fb      	str	r3, [r7, #12]
 8001418:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800141c:	e9c7 340a 	strd	r3, r4, [r7, #40]	@ 0x28
 8001420:	e01b      	b.n	800145a <q16_16_div+0xce>
	else
		t -= (b > 0) ? (b / 2) : (-b / 2);
 8001422:	69bb      	ldr	r3, [r7, #24]
 8001424:	2b00      	cmp	r3, #0
 8001426:	dd04      	ble.n	8001432 <q16_16_div+0xa6>
 8001428:	69bb      	ldr	r3, [r7, #24]
 800142a:	0fda      	lsrs	r2, r3, #31
 800142c:	4413      	add	r3, r2
 800142e:	105b      	asrs	r3, r3, #1
 8001430:	e004      	b.n	800143c <q16_16_div+0xb0>
 8001432:	69bb      	ldr	r3, [r7, #24]
 8001434:	425b      	negs	r3, r3
 8001436:	0fda      	lsrs	r2, r3, #31
 8001438:	4413      	add	r3, r2
 800143a:	105b      	asrs	r3, r3, #1
 800143c:	17da      	asrs	r2, r3, #31
 800143e:	4698      	mov	r8, r3
 8001440:	4691      	mov	r9, r2
 8001442:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001446:	ebb2 0108 	subs.w	r1, r2, r8
 800144a:	6039      	str	r1, [r7, #0]
 800144c:	eb63 0309 	sbc.w	r3, r3, r9
 8001450:	607b      	str	r3, [r7, #4]
 8001452:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001456:	e9c7 340a 	strd	r3, r4, [r7, #40]	@ 0x28
	int64_t q = t / b;
 800145a:	69bb      	ldr	r3, [r7, #24]
 800145c:	17da      	asrs	r2, r3, #31
 800145e:	613b      	str	r3, [r7, #16]
 8001460:	617a      	str	r2, [r7, #20]
 8001462:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001466:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800146a:	f7ff fb9d 	bl	8000ba8 <__aeabi_ldivmod>
 800146e:	4602      	mov	r2, r0
 8001470:	460b      	mov	r3, r1
 8001472:	e9c7 2308 	strd	r2, r3, [r7, #32]
	if (q > (int64_t) Q16_16_MAX)
 8001476:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800147a:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 800147e:	f173 0300 	sbcs.w	r3, r3, #0
 8001482:	db02      	blt.n	800148a <q16_16_div+0xfe>
		return Q16_16_MAX;
 8001484:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8001488:	e00a      	b.n	80014a0 <q16_16_div+0x114>
	if (q < (int64_t) Q16_16_MIN)
 800148a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800148e:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8001492:	f173 33ff 	sbcs.w	r3, r3, #4294967295
 8001496:	da02      	bge.n	800149e <q16_16_div+0x112>
		return Q16_16_MIN;
 8001498:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800149c:	e000      	b.n	80014a0 <q16_16_div+0x114>
	return (q16_16_t) q;
 800149e:	6a3b      	ldr	r3, [r7, #32]
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	3730      	adds	r7, #48	@ 0x30
 80014a4:	46bd      	mov	sp, r7
 80014a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080014aa <q16_16_add_sat>:

static inline q16_16_t q16_16_add_sat(q16_16_t a, q16_16_t b)
{
 80014aa:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 80014ae:	b085      	sub	sp, #20
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
 80014b4:	6039      	str	r1, [r7, #0]
	int64_t s = (int64_t) a + (int64_t) b;
 80014b6:	6879      	ldr	r1, [r7, #4]
 80014b8:	17c8      	asrs	r0, r1, #31
 80014ba:	460c      	mov	r4, r1
 80014bc:	4605      	mov	r5, r0
 80014be:	6839      	ldr	r1, [r7, #0]
 80014c0:	17c8      	asrs	r0, r1, #31
 80014c2:	460a      	mov	r2, r1
 80014c4:	4603      	mov	r3, r0
 80014c6:	eb14 0802 	adds.w	r8, r4, r2
 80014ca:	eb45 0903 	adc.w	r9, r5, r3
 80014ce:	e9c7 8902 	strd	r8, r9, [r7, #8]
	if (s > (int64_t) Q16_16_MAX)
 80014d2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80014d6:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80014da:	f173 0300 	sbcs.w	r3, r3, #0
 80014de:	db02      	blt.n	80014e6 <q16_16_add_sat+0x3c>
		return Q16_16_MAX;
 80014e0:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80014e4:	e00a      	b.n	80014fc <q16_16_add_sat+0x52>
	if (s < (int64_t) Q16_16_MIN)
 80014e6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80014ea:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80014ee:	f173 33ff 	sbcs.w	r3, r3, #4294967295
 80014f2:	da02      	bge.n	80014fa <q16_16_add_sat+0x50>
		return Q16_16_MIN;
 80014f4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80014f8:	e000      	b.n	80014fc <q16_16_add_sat+0x52>
	return (q16_16_t) s;
 80014fa:	68bb      	ldr	r3, [r7, #8]
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	3714      	adds	r7, #20
 8001500:	46bd      	mov	sp, r7
 8001502:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 8001506:	4770      	bx	lr

08001508 <q16_16_sub_sat>:

static inline q16_16_t q16_16_sub_sat(q16_16_t a, q16_16_t b)
{
 8001508:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 800150c:	b085      	sub	sp, #20
 800150e:	af00      	add	r7, sp, #0
 8001510:	6078      	str	r0, [r7, #4]
 8001512:	6039      	str	r1, [r7, #0]
	int64_t d = (int64_t) a - (int64_t) b;
 8001514:	6879      	ldr	r1, [r7, #4]
 8001516:	17c8      	asrs	r0, r1, #31
 8001518:	460c      	mov	r4, r1
 800151a:	4605      	mov	r5, r0
 800151c:	6839      	ldr	r1, [r7, #0]
 800151e:	17c8      	asrs	r0, r1, #31
 8001520:	460a      	mov	r2, r1
 8001522:	4603      	mov	r3, r0
 8001524:	ebb4 0802 	subs.w	r8, r4, r2
 8001528:	eb65 0903 	sbc.w	r9, r5, r3
 800152c:	e9c7 8902 	strd	r8, r9, [r7, #8]
	if (d > (int64_t) Q16_16_MAX)
 8001530:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001534:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8001538:	f173 0300 	sbcs.w	r3, r3, #0
 800153c:	db02      	blt.n	8001544 <q16_16_sub_sat+0x3c>
		return Q16_16_MAX;
 800153e:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8001542:	e00a      	b.n	800155a <q16_16_sub_sat+0x52>
	if (d < (int64_t) Q16_16_MIN)
 8001544:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001548:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 800154c:	f173 33ff 	sbcs.w	r3, r3, #4294967295
 8001550:	da02      	bge.n	8001558 <q16_16_sub_sat+0x50>
		return Q16_16_MIN;
 8001552:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8001556:	e000      	b.n	800155a <q16_16_sub_sat+0x52>
	return (q16_16_t) d;
 8001558:	68bb      	ldr	r3, [r7, #8]
}
 800155a:	4618      	mov	r0, r3
 800155c:	3714      	adds	r7, #20
 800155e:	46bd      	mov	sp, r7
 8001560:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 8001564:	4770      	bx	lr

08001566 <adc_vcal_init>:
	uint8_t valid; /* 有効更新済みフラグ */
} adc_vcal_t;

static inline void adc_vcal_init(adc_vcal_t *s, q16_16_t v_ref_in,
		q16_16_t alpha)
{
 8001566:	b580      	push	{r7, lr}
 8001568:	b086      	sub	sp, #24
 800156a:	af00      	add	r7, sp, #0
 800156c:	60f8      	str	r0, [r7, #12]
 800156e:	60b9      	str	r1, [r7, #8]
 8001570:	607a      	str	r2, [r7, #4]
	s->v_ref_in = v_ref_in;
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	68ba      	ldr	r2, [r7, #8]
 8001576:	601a      	str	r2, [r3, #0]
	s->alpha = alpha;
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	687a      	ldr	r2, [r7, #4]
 800157c:	609a      	str	r2, [r3, #8]
	s->valid = 0;
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	2200      	movs	r2, #0
 8001582:	731a      	strb	r2, [r3, #12]
	/* 初期：名目 3.3V → V/LSB = 3.3/4095 */
	q16_16_t vdda_nom = q16_16_from_frac(33, 10);
 8001584:	210a      	movs	r1, #10
 8001586:	2021      	movs	r0, #33	@ 0x21
 8001588:	f7ff fe4d 	bl	8001226 <q16_16_from_frac>
 800158c:	6178      	str	r0, [r7, #20]
	s->v_per_lsb = q16_16_div(vdda_nom, q16_16_from_int(4095));
 800158e:	f640 70ff 	movw	r0, #4095	@ 0xfff
 8001592:	f7ff fe3c 	bl	800120e <q16_16_from_int>
 8001596:	4603      	mov	r3, r0
 8001598:	4619      	mov	r1, r3
 800159a:	6978      	ldr	r0, [r7, #20]
 800159c:	f7ff fef6 	bl	800138c <q16_16_div>
 80015a0:	4602      	mov	r2, r0
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	605a      	str	r2, [r3, #4]
}
 80015a6:	bf00      	nop
 80015a8:	3718      	adds	r7, #24
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}

080015ae <adc_vcal_update>:

static inline void adc_vcal_update(adc_vcal_t *s, int32_t adc_raw_pa0)
{
 80015ae:	b580      	push	{r7, lr}
 80015b0:	b08a      	sub	sp, #40	@ 0x28
 80015b2:	af00      	add	r7, sp, #0
 80015b4:	6078      	str	r0, [r7, #4]
 80015b6:	6039      	str	r1, [r7, #0]
	if (adc_raw_pa0 <= 0)
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	dd3a      	ble.n	8001634 <adc_vcal_update+0x86>
		return;
	q16_16_t den = q16_16_from_int(adc_raw_pa0);
 80015be:	6838      	ldr	r0, [r7, #0]
 80015c0:	f7ff fe25 	bl	800120e <q16_16_from_int>
 80015c4:	6278      	str	r0, [r7, #36]	@ 0x24
	q16_16_t q4095 = q16_16_from_int(4095);
 80015c6:	f640 70ff 	movw	r0, #4095	@ 0xfff
 80015ca:	f7ff fe20 	bl	800120e <q16_16_from_int>
 80015ce:	6238      	str	r0, [r7, #32]
	q16_16_t vdda_est = q16_16_div(q16_16_mul(s->v_ref_in, q4095), den);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	6a39      	ldr	r1, [r7, #32]
 80015d6:	4618      	mov	r0, r3
 80015d8:	f7ff fe92 	bl	8001300 <q16_16_mul>
 80015dc:	4603      	mov	r3, r0
 80015de:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80015e0:	4618      	mov	r0, r3
 80015e2:	f7ff fed3 	bl	800138c <q16_16_div>
 80015e6:	61f8      	str	r0, [r7, #28]
	q16_16_t vlsb_est = q16_16_div(vdda_est, q4095);
 80015e8:	6a39      	ldr	r1, [r7, #32]
 80015ea:	69f8      	ldr	r0, [r7, #28]
 80015ec:	f7ff fece 	bl	800138c <q16_16_div>
 80015f0:	61b8      	str	r0, [r7, #24]
	q16_16_t one_minus = q16_16_sub_sat(Q16_16_ONE, s->alpha);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	689b      	ldr	r3, [r3, #8]
 80015f6:	4619      	mov	r1, r3
 80015f8:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 80015fc:	f7ff ff84 	bl	8001508 <q16_16_sub_sat>
 8001600:	6178      	str	r0, [r7, #20]
	q16_16_t tmp = q16_16_mul(one_minus, s->v_per_lsb);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	4619      	mov	r1, r3
 8001608:	6978      	ldr	r0, [r7, #20]
 800160a:	f7ff fe79 	bl	8001300 <q16_16_mul>
 800160e:	6138      	str	r0, [r7, #16]
	q16_16_t tmp2 = q16_16_mul(s->alpha, vlsb_est);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	689b      	ldr	r3, [r3, #8]
 8001614:	69b9      	ldr	r1, [r7, #24]
 8001616:	4618      	mov	r0, r3
 8001618:	f7ff fe72 	bl	8001300 <q16_16_mul>
 800161c:	60f8      	str	r0, [r7, #12]
	s->v_per_lsb = q16_16_add_sat(tmp, tmp2);
 800161e:	68f9      	ldr	r1, [r7, #12]
 8001620:	6938      	ldr	r0, [r7, #16]
 8001622:	f7ff ff42 	bl	80014aa <q16_16_add_sat>
 8001626:	4602      	mov	r2, r0
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	605a      	str	r2, [r3, #4]
	s->valid = 1;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2201      	movs	r2, #1
 8001630:	731a      	strb	r2, [r3, #12]
 8001632:	e000      	b.n	8001636 <adc_vcal_update+0x88>
		return;
 8001634:	bf00      	nop
}
 8001636:	3728      	adds	r7, #40	@ 0x28
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}

0800163c <q31_abs>:
static int32_t s_omg_step = 0;            // 1周期あたりのΔθ
static int32_t s_iq_cmd = 0;            // 開ループ中の Iq 指令
static uint32_t s_tick = 0;            // 経過tick

static inline int32_t q31_abs(int32_t x)
{
 800163c:	b480      	push	{r7}
 800163e:	b083      	sub	sp, #12
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
	return (x >= 0) ? x : -(x);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2b00      	cmp	r3, #0
 8001648:	bfb8      	it	lt
 800164a:	425b      	neglt	r3, r3
}
 800164c:	4618      	mov	r0, r3
 800164e:	370c      	adds	r7, #12
 8001650:	46bd      	mov	sp, r7
 8001652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001656:	4770      	bx	lr

08001658 <q31_min>:
static inline int32_t q31_min(int32_t a, int32_t b)
{
 8001658:	b480      	push	{r7}
 800165a:	b083      	sub	sp, #12
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
 8001660:	6039      	str	r1, [r7, #0]
	return (a < b) ? a : b;
 8001662:	683a      	ldr	r2, [r7, #0]
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	4293      	cmp	r3, r2
 8001668:	bfa8      	it	ge
 800166a:	4613      	movge	r3, r2
}
 800166c:	4618      	mov	r0, r3
 800166e:	370c      	adds	r7, #12
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr

08001678 <emf_strength_q31>:
	return (a > b) ? a : b;
}

// 推定BEMFの強さの簡易指標: |e| ≈ max(|eα|,|eβ|)
static inline int32_t emf_strength_q31(const BEMF_PLL_t *o)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b084      	sub	sp, #16
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
	int32_t ea = q31_abs(o->e_alpha_q31);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001684:	4618      	mov	r0, r3
 8001686:	f7ff ffd9 	bl	800163c <q31_abs>
 800168a:	60f8      	str	r0, [r7, #12]
	int32_t eb = q31_abs(o->e_beta_q31);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001690:	4618      	mov	r0, r3
 8001692:	f7ff ffd3 	bl	800163c <q31_abs>
 8001696:	60b8      	str	r0, [r7, #8]
	return (ea > eb) ? ea : eb;
 8001698:	68ba      	ldr	r2, [r7, #8]
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	4293      	cmp	r3, r2
 800169e:	bfb8      	it	lt
 80016a0:	4613      	movlt	r3, r2
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	3710      	adds	r7, #16
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
	...

080016ac <atan_turn_i_q31>:

static inline int32_t atan_turn_i_q31(int i)
{
 80016ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80016b0:	b090      	sub	sp, #64	@ 0x40
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	6178      	str	r0, [r7, #20]
	if (i <= k_atan_anchor[0].i)
 80016b6:	2300      	movs	r3, #0
 80016b8:	461a      	mov	r2, r3
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	4293      	cmp	r3, r2
 80016be:	dc02      	bgt.n	80016c6 <atan_turn_i_q31+0x1a>
		return k_atan_anchor[0].v;
 80016c0:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80016c4:	e06b      	b.n	800179e <atan_turn_i_q31+0xf2>
	if (i >= k_atan_anchor[3].i)
 80016c6:	230c      	movs	r3, #12
 80016c8:	461a      	mov	r2, r3
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	4293      	cmp	r3, r2
 80016ce:	db01      	blt.n	80016d4 <atan_turn_i_q31+0x28>
		return k_atan_anchor[3].v;
 80016d0:	4b35      	ldr	r3, [pc, #212]	@ (80017a8 <atan_turn_i_q31+0xfc>)
 80016d2:	e064      	b.n	800179e <atan_turn_i_q31+0xf2>
	for (int k = 0; k < 3; k++)
 80016d4:	2300      	movs	r3, #0
 80016d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80016d8:	e05d      	b.n	8001796 <atan_turn_i_q31+0xea>
	{
		int i0 = k_atan_anchor[k].i;
 80016da:	4a34      	ldr	r2, [pc, #208]	@ (80017ac <atan_turn_i_q31+0x100>)
 80016dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80016de:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 80016e2:	63bb      	str	r3, [r7, #56]	@ 0x38
		int i1 = k_atan_anchor[k + 1].i;
 80016e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80016e6:	3301      	adds	r3, #1
 80016e8:	4a30      	ldr	r2, [pc, #192]	@ (80017ac <atan_turn_i_q31+0x100>)
 80016ea:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 80016ee:	637b      	str	r3, [r7, #52]	@ 0x34
		if (i >= i0 && i <= i1)
 80016f0:	697a      	ldr	r2, [r7, #20]
 80016f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80016f4:	429a      	cmp	r2, r3
 80016f6:	db4b      	blt.n	8001790 <atan_turn_i_q31+0xe4>
 80016f8:	697a      	ldr	r2, [r7, #20]
 80016fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80016fc:	429a      	cmp	r2, r3
 80016fe:	dc47      	bgt.n	8001790 <atan_turn_i_q31+0xe4>
		{
			int32_t y0 = k_atan_anchor[k].v;
 8001700:	4a2a      	ldr	r2, [pc, #168]	@ (80017ac <atan_turn_i_q31+0x100>)
 8001702:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001704:	00db      	lsls	r3, r3, #3
 8001706:	4413      	add	r3, r2
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	633b      	str	r3, [r7, #48]	@ 0x30
			int32_t y1 = k_atan_anchor[k + 1].v;
 800170c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800170e:	3301      	adds	r3, #1
 8001710:	4a26      	ldr	r2, [pc, #152]	@ (80017ac <atan_turn_i_q31+0x100>)
 8001712:	00db      	lsls	r3, r3, #3
 8001714:	4413      	add	r3, r2
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	62fb      	str	r3, [r7, #44]	@ 0x2c
			int32_t di = (int32_t) (i - i0);
 800171a:	697a      	ldr	r2, [r7, #20]
 800171c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800171e:	1ad3      	subs	r3, r2, r3
 8001720:	62bb      	str	r3, [r7, #40]	@ 0x28
			int32_t wi = (int32_t) (i1 - i0);
 8001722:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001724:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001726:	1ad3      	subs	r3, r2, r3
 8001728:	627b      	str	r3, [r7, #36]	@ 0x24
			int32_t dy = q31_sub_sat(y1, y0);
 800172a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800172c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800172e:	f7ff fd26 	bl	800117e <q31_sub_sat>
 8001732:	6238      	str	r0, [r7, #32]
			int32_t t = (int32_t) ((((int64_t) di << 31) + (wi / 2)) / wi); // di/wi をQ31に
 8001734:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001736:	17da      	asrs	r2, r3, #31
 8001738:	4698      	mov	r8, r3
 800173a:	4691      	mov	r9, r2
 800173c:	ea4f 0568 	mov.w	r5, r8, asr #1
 8001740:	ea4f 74c8 	mov.w	r4, r8, lsl #31
 8001744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001746:	0fda      	lsrs	r2, r3, #31
 8001748:	4413      	add	r3, r2
 800174a:	105b      	asrs	r3, r3, #1
 800174c:	17da      	asrs	r2, r3, #31
 800174e:	469a      	mov	sl, r3
 8001750:	4693      	mov	fp, r2
 8001752:	eb14 030a 	adds.w	r3, r4, sl
 8001756:	60bb      	str	r3, [r7, #8]
 8001758:	eb45 030b 	adc.w	r3, r5, fp
 800175c:	60fb      	str	r3, [r7, #12]
 800175e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001760:	17da      	asrs	r2, r3, #31
 8001762:	603b      	str	r3, [r7, #0]
 8001764:	607a      	str	r2, [r7, #4]
 8001766:	e9d7 2300 	ldrd	r2, r3, [r7]
 800176a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800176e:	f7ff fa1b 	bl	8000ba8 <__aeabi_ldivmod>
 8001772:	4602      	mov	r2, r0
 8001774:	460b      	mov	r3, r1
 8001776:	4613      	mov	r3, r2
 8001778:	61fb      	str	r3, [r7, #28]
			return q31_add_sat(y0, q31_mul(dy, t));
 800177a:	69f9      	ldr	r1, [r7, #28]
 800177c:	6a38      	ldr	r0, [r7, #32]
 800177e:	f7ff fc81 	bl	8001084 <q31_mul>
 8001782:	4603      	mov	r3, r0
 8001784:	4619      	mov	r1, r3
 8001786:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001788:	f7ff fcc4 	bl	8001114 <q31_add_sat>
 800178c:	4603      	mov	r3, r0
 800178e:	e006      	b.n	800179e <atan_turn_i_q31+0xf2>
	for (int k = 0; k < 3; k++)
 8001790:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001792:	3301      	adds	r3, #1
 8001794:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001796:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001798:	2b02      	cmp	r3, #2
 800179a:	dd9e      	ble.n	80016da <atan_turn_i_q31+0x2e>
		}
	}
	return k_atan_anchor[3].v;
 800179c:	4b02      	ldr	r3, [pc, #8]	@ (80017a8 <atan_turn_i_q31+0xfc>)
}
 800179e:	4618      	mov	r0, r3
 80017a0:	3740      	adds	r7, #64	@ 0x40
 80017a2:	46bd      	mov	sp, r7
 80017a4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80017a8:	000145f3 	.word	0x000145f3
 80017ac:	08006b70 	.word	0x08006b70

080017b0 <sincos_q31>:

void sincos_q31(int32_t th, int32_t *s, int32_t *c)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b08c      	sub	sp, #48	@ 0x30
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	60f8      	str	r0, [r7, #12]
 80017b8:	60b9      	str	r1, [r7, #8]
 80017ba:	607a      	str	r2, [r7, #4]
	th = angle_wrap_q31(th);
 80017bc:	68f8      	ldr	r0, [r7, #12]
 80017be:	f7ff fd13 	bl	80011e8 <angle_wrap_q31>
 80017c2:	60f8      	str	r0, [r7, #12]
	if (th > Q31_ONE / 2)
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80017ca:	db03      	blt.n	80017d4 <sincos_q31+0x24>
		th -= (Q31_ONE + 1);
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 80017d2:	60fb      	str	r3, [r7, #12]
	if (th <= -Q31_ONE / 2)
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	4a42      	ldr	r2, [pc, #264]	@ (80018e0 <sincos_q31+0x130>)
 80017d8:	4293      	cmp	r3, r2
 80017da:	da03      	bge.n	80017e4 <sincos_q31+0x34>
		th += (Q31_ONE + 1);
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 80017e2:	60fb      	str	r3, [r7, #12]

	int8_t q = 0;
 80017e4:	2300      	movs	r3, #0
 80017e6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (th > Q31_ONE / 4)
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80017f0:	db08      	blt.n	8001804 <sincos_q31+0x54>
	{
		th -= (Q31_ONE / 2);
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	f103 4340 	add.w	r3, r3, #3221225472	@ 0xc0000000
 80017f8:	3301      	adds	r3, #1
 80017fa:	60fb      	str	r3, [r7, #12]
		q = +1;
 80017fc:	2301      	movs	r3, #1
 80017fe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8001802:	e00b      	b.n	800181c <sincos_q31+0x6c>
	}
	else if (th < -Q31_ONE / 4)
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 800180a:	dc07      	bgt.n	800181c <sincos_q31+0x6c>
	{
		th += (Q31_ONE / 2);
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001812:	3b01      	subs	r3, #1
 8001814:	60fb      	str	r3, [r7, #12]
		q = -1;
 8001816:	23ff      	movs	r3, #255	@ 0xff
 8001818:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	}

	int32_t x = k_cordic_K_q31; // cos
 800181c:	4b31      	ldr	r3, [pc, #196]	@ (80018e4 <sincos_q31+0x134>)
 800181e:	62bb      	str	r3, [r7, #40]	@ 0x28
	int32_t y = 0; // sin
 8001820:	2300      	movs	r3, #0
 8001822:	627b      	str	r3, [r7, #36]	@ 0x24
	int32_t z = th; // turn-Q31
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	623b      	str	r3, [r7, #32]

	for (int i = 0; i < CORDIC_ITERS; i++)
 8001828:	2300      	movs	r3, #0
 800182a:	61fb      	str	r3, [r7, #28]
 800182c:	e032      	b.n	8001894 <sincos_q31+0xe4>
	{
		int32_t angle_i = atan_turn_i_q31(i); // 線形補間で取得
 800182e:	69f8      	ldr	r0, [r7, #28]
 8001830:	f7ff ff3c 	bl	80016ac <atan_turn_i_q31>
 8001834:	61b8      	str	r0, [r7, #24]
		int32_t dx = (y >> i);
 8001836:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001838:	69fb      	ldr	r3, [r7, #28]
 800183a:	fa42 f303 	asr.w	r3, r2, r3
 800183e:	617b      	str	r3, [r7, #20]
		int32_t dy = (x >> i);
 8001840:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001842:	69fb      	ldr	r3, [r7, #28]
 8001844:	fa42 f303 	asr.w	r3, r2, r3
 8001848:	613b      	str	r3, [r7, #16]
		if (z >= 0)
 800184a:	6a3b      	ldr	r3, [r7, #32]
 800184c:	2b00      	cmp	r3, #0
 800184e:	db0f      	blt.n	8001870 <sincos_q31+0xc0>
		{
			x = q31_sub_sat(x, dx);
 8001850:	6979      	ldr	r1, [r7, #20]
 8001852:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001854:	f7ff fc93 	bl	800117e <q31_sub_sat>
 8001858:	62b8      	str	r0, [r7, #40]	@ 0x28
			y = q31_add_sat(y, dy);
 800185a:	6939      	ldr	r1, [r7, #16]
 800185c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800185e:	f7ff fc59 	bl	8001114 <q31_add_sat>
 8001862:	6278      	str	r0, [r7, #36]	@ 0x24
			z = q31_sub_sat(z, angle_i);
 8001864:	69b9      	ldr	r1, [r7, #24]
 8001866:	6a38      	ldr	r0, [r7, #32]
 8001868:	f7ff fc89 	bl	800117e <q31_sub_sat>
 800186c:	6238      	str	r0, [r7, #32]
 800186e:	e00e      	b.n	800188e <sincos_q31+0xde>
		}
		else
		{
			x = q31_add_sat(x, dx);
 8001870:	6979      	ldr	r1, [r7, #20]
 8001872:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001874:	f7ff fc4e 	bl	8001114 <q31_add_sat>
 8001878:	62b8      	str	r0, [r7, #40]	@ 0x28
			y = q31_sub_sat(y, dy);
 800187a:	6939      	ldr	r1, [r7, #16]
 800187c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800187e:	f7ff fc7e 	bl	800117e <q31_sub_sat>
 8001882:	6278      	str	r0, [r7, #36]	@ 0x24
			z = q31_add_sat(z, angle_i);
 8001884:	69b9      	ldr	r1, [r7, #24]
 8001886:	6a38      	ldr	r0, [r7, #32]
 8001888:	f7ff fc44 	bl	8001114 <q31_add_sat>
 800188c:	6238      	str	r0, [r7, #32]
	for (int i = 0; i < CORDIC_ITERS; i++)
 800188e:	69fb      	ldr	r3, [r7, #28]
 8001890:	3301      	adds	r3, #1
 8001892:	61fb      	str	r3, [r7, #28]
 8001894:	69fb      	ldr	r3, [r7, #28]
 8001896:	2b0b      	cmp	r3, #11
 8001898:	ddc9      	ble.n	800182e <sincos_q31+0x7e>
		}
	}

	if (q > 0)
 800189a:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800189e:	2b00      	cmp	r3, #0
 80018a0:	dd07      	ble.n	80018b2 <sincos_q31+0x102>
	{
		*s = x;
 80018a2:	68bb      	ldr	r3, [r7, #8]
 80018a4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80018a6:	601a      	str	r2, [r3, #0]
		*c = -y;
 80018a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018aa:	425a      	negs	r2, r3
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	601a      	str	r2, [r3, #0]
	else
	{
		*s = y;
		*c = x;
	}
}
 80018b0:	e011      	b.n	80018d6 <sincos_q31+0x126>
	else if (q < 0)
 80018b2:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	da07      	bge.n	80018ca <sincos_q31+0x11a>
		*s = -x;
 80018ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018bc:	425a      	negs	r2, r3
 80018be:	68bb      	ldr	r3, [r7, #8]
 80018c0:	601a      	str	r2, [r3, #0]
		*c = y;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80018c6:	601a      	str	r2, [r3, #0]
}
 80018c8:	e005      	b.n	80018d6 <sincos_q31+0x126>
		*s = y;
 80018ca:	68bb      	ldr	r3, [r7, #8]
 80018cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80018ce:	601a      	str	r2, [r3, #0]
		*c = x;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80018d4:	601a      	str	r2, [r3, #0]
}
 80018d6:	bf00      	nop
 80018d8:	3730      	adds	r7, #48	@ 0x30
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	c0000002 	.word	0xc0000002
 80018e4:	4dba76d4 	.word	0x4dba76d4

080018e8 <adc_to_q31>:
int16_t motor_current_buff[3];

extern Encoder_t s_enc;

static inline int32_t adc_to_q31(uint16_t v)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b083      	sub	sp, #12
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	4603      	mov	r3, r0
 80018f0:	80fb      	strh	r3, [r7, #6]
	return (int32_t) ((int64_t) v * (int64_t) (Q31_ONE >> 11));
 80018f2:	88fa      	ldrh	r2, [r7, #6]
 80018f4:	4613      	mov	r3, r2
 80018f6:	051b      	lsls	r3, r3, #20
 80018f8:	1a9b      	subs	r3, r3, r2
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	370c      	adds	r7, #12
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr
	...

08001908 <clarke_q31>:

static inline void clarke_q31(int32_t ia, int32_t ib, int32_t ic,
		int32_t *ialpha, int32_t *ibeta)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b086      	sub	sp, #24
 800190c:	af00      	add	r7, sp, #0
 800190e:	60f8      	str	r0, [r7, #12]
 8001910:	60b9      	str	r1, [r7, #8]
 8001912:	607a      	str	r2, [r7, #4]
 8001914:	603b      	str	r3, [r7, #0]
	*ialpha = ia;
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	68fa      	ldr	r2, [r7, #12]
 800191a:	601a      	str	r2, [r3, #0]
	int32_t two_ib = q31_add_sat(ib, ib);
 800191c:	68b9      	ldr	r1, [r7, #8]
 800191e:	68b8      	ldr	r0, [r7, #8]
 8001920:	f7ff fbf8 	bl	8001114 <q31_add_sat>
 8001924:	6178      	str	r0, [r7, #20]
	int32_t sum = q31_add_sat(ia, two_ib);
 8001926:	6979      	ldr	r1, [r7, #20]
 8001928:	68f8      	ldr	r0, [r7, #12]
 800192a:	f7ff fbf3 	bl	8001114 <q31_add_sat>
 800192e:	6138      	str	r0, [r7, #16]
	*ibeta = q31_mul(sum, Q31_INV_SQRT3);
 8001930:	4905      	ldr	r1, [pc, #20]	@ (8001948 <clarke_q31+0x40>)
 8001932:	6938      	ldr	r0, [r7, #16]
 8001934:	f7ff fba6 	bl	8001084 <q31_mul>
 8001938:	4602      	mov	r2, r0
 800193a:	6a3b      	ldr	r3, [r7, #32]
 800193c:	601a      	str	r2, [r3, #0]
}
 800193e:	bf00      	nop
 8001940:	3718      	adds	r7, #24
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	49e69d16 	.word	0x49e69d16

0800194c <throttle_shape_q31>:

static inline int32_t throttle_shape_q31(int32_t thr_raw_q31)
{
 800194c:	b590      	push	{r4, r7, lr}
 800194e:	b085      	sub	sp, #20
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
	// デッドバンド
	if (thr_raw_q31 < THR_DEADBAND_Q31)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	4a2b      	ldr	r2, [pc, #172]	@ (8001a04 <throttle_shape_q31+0xb8>)
 8001958:	4293      	cmp	r3, r2
 800195a:	dc01      	bgt.n	8001960 <throttle_shape_q31+0x14>
		thr_raw_q31 = 0;
 800195c:	2300      	movs	r3, #0
 800195e:	607b      	str	r3, [r7, #4]

	// LPF: y = αx + (1-α)y
	int32_t one_minus_a = q31_sub_sat(Q31_ONE, THR_LPF_ALPHA_Q31);
 8001960:	f04f 5180 	mov.w	r1, #268435456	@ 0x10000000
 8001964:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 8001968:	f7ff fc09 	bl	800117e <q31_sub_sat>
 800196c:	60f8      	str	r0, [r7, #12]
	s_thr_filt_q31 = q31_add_sat(q31_mul(THR_LPF_ALPHA_Q31, thr_raw_q31),
 800196e:	6879      	ldr	r1, [r7, #4]
 8001970:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8001974:	f7ff fb86 	bl	8001084 <q31_mul>
 8001978:	4604      	mov	r4, r0
 800197a:	4b23      	ldr	r3, [pc, #140]	@ (8001a08 <throttle_shape_q31+0xbc>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4619      	mov	r1, r3
 8001980:	68f8      	ldr	r0, [r7, #12]
 8001982:	f7ff fb7f 	bl	8001084 <q31_mul>
 8001986:	4603      	mov	r3, r0
 8001988:	4619      	mov	r1, r3
 800198a:	4620      	mov	r0, r4
 800198c:	f7ff fbc2 	bl	8001114 <q31_add_sat>
 8001990:	4603      	mov	r3, r0
 8001992:	4a1d      	ldr	r2, [pc, #116]	@ (8001a08 <throttle_shape_q31+0xbc>)
 8001994:	6013      	str	r3, [r2, #0]
			q31_mul(one_minus_a, s_thr_filt_q31));

	// スルーレート（入力の瞬間変化を更に縛りたい場合は、前回値を覚えて制限）
	static int32_t prev = 0;
	int32_t diff = q31_sub_sat(s_thr_filt_q31, prev);
 8001996:	4b1c      	ldr	r3, [pc, #112]	@ (8001a08 <throttle_shape_q31+0xbc>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4a1c      	ldr	r2, [pc, #112]	@ (8001a0c <throttle_shape_q31+0xc0>)
 800199c:	6812      	ldr	r2, [r2, #0]
 800199e:	4611      	mov	r1, r2
 80019a0:	4618      	mov	r0, r3
 80019a2:	f7ff fbec 	bl	800117e <q31_sub_sat>
 80019a6:	60b8      	str	r0, [r7, #8]
	if (diff > THR_SLEW_PER_TICK_Q31)
 80019a8:	68bb      	ldr	r3, [r7, #8]
 80019aa:	4a19      	ldr	r2, [pc, #100]	@ (8001a10 <throttle_shape_q31+0xc4>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	dd09      	ble.n	80019c4 <throttle_shape_q31+0x78>
		s_thr_filt_q31 = q31_add_sat(prev, THR_SLEW_PER_TICK_Q31);
 80019b0:	4b16      	ldr	r3, [pc, #88]	@ (8001a0c <throttle_shape_q31+0xc0>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4916      	ldr	r1, [pc, #88]	@ (8001a10 <throttle_shape_q31+0xc4>)
 80019b6:	4618      	mov	r0, r3
 80019b8:	f7ff fbac 	bl	8001114 <q31_add_sat>
 80019bc:	4603      	mov	r3, r0
 80019be:	4a12      	ldr	r2, [pc, #72]	@ (8001a08 <throttle_shape_q31+0xbc>)
 80019c0:	6013      	str	r3, [r2, #0]
 80019c2:	e00c      	b.n	80019de <throttle_shape_q31+0x92>
	else if (diff < -THR_SLEW_PER_TICK_Q31)
 80019c4:	68bb      	ldr	r3, [r7, #8]
 80019c6:	4a13      	ldr	r2, [pc, #76]	@ (8001a14 <throttle_shape_q31+0xc8>)
 80019c8:	4293      	cmp	r3, r2
 80019ca:	da08      	bge.n	80019de <throttle_shape_q31+0x92>
		s_thr_filt_q31 = q31_sub_sat(prev, THR_SLEW_PER_TICK_Q31);
 80019cc:	4b0f      	ldr	r3, [pc, #60]	@ (8001a0c <throttle_shape_q31+0xc0>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	490f      	ldr	r1, [pc, #60]	@ (8001a10 <throttle_shape_q31+0xc4>)
 80019d2:	4618      	mov	r0, r3
 80019d4:	f7ff fbd3 	bl	800117e <q31_sub_sat>
 80019d8:	4603      	mov	r3, r0
 80019da:	4a0b      	ldr	r2, [pc, #44]	@ (8001a08 <throttle_shape_q31+0xbc>)
 80019dc:	6013      	str	r3, [r2, #0]
	prev = s_thr_filt_q31;
 80019de:	4b0a      	ldr	r3, [pc, #40]	@ (8001a08 <throttle_shape_q31+0xbc>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a0a      	ldr	r2, [pc, #40]	@ (8001a0c <throttle_shape_q31+0xc0>)
 80019e4:	6013      	str	r3, [r2, #0]

	// 上限
	if (s_thr_filt_q31 > THR_ADC_MAX_Q31)
 80019e6:	4b08      	ldr	r3, [pc, #32]	@ (8001a08 <throttle_shape_q31+0xbc>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80019ee:	d003      	beq.n	80019f8 <throttle_shape_q31+0xac>
		s_thr_filt_q31 = THR_ADC_MAX_Q31;
 80019f0:	4b05      	ldr	r3, [pc, #20]	@ (8001a08 <throttle_shape_q31+0xbc>)
 80019f2:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80019f6:	601a      	str	r2, [r3, #0]
	return s_thr_filt_q31;
 80019f8:	4b03      	ldr	r3, [pc, #12]	@ (8001a08 <throttle_shape_q31+0xbc>)
 80019fa:	681b      	ldr	r3, [r3, #0]
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	3714      	adds	r7, #20
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd90      	pop	{r4, r7, pc}
 8001a04:	028f5c28 	.word	0x028f5c28
 8001a08:	20000288 	.word	0x20000288
 8001a0c:	200002c0 	.word	0x200002c0
 8001a10:	00a3d70a 	.word	0x00a3d70a
 8001a14:	ff5c28f6 	.word	0xff5c28f6

08001a18 <speed_pi_to_iq_q31>:

// 速度PI（PLLのωを使って Iq_ref を作る）
static inline int32_t speed_pi_to_iq_q31(int32_t omega_ref_step_q31,
		int32_t omega_meas_step_q31)
{
 8001a18:	b590      	push	{r4, r7, lr}
 8001a1a:	b085      	sub	sp, #20
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
 8001a20:	6039      	str	r1, [r7, #0]
	int32_t e = q31_sub_sat(omega_ref_step_q31, omega_meas_step_q31);
 8001a22:	6839      	ldr	r1, [r7, #0]
 8001a24:	6878      	ldr	r0, [r7, #4]
 8001a26:	f7ff fbaa 	bl	800117e <q31_sub_sat>
 8001a2a:	60b8      	str	r0, [r7, #8]
	s_speed_int_q31 = q31_add_sat(s_speed_int_q31, q31_mul(SPEED_KI_Q31, e));
 8001a2c:	4b1c      	ldr	r3, [pc, #112]	@ (8001aa0 <speed_pi_to_iq_q31+0x88>)
 8001a2e:	681c      	ldr	r4, [r3, #0]
 8001a30:	68b9      	ldr	r1, [r7, #8]
 8001a32:	481c      	ldr	r0, [pc, #112]	@ (8001aa4 <speed_pi_to_iq_q31+0x8c>)
 8001a34:	f7ff fb26 	bl	8001084 <q31_mul>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	4620      	mov	r0, r4
 8001a3e:	f7ff fb69 	bl	8001114 <q31_add_sat>
 8001a42:	4603      	mov	r3, r0
 8001a44:	4a16      	ldr	r2, [pc, #88]	@ (8001aa0 <speed_pi_to_iq_q31+0x88>)
 8001a46:	6013      	str	r3, [r2, #0]

	// 積分アンチワインドアップ：Iqの範囲に収める
	if (s_speed_int_q31 > IQ_MAX_Q31)
 8001a48:	4b15      	ldr	r3, [pc, #84]	@ (8001aa0 <speed_pi_to_iq_q31+0x88>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a16      	ldr	r2, [pc, #88]	@ (8001aa8 <speed_pi_to_iq_q31+0x90>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	dd02      	ble.n	8001a58 <speed_pi_to_iq_q31+0x40>
		s_speed_int_q31 = IQ_MAX_Q31;
 8001a52:	4b13      	ldr	r3, [pc, #76]	@ (8001aa0 <speed_pi_to_iq_q31+0x88>)
 8001a54:	4a14      	ldr	r2, [pc, #80]	@ (8001aa8 <speed_pi_to_iq_q31+0x90>)
 8001a56:	601a      	str	r2, [r3, #0]
	if (s_speed_int_q31 < 0)
 8001a58:	4b11      	ldr	r3, [pc, #68]	@ (8001aa0 <speed_pi_to_iq_q31+0x88>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	da02      	bge.n	8001a66 <speed_pi_to_iq_q31+0x4e>
		s_speed_int_q31 = 0; // 順回転限定なら0～に
 8001a60:	4b0f      	ldr	r3, [pc, #60]	@ (8001aa0 <speed_pi_to_iq_q31+0x88>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	601a      	str	r2, [r3, #0]

	int32_t out = q31_add_sat(q31_mul(SPEED_KP_Q31, e), s_speed_int_q31);
 8001a66:	68b9      	ldr	r1, [r7, #8]
 8001a68:	4810      	ldr	r0, [pc, #64]	@ (8001aac <speed_pi_to_iq_q31+0x94>)
 8001a6a:	f7ff fb0b 	bl	8001084 <q31_mul>
 8001a6e:	4602      	mov	r2, r0
 8001a70:	4b0b      	ldr	r3, [pc, #44]	@ (8001aa0 <speed_pi_to_iq_q31+0x88>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4619      	mov	r1, r3
 8001a76:	4610      	mov	r0, r2
 8001a78:	f7ff fb4c 	bl	8001114 <q31_add_sat>
 8001a7c:	60f8      	str	r0, [r7, #12]

	// 出力リミット
	if (out > IQ_MAX_Q31)
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	4a09      	ldr	r2, [pc, #36]	@ (8001aa8 <speed_pi_to_iq_q31+0x90>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	dd01      	ble.n	8001a8a <speed_pi_to_iq_q31+0x72>
		out = IQ_MAX_Q31;
 8001a86:	4b08      	ldr	r3, [pc, #32]	@ (8001aa8 <speed_pi_to_iq_q31+0x90>)
 8001a88:	60fb      	str	r3, [r7, #12]
	if (out < 0)
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	da01      	bge.n	8001a94 <speed_pi_to_iq_q31+0x7c>
		out = 0;
 8001a90:	2300      	movs	r3, #0
 8001a92:	60fb      	str	r3, [r7, #12]
	return out; // Iq_ref
 8001a94:	68fb      	ldr	r3, [r7, #12]
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	3714      	adds	r7, #20
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd90      	pop	{r4, r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	20000290 	.word	0x20000290
 8001aa4:	00083127 	.word	0x00083127
 8001aa8:	1999999a 	.word	0x1999999a
 8001aac:	028f5c29 	.word	0x028f5c29

08001ab0 <APP_Init>:

void APP_Init(void)
{
 8001ab0:	b598      	push	{r3, r4, r7, lr}
 8001ab2:	af00      	add	r7, sp, #0
	FOC_Init(&s_foc);
 8001ab4:	4822      	ldr	r0, [pc, #136]	@ (8001b40 <APP_Init+0x90>)
 8001ab6:	f001 ff25 	bl	8003904 <FOC_Init>
	BEMF_PLL_Init(&s_pll);
 8001aba:	4822      	ldr	r0, [pc, #136]	@ (8001b44 <APP_Init+0x94>)
 8001abc:	f000 fd7c 	bl	80025b8 <BEMF_PLL_Init>

	/* ブロックコメント：
	 * ADC 較正の初期化。
	 * v_ref_in = 1.235V, alpha = 0.1（1kHz更新なら時定数約9ms）
	 */
	adc_vcal_init(&g_vcal, q16_16_from_frac(1235, 1000),
 8001ac0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001ac4:	f240 40d3 	movw	r0, #1235	@ 0x4d3
 8001ac8:	f7ff fbad 	bl	8001226 <q16_16_from_frac>
 8001acc:	4604      	mov	r4, r0
 8001ace:	210a      	movs	r1, #10
 8001ad0:	2001      	movs	r0, #1
 8001ad2:	f7ff fba8 	bl	8001226 <q16_16_from_frac>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	461a      	mov	r2, r3
 8001ada:	4621      	mov	r1, r4
 8001adc:	481a      	ldr	r0, [pc, #104]	@ (8001b48 <APP_Init+0x98>)
 8001ade:	f7ff fd42 	bl	8001566 <adc_vcal_init>
			q16_16_from_frac(1, 10));

	s_pll.Ts_q31 = (int32_t) (((int64_t) 1 << 31) / (int64_t) PWM_FREQ_HZ);
 8001ae2:	4b18      	ldr	r3, [pc, #96]	@ (8001b44 <APP_Init+0x94>)
 8001ae4:	4a19      	ldr	r2, [pc, #100]	@ (8001b4c <APP_Init+0x9c>)
 8001ae6:	61da      	str	r2, [r3, #28]
	s_pll.Rs_q31 = CONF_RS_Q31;
 8001ae8:	4b16      	ldr	r3, [pc, #88]	@ (8001b44 <APP_Init+0x94>)
 8001aea:	4a19      	ldr	r2, [pc, #100]	@ (8001b50 <APP_Init+0xa0>)
 8001aec:	615a      	str	r2, [r3, #20]
	s_pll.Ls_q31 = CONF_LS_Q31;
 8001aee:	4b15      	ldr	r3, [pc, #84]	@ (8001b44 <APP_Init+0x94>)
 8001af0:	4a18      	ldr	r2, [pc, #96]	@ (8001b54 <APP_Init+0xa4>)
 8001af2:	619a      	str	r2, [r3, #24]
	s_pll.alpha_q31 = CONF_OBS_ALPHA_Q31;
 8001af4:	4b13      	ldr	r3, [pc, #76]	@ (8001b44 <APP_Init+0x94>)
 8001af6:	4a18      	ldr	r2, [pc, #96]	@ (8001b58 <APP_Init+0xa8>)
 8001af8:	625a      	str	r2, [r3, #36]	@ 0x24
	s_pll.kp_q31 = CONF_PLL_KP_Q31;
 8001afa:	4b12      	ldr	r3, [pc, #72]	@ (8001b44 <APP_Init+0x94>)
 8001afc:	4a17      	ldr	r2, [pc, #92]	@ (8001b5c <APP_Init+0xac>)
 8001afe:	609a      	str	r2, [r3, #8]
	s_pll.ki_q31 = CONF_PLL_KI_Q31;
 8001b00:	4b10      	ldr	r3, [pc, #64]	@ (8001b44 <APP_Init+0x94>)
 8001b02:	4a17      	ldr	r2, [pc, #92]	@ (8001b60 <APP_Init+0xb0>)
 8001b04:	60da      	str	r2, [r3, #12]
	s_pll.omega_min_q31 = CONF_OMEGA_STEP_MIN_Q31;
 8001b06:	4b0f      	ldr	r3, [pc, #60]	@ (8001b44 <APP_Init+0x94>)
 8001b08:	4a16      	ldr	r2, [pc, #88]	@ (8001b64 <APP_Init+0xb4>)
 8001b0a:	641a      	str	r2, [r3, #64]	@ 0x40
	s_pll.omega_max_q31 = CONF_OMEGA_STEP_MAX_Q31;
 8001b0c:	4b0d      	ldr	r3, [pc, #52]	@ (8001b44 <APP_Init+0x94>)
 8001b0e:	4a16      	ldr	r2, [pc, #88]	@ (8001b68 <APP_Init+0xb8>)
 8001b10:	645a      	str	r2, [r3, #68]	@ 0x44
	s_pll.integ_min_q31 = CONF_PLL_INT_MIN_Q31;
 8001b12:	4b0c      	ldr	r3, [pc, #48]	@ (8001b44 <APP_Init+0x94>)
 8001b14:	4a15      	ldr	r2, [pc, #84]	@ (8001b6c <APP_Init+0xbc>)
 8001b16:	649a      	str	r2, [r3, #72]	@ 0x48
	s_pll.integ_max_q31 = CONF_PLL_INT_MAX_Q31;
 8001b18:	4b0a      	ldr	r3, [pc, #40]	@ (8001b44 <APP_Init+0x94>)
 8001b1a:	4a0f      	ldr	r2, [pc, #60]	@ (8001b58 <APP_Init+0xa8>)
 8001b1c:	64da      	str	r2, [r3, #76]	@ 0x4c

	s_st = ST_ALIGN;
 8001b1e:	4b14      	ldr	r3, [pc, #80]	@ (8001b70 <APP_Init+0xc0>)
 8001b20:	2201      	movs	r2, #1
 8001b22:	701a      	strb	r2, [r3, #0]
	s_tick = 0;
 8001b24:	4b13      	ldr	r3, [pc, #76]	@ (8001b74 <APP_Init+0xc4>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	601a      	str	r2, [r3, #0]
	s_th_forced = 0;
 8001b2a:	4b13      	ldr	r3, [pc, #76]	@ (8001b78 <APP_Init+0xc8>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	601a      	str	r2, [r3, #0]
	s_omg_step = ST_OMEGA_STEP_INIT_Q31;
 8001b30:	4b12      	ldr	r3, [pc, #72]	@ (8001b7c <APP_Init+0xcc>)
 8001b32:	4a13      	ldr	r2, [pc, #76]	@ (8001b80 <APP_Init+0xd0>)
 8001b34:	601a      	str	r2, [r3, #0]
	s_iq_cmd = 0;
 8001b36:	4b13      	ldr	r3, [pc, #76]	@ (8001b84 <APP_Init+0xd4>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	601a      	str	r2, [r3, #0]
}
 8001b3c:	bf00      	nop
 8001b3e:	bd98      	pop	{r3, r4, r7, pc}
 8001b40:	2000020c 	.word	0x2000020c
 8001b44:	20000238 	.word	0x20000238
 8001b48:	200001e8 	.word	0x200001e8
 8001b4c:	00018f75 	.word	0x00018f75
 8001b50:	13333333 	.word	0x13333333
 8001b54:	00068db9 	.word	0x00068db9
 8001b58:	1999999a 	.word	0x1999999a
 8001b5c:	0147ae14 	.word	0x0147ae14
 8001b60:	0010624e 	.word	0x0010624e
 8001b64:	fe0ded29 	.word	0xfe0ded29
 8001b68:	01f212d7 	.word	0x01f212d7
 8001b6c:	e6666667 	.word	0xe6666667
 8001b70:	200001f8 	.word	0x200001f8
 8001b74:	20000208 	.word	0x20000208
 8001b78:	200001fc 	.word	0x200001fc
 8001b7c:	20000200 	.word	0x20000200
 8001b80:	0001a36e 	.word	0x0001a36e
 8001b84:	20000204 	.word	0x20000204

08001b88 <APP_OnCurrents>:

void APP_OnCurrents(uint16_t iU, uint16_t iV, uint16_t iW)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b083      	sub	sp, #12
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	4603      	mov	r3, r0
 8001b90:	80fb      	strh	r3, [r7, #6]
 8001b92:	460b      	mov	r3, r1
 8001b94:	80bb      	strh	r3, [r7, #4]
 8001b96:	4613      	mov	r3, r2
 8001b98:	807b      	strh	r3, [r7, #2]
	s_iPacked = (uint32_t) (iV << 16) | (uint32_t) (iU);
 8001b9a:	88bb      	ldrh	r3, [r7, #4]
 8001b9c:	041a      	lsls	r2, r3, #16
 8001b9e:	88fb      	ldrh	r3, [r7, #6]
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	4a08      	ldr	r2, [pc, #32]	@ (8001bc4 <APP_OnCurrents+0x3c>)
 8001ba4:	6013      	str	r3, [r2, #0]

	s_current[0] = iU;
 8001ba6:	4a08      	ldr	r2, [pc, #32]	@ (8001bc8 <APP_OnCurrents+0x40>)
 8001ba8:	88fb      	ldrh	r3, [r7, #6]
 8001baa:	8013      	strh	r3, [r2, #0]
	s_current[1] = iV;
 8001bac:	4a06      	ldr	r2, [pc, #24]	@ (8001bc8 <APP_OnCurrents+0x40>)
 8001bae:	88bb      	ldrh	r3, [r7, #4]
 8001bb0:	8053      	strh	r3, [r2, #2]
	s_current[2] = iW;
 8001bb2:	4a05      	ldr	r2, [pc, #20]	@ (8001bc8 <APP_OnCurrents+0x40>)
 8001bb4:	887b      	ldrh	r3, [r7, #2]
 8001bb6:	8093      	strh	r3, [r2, #4]
}
 8001bb8:	bf00      	nop
 8001bba:	370c      	adds	r7, #12
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr
 8001bc4:	200002a8 	.word	0x200002a8
 8001bc8:	200002a0 	.word	0x200002a0

08001bcc <APP_OnVphase>:

void APP_OnVphase(uint16_t *v_adc)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b083      	sub	sp, #12
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
	s_vphase_adc[0] = *v_adc;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	881a      	ldrh	r2, [r3, #0]
 8001bd8:	4b09      	ldr	r3, [pc, #36]	@ (8001c00 <APP_OnVphase+0x34>)
 8001bda:	801a      	strh	r2, [r3, #0]
	s_vphase_adc[1] = *(v_adc + 1);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	885a      	ldrh	r2, [r3, #2]
 8001be0:	4b07      	ldr	r3, [pc, #28]	@ (8001c00 <APP_OnVphase+0x34>)
 8001be2:	805a      	strh	r2, [r3, #2]
	s_vphase_adc[2] = *(v_adc + 2);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	889a      	ldrh	r2, [r3, #4]
 8001be8:	4b05      	ldr	r3, [pc, #20]	@ (8001c00 <APP_OnVphase+0x34>)
 8001bea:	809a      	strh	r2, [r3, #4]
	s_vphase_adc[3] = *(v_adc + 3);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	88da      	ldrh	r2, [r3, #6]
 8001bf0:	4b03      	ldr	r3, [pc, #12]	@ (8001c00 <APP_OnVphase+0x34>)
 8001bf2:	80da      	strh	r2, [r3, #6]
}
 8001bf4:	bf00      	nop
 8001bf6:	370c      	adds	r7, #12
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfe:	4770      	bx	lr
 8001c00:	20000298 	.word	0x20000298

08001c04 <APP_OnVoltage>:

void APP_OnVoltage(uint16_t *v_adc)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
	/* ブロックコメント：
	 * ここでは v_adc[0] を PA0(1.235V) と仮定して較正更新を行う。
	 * プロジェクトでの実CH割付に合わせてインデックスを調整すること。
	 */
	s_voltage[0] = *v_adc;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	881a      	ldrh	r2, [r3, #0]
 8001c10:	4b0c      	ldr	r3, [pc, #48]	@ (8001c44 <APP_OnVoltage+0x40>)
 8001c12:	801a      	strh	r2, [r3, #0]
	adc_vcal_update(&g_vcal, (int32_t) s_voltage[0]);
 8001c14:	4b0b      	ldr	r3, [pc, #44]	@ (8001c44 <APP_OnVoltage+0x40>)
 8001c16:	881b      	ldrh	r3, [r3, #0]
 8001c18:	b29b      	uxth	r3, r3
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	480a      	ldr	r0, [pc, #40]	@ (8001c48 <APP_OnVoltage+0x44>)
 8001c1e:	f7ff fcc6 	bl	80015ae <adc_vcal_update>

	s_voltage[1] = *(v_adc + 1);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	885a      	ldrh	r2, [r3, #2]
 8001c26:	4b07      	ldr	r3, [pc, #28]	@ (8001c44 <APP_OnVoltage+0x40>)
 8001c28:	805a      	strh	r2, [r3, #2]
	s_voltage[2] = *(v_adc + 2);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	889a      	ldrh	r2, [r3, #4]
 8001c2e:	4b05      	ldr	r3, [pc, #20]	@ (8001c44 <APP_OnVoltage+0x40>)
 8001c30:	809a      	strh	r2, [r3, #4]
	s_voltage[3] = *(v_adc + 3);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	88da      	ldrh	r2, [r3, #6]
 8001c36:	4b03      	ldr	r3, [pc, #12]	@ (8001c44 <APP_OnVoltage+0x40>)
 8001c38:	80da      	strh	r2, [r3, #6]
}
 8001c3a:	bf00      	nop
 8001c3c:	3708      	adds	r7, #8
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	20000294 	.word	0x20000294
 8001c48:	200001e8 	.word	0x200001e8

08001c4c <APP_Step>:

void APP_Step(void)
{
 8001c4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c50:	b098      	sub	sp, #96	@ 0x60
 8001c52:	af02      	add	r7, sp, #8
	uint8_t ocp_flag = 0;
 8001c54:	2300      	movs	r3, #0
 8001c56:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	APP_VoltageConv();
 8001c5a:	f000 f9d9 	bl	8002010 <APP_VoltageConv>
	APP_CurrentConv();
 8001c5e:	f000 fad7 	bl	8002210 <APP_CurrentConv>

	for (size_t i = 0; i < 3; i++)
 8001c62:	2300      	movs	r3, #0
 8001c64:	653b      	str	r3, [r7, #80]	@ 0x50
 8001c66:	e00d      	b.n	8001c84 <APP_Step+0x38>
	{
		if (motor_current_buff[i] > I_MAX)
 8001c68:	4a97      	ldr	r2, [pc, #604]	@ (8001ec8 <APP_Step+0x27c>)
 8001c6a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001c6c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001c70:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 8001c74:	4293      	cmp	r3, r2
 8001c76:	dd02      	ble.n	8001c7e <APP_Step+0x32>
		{
			ocp_flag = 1;
 8001c78:	2301      	movs	r3, #1
 8001c7a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	for (size_t i = 0; i < 3; i++)
 8001c7e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001c80:	3301      	adds	r3, #1
 8001c82:	653b      	str	r3, [r7, #80]	@ 0x50
 8001c84:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001c86:	2b02      	cmp	r3, #2
 8001c88:	d9ee      	bls.n	8001c68 <APP_Step+0x1c>
		}
	}

	if (ocp_flag != 0)
 8001c8a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d007      	beq.n	8001ca2 <APP_Step+0x56>
	{
		FW_SetPWMDuties(0, 0, 0);
 8001c92:	2200      	movs	r2, #0
 8001c94:	2100      	movs	r1, #0
 8001c96:	2000      	movs	r0, #0
 8001c98:	f001 f8fa 	bl	8002e90 <FW_SetPWMDuties>
		APP_Init();
 8001c9c:	f7ff ff08 	bl	8001ab0 <APP_Init>
			break;
		}

		FW_SetPWMDuties(c1, c2, c3);
	}
}
 8001ca0:	e1a7      	b.n	8001ff2 <APP_Step+0x3a6>
		ENC_Update(&s_enc);
 8001ca2:	488a      	ldr	r0, [pc, #552]	@ (8001ecc <APP_Step+0x280>)
 8001ca4:	f000 fe54 	bl	8002950 <ENC_Update>
		uint16_t adc1 = (uint16_t) (s_iPacked & 0xFFFF);
 8001ca8:	4b89      	ldr	r3, [pc, #548]	@ (8001ed0 <APP_Step+0x284>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
		uint16_t adc2 = (uint16_t) ((s_iPacked >> 16) & 0xFFFF);
 8001cb0:	4b87      	ldr	r3, [pc, #540]	@ (8001ed0 <APP_Step+0x284>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	0c1b      	lsrs	r3, r3, #16
 8001cb6:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
		int32_t ia = adc_to_q31(adc1);
 8001cba:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f7ff fe12 	bl	80018e8 <adc_to_q31>
 8001cc4:	64b8      	str	r0, [r7, #72]	@ 0x48
		int32_t ib = adc_to_q31(adc2);
 8001cc6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f7ff fe0c 	bl	80018e8 <adc_to_q31>
 8001cd0:	6478      	str	r0, [r7, #68]	@ 0x44
		int32_t ic = q31_sub_sat(0, q31_add_sat(ia, ib));
 8001cd2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8001cd4:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8001cd6:	f7ff fa1d 	bl	8001114 <q31_add_sat>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	4619      	mov	r1, r3
 8001cde:	2000      	movs	r0, #0
 8001ce0:	f7ff fa4d 	bl	800117e <q31_sub_sat>
 8001ce4:	6438      	str	r0, [r7, #64]	@ 0x40
		clarke_q31(ia, ib, ic, &ialpha, &ibeta);
 8001ce6:	f107 0214 	add.w	r2, r7, #20
 8001cea:	f107 0310 	add.w	r3, r7, #16
 8001cee:	9300      	str	r3, [sp, #0]
 8001cf0:	4613      	mov	r3, r2
 8001cf2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001cf4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8001cf6:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8001cf8:	f7ff fe06 	bl	8001908 <clarke_q31>
		int32_t v_alpha = s_foc.v_alpha_q31;
 8001cfc:	4b75      	ldr	r3, [pc, #468]	@ (8001ed4 <APP_Step+0x288>)
 8001cfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d00:	63fb      	str	r3, [r7, #60]	@ 0x3c
		int32_t v_beta = s_foc.v_beta_q31;
 8001d02:	4b74      	ldr	r3, [pc, #464]	@ (8001ed4 <APP_Step+0x288>)
 8001d04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d06:	63bb      	str	r3, [r7, #56]	@ 0x38
		BEMF_PLL_Step(&s_pll, v_alpha, v_beta, ialpha, ibeta);
 8001d08:	697a      	ldr	r2, [r7, #20]
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	9300      	str	r3, [sp, #0]
 8001d0e:	4613      	mov	r3, r2
 8001d10:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001d12:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8001d14:	4870      	ldr	r0, [pc, #448]	@ (8001ed8 <APP_Step+0x28c>)
 8001d16:	f000 fc74 	bl	8002602 <BEMF_PLL_Step>
		FOC_CurrentLoopStep(&s_foc, ia, ib, ic, s_pll.theta_q31);
 8001d1a:	4b6f      	ldr	r3, [pc, #444]	@ (8001ed8 <APP_Step+0x28c>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	9300      	str	r3, [sp, #0]
 8001d20:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001d22:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001d24:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8001d26:	486b      	ldr	r0, [pc, #428]	@ (8001ed4 <APP_Step+0x288>)
 8001d28:	f001 fe1c 	bl	8003964 <FOC_CurrentLoopStep>
		int32_t thr01 = throttle_shape_q31(s_enc.current_q31);
 8001d2c:	4b67      	ldr	r3, [pc, #412]	@ (8001ecc <APP_Step+0x280>)
 8001d2e:	699b      	ldr	r3, [r3, #24]
 8001d30:	4618      	mov	r0, r3
 8001d32:	f7ff fe0b 	bl	800194c <throttle_shape_q31>
 8001d36:	6378      	str	r0, [r7, #52]	@ 0x34
		if (!s_mode_speed)
 8001d38:	4b68      	ldr	r3, [pc, #416]	@ (8001edc <APP_Step+0x290>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d107      	bne.n	8001d50 <APP_Step+0x104>
			s_foc.Iq_ref_q31 = q31_mul(thr01, IQ_MAX_Q31);
 8001d40:	4967      	ldr	r1, [pc, #412]	@ (8001ee0 <APP_Step+0x294>)
 8001d42:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001d44:	f7ff f99e 	bl	8001084 <q31_mul>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	4a62      	ldr	r2, [pc, #392]	@ (8001ed4 <APP_Step+0x288>)
 8001d4c:	6053      	str	r3, [r2, #4]
 8001d4e:	e00e      	b.n	8001d6e <APP_Step+0x122>
			int32_t omega_ref = q31_mul(thr01, CONF_OMEGA_STEP_MAX_Q31);
 8001d50:	4964      	ldr	r1, [pc, #400]	@ (8001ee4 <APP_Step+0x298>)
 8001d52:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001d54:	f7ff f996 	bl	8001084 <q31_mul>
 8001d58:	6338      	str	r0, [r7, #48]	@ 0x30
			int32_t omega_meas = s_pll.omega_q31;
 8001d5a:	4b5f      	ldr	r3, [pc, #380]	@ (8001ed8 <APP_Step+0x28c>)
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
			s_foc.Iq_ref_q31 = speed_pi_to_iq_q31(omega_ref, omega_meas);
 8001d60:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001d62:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001d64:	f7ff fe58 	bl	8001a18 <speed_pi_to_iq_q31>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	4a5a      	ldr	r2, [pc, #360]	@ (8001ed4 <APP_Step+0x288>)
 8001d6c:	6053      	str	r3, [r2, #4]
		FOC_AlphaBetaToSVPWM(&s_foc, &c1, &c2, &c3, (uint16_t) TIM1_ARR);
 8001d6e:	f107 030a 	add.w	r3, r7, #10
 8001d72:	f107 020c 	add.w	r2, r7, #12
 8001d76:	f107 010e 	add.w	r1, r7, #14
 8001d7a:	f640 709f 	movw	r0, #3999	@ 0xf9f
 8001d7e:	9000      	str	r0, [sp, #0]
 8001d80:	4854      	ldr	r0, [pc, #336]	@ (8001ed4 <APP_Step+0x288>)
 8001d82:	f002 f81f 	bl	8003dc4 <FOC_AlphaBetaToSVPWM>
		s_tick++;
 8001d86:	4b58      	ldr	r3, [pc, #352]	@ (8001ee8 <APP_Step+0x29c>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	3301      	adds	r3, #1
 8001d8c:	4a56      	ldr	r2, [pc, #344]	@ (8001ee8 <APP_Step+0x29c>)
 8001d8e:	6013      	str	r3, [r2, #0]
		switch (s_st)
 8001d90:	4b56      	ldr	r3, [pc, #344]	@ (8001eec <APP_Step+0x2a0>)
 8001d92:	781b      	ldrb	r3, [r3, #0]
 8001d94:	3b01      	subs	r3, #1
 8001d96:	2b04      	cmp	r3, #4
 8001d98:	f200 8120 	bhi.w	8001fdc <APP_Step+0x390>
 8001d9c:	a201      	add	r2, pc, #4	@ (adr r2, 8001da4 <APP_Step+0x158>)
 8001d9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001da2:	bf00      	nop
 8001da4:	08001db9 	.word	0x08001db9
 8001da8:	08001df3 	.word	0x08001df3
 8001dac:	08001f19 	.word	0x08001f19
 8001db0:	08001fdd 	.word	0x08001fdd
 8001db4:	08001fcf 	.word	0x08001fcf
			s_foc.Id_ref_q31 = ST_ALIGN_ID_Q31;
 8001db8:	4b46      	ldr	r3, [pc, #280]	@ (8001ed4 <APP_Step+0x288>)
 8001dba:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001dbe:	601a      	str	r2, [r3, #0]
			s_foc.Iq_ref_q31 = 0;
 8001dc0:	4b44      	ldr	r3, [pc, #272]	@ (8001ed4 <APP_Step+0x288>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	605a      	str	r2, [r3, #4]
			s_th_forced = 0;
 8001dc6:	4b4a      	ldr	r3, [pc, #296]	@ (8001ef0 <APP_Step+0x2a4>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	601a      	str	r2, [r3, #0]
			if (s_tick >= ST_ALIGN_TIME_TICKS)
 8001dcc:	4b46      	ldr	r3, [pc, #280]	@ (8001ee8 <APP_Step+0x29c>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8001dd4:	f0c0 8104 	bcc.w	8001fe0 <APP_Step+0x394>
				s_st = ST_RAMP;
 8001dd8:	4b44      	ldr	r3, [pc, #272]	@ (8001eec <APP_Step+0x2a0>)
 8001dda:	2202      	movs	r2, #2
 8001ddc:	701a      	strb	r2, [r3, #0]
				s_tick = 0;
 8001dde:	4b42      	ldr	r3, [pc, #264]	@ (8001ee8 <APP_Step+0x29c>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	601a      	str	r2, [r3, #0]
				s_iq_cmd = 0;
 8001de4:	4b43      	ldr	r3, [pc, #268]	@ (8001ef4 <APP_Step+0x2a8>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	601a      	str	r2, [r3, #0]
				s_omg_step = ST_OMEGA_STEP_INIT_Q31;
 8001dea:	4b43      	ldr	r3, [pc, #268]	@ (8001ef8 <APP_Step+0x2ac>)
 8001dec:	4a43      	ldr	r2, [pc, #268]	@ (8001efc <APP_Step+0x2b0>)
 8001dee:	601a      	str	r2, [r3, #0]
			break;
 8001df0:	e0f6      	b.n	8001fe0 <APP_Step+0x394>
			s_foc.Id_ref_q31 = ST_ALIGN_ID_Q31 >> 2; // 1/4へ
 8001df2:	4b38      	ldr	r3, [pc, #224]	@ (8001ed4 <APP_Step+0x288>)
 8001df4:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 8001df8:	601a      	str	r2, [r3, #0]
			if (s_iq_cmd < ST_RAMP_IQ_Q31)
 8001dfa:	4b3e      	ldr	r3, [pc, #248]	@ (8001ef4 <APP_Step+0x2a8>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a40      	ldr	r2, [pc, #256]	@ (8001f00 <APP_Step+0x2b4>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	da0d      	bge.n	8001e20 <APP_Step+0x1d4>
				s_iq_cmd = q31_min(ST_RAMP_IQ_Q31,
 8001e04:	4b3b      	ldr	r3, [pc, #236]	@ (8001ef4 <APP_Step+0x2a8>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	493e      	ldr	r1, [pc, #248]	@ (8001f04 <APP_Step+0x2b8>)
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f7ff f982 	bl	8001114 <q31_add_sat>
 8001e10:	4603      	mov	r3, r0
 8001e12:	4619      	mov	r1, r3
 8001e14:	483a      	ldr	r0, [pc, #232]	@ (8001f00 <APP_Step+0x2b4>)
 8001e16:	f7ff fc1f 	bl	8001658 <q31_min>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	4a35      	ldr	r2, [pc, #212]	@ (8001ef4 <APP_Step+0x2a8>)
 8001e1e:	6013      	str	r3, [r2, #0]
			s_foc.Iq_ref_q31 = s_iq_cmd;
 8001e20:	4b34      	ldr	r3, [pc, #208]	@ (8001ef4 <APP_Step+0x2a8>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a2b      	ldr	r2, [pc, #172]	@ (8001ed4 <APP_Step+0x288>)
 8001e26:	6053      	str	r3, [r2, #4]
			if (s_omg_step < ST_OMEGA_STEP_MAX_Q31)
 8001e28:	4b33      	ldr	r3, [pc, #204]	@ (8001ef8 <APP_Step+0x2ac>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a36      	ldr	r2, [pc, #216]	@ (8001f08 <APP_Step+0x2bc>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	dc0e      	bgt.n	8001e50 <APP_Step+0x204>
				s_omg_step = q31_min(ST_OMEGA_STEP_MAX_Q31,
 8001e32:	4b31      	ldr	r3, [pc, #196]	@ (8001ef8 <APP_Step+0x2ac>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f241 41f9 	movw	r1, #5369	@ 0x14f9
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f7ff f96a 	bl	8001114 <q31_add_sat>
 8001e40:	4603      	mov	r3, r0
 8001e42:	4619      	mov	r1, r3
 8001e44:	4831      	ldr	r0, [pc, #196]	@ (8001f0c <APP_Step+0x2c0>)
 8001e46:	f7ff fc07 	bl	8001658 <q31_min>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	4a2a      	ldr	r2, [pc, #168]	@ (8001ef8 <APP_Step+0x2ac>)
 8001e4e:	6013      	str	r3, [r2, #0]
			s_th_forced = angle_wrap_q31(q31_add_sat(s_th_forced, s_omg_step));
 8001e50:	4b27      	ldr	r3, [pc, #156]	@ (8001ef0 <APP_Step+0x2a4>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a28      	ldr	r2, [pc, #160]	@ (8001ef8 <APP_Step+0x2ac>)
 8001e56:	6812      	ldr	r2, [r2, #0]
 8001e58:	4611      	mov	r1, r2
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f7ff f95a 	bl	8001114 <q31_add_sat>
 8001e60:	4603      	mov	r3, r0
 8001e62:	4618      	mov	r0, r3
 8001e64:	f7ff f9c0 	bl	80011e8 <angle_wrap_q31>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	4a21      	ldr	r2, [pc, #132]	@ (8001ef0 <APP_Step+0x2a4>)
 8001e6c:	6013      	str	r3, [r2, #0]
				sincos_q31(s_th_forced, &s, &c);
 8001e6e:	4b20      	ldr	r3, [pc, #128]	@ (8001ef0 <APP_Step+0x2a4>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	463a      	mov	r2, r7
 8001e74:	1d39      	adds	r1, r7, #4
 8001e76:	4618      	mov	r0, r3
 8001e78:	f7ff fc9a 	bl	80017b0 <sincos_q31>
			if (s_tick >= ST_HANDOFF_MIN_TICKS)
 8001e7c:	4b1a      	ldr	r3, [pc, #104]	@ (8001ee8 <APP_Step+0x29c>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 8001e84:	d315      	bcc.n	8001eb2 <APP_Step+0x266>
				if (q31_abs(s_pll.omega_q31) >= ST_HANDOFF_OMEGA_MIN
 8001e86:	4b14      	ldr	r3, [pc, #80]	@ (8001ed8 <APP_Step+0x28c>)
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f7ff fbd6 	bl	800163c <q31_abs>
 8001e90:	4603      	mov	r3, r0
 8001e92:	4a1f      	ldr	r2, [pc, #124]	@ (8001f10 <APP_Step+0x2c4>)
 8001e94:	4293      	cmp	r3, r2
 8001e96:	dc06      	bgt.n	8001ea6 <APP_Step+0x25a>
						|| emf_strength_q31(&s_pll) >= ST_HANDOFF_EMF_MIN)
 8001e98:	480f      	ldr	r0, [pc, #60]	@ (8001ed8 <APP_Step+0x28c>)
 8001e9a:	f7ff fbed 	bl	8001678 <emf_strength_q31>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	4a1c      	ldr	r2, [pc, #112]	@ (8001f14 <APP_Step+0x2c8>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	dd05      	ble.n	8001eb2 <APP_Step+0x266>
					s_st = ST_BLEND;
 8001ea6:	4b11      	ldr	r3, [pc, #68]	@ (8001eec <APP_Step+0x2a0>)
 8001ea8:	2203      	movs	r2, #3
 8001eaa:	701a      	strb	r2, [r3, #0]
					s_tick = 0;
 8001eac:	4b0e      	ldr	r3, [pc, #56]	@ (8001ee8 <APP_Step+0x29c>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	601a      	str	r2, [r3, #0]
			if (s_tick >= ST_TIMEOUT_TICKS)
 8001eb2:	4b0d      	ldr	r3, [pc, #52]	@ (8001ee8 <APP_Step+0x29c>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 8001eba:	f0c0 8093 	bcc.w	8001fe4 <APP_Step+0x398>
				s_st = ST_FAIL;
 8001ebe:	4b0b      	ldr	r3, [pc, #44]	@ (8001eec <APP_Step+0x2a0>)
 8001ec0:	2205      	movs	r2, #5
 8001ec2:	701a      	strb	r2, [r3, #0]
			break;
 8001ec4:	e08e      	b.n	8001fe4 <APP_Step+0x398>
 8001ec6:	bf00      	nop
 8001ec8:	200002b8 	.word	0x200002b8
 8001ecc:	200002d4 	.word	0x200002d4
 8001ed0:	200002a8 	.word	0x200002a8
 8001ed4:	2000020c 	.word	0x2000020c
 8001ed8:	20000238 	.word	0x20000238
 8001edc:	2000028c 	.word	0x2000028c
 8001ee0:	1999999a 	.word	0x1999999a
 8001ee4:	01f212d7 	.word	0x01f212d7
 8001ee8:	20000208 	.word	0x20000208
 8001eec:	200001f8 	.word	0x200001f8
 8001ef0:	200001fc 	.word	0x200001fc
 8001ef4:	20000204 	.word	0x20000204
 8001ef8:	20000200 	.word	0x20000200
 8001efc:	0001a36e 	.word	0x0001a36e
 8001f00:	06666666 	.word	0x06666666
 8001f04:	0051eb85 	.word	0x0051eb85
 8001f08:	0010624d 	.word	0x0010624d
 8001f0c:	0010624e 	.word	0x0010624e
 8001f10:	00083126 	.word	0x00083126
 8001f14:	00a3d709 	.word	0x00a3d709
			uint32_t n = (s_tick >= ST_BLEND_TICKS) ? ST_BLEND_TICKS : s_tick;
 8001f18:	4b38      	ldr	r3, [pc, #224]	@ (8001ffc <APP_Step+0x3b0>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	2bc8      	cmp	r3, #200	@ 0xc8
 8001f1e:	bf28      	it	cs
 8001f20:	23c8      	movcs	r3, #200	@ 0xc8
 8001f22:	62bb      	str	r3, [r7, #40]	@ 0x28
			int32_t w = (int32_t) ((((int64_t) n << 31) + (ST_BLEND_TICKS / 2))
 8001f24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f26:	2200      	movs	r2, #0
 8001f28:	4698      	mov	r8, r3
 8001f2a:	4691      	mov	r9, r2
 8001f2c:	ea4f 0558 	mov.w	r5, r8, lsr #1
 8001f30:	ea4f 74c8 	mov.w	r4, r8, lsl #31
 8001f34:	f114 0a64 	adds.w	sl, r4, #100	@ 0x64
 8001f38:	f145 0b00 	adc.w	fp, r5, #0
					/ ST_BLEND_TICKS);
 8001f3c:	f04f 02c8 	mov.w	r2, #200	@ 0xc8
 8001f40:	f04f 0300 	mov.w	r3, #0
 8001f44:	4650      	mov	r0, sl
 8001f46:	4659      	mov	r1, fp
 8001f48:	f7fe fe2e 	bl	8000ba8 <__aeabi_ldivmod>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	460b      	mov	r3, r1
			int32_t w = (int32_t) ((((int64_t) n << 31) + (ST_BLEND_TICKS / 2))
 8001f50:	4613      	mov	r3, r2
 8001f52:	627b      	str	r3, [r7, #36]	@ 0x24
			int32_t w1 = q31_sub_sat(Q31_ONE, w);
 8001f54:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001f56:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 8001f5a:	f7ff f910 	bl	800117e <q31_sub_sat>
 8001f5e:	6238      	str	r0, [r7, #32]
			int32_t th = q31_add_sat(q31_mul(w1, s_th_forced),
 8001f60:	4b27      	ldr	r3, [pc, #156]	@ (8002000 <APP_Step+0x3b4>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4619      	mov	r1, r3
 8001f66:	6a38      	ldr	r0, [r7, #32]
 8001f68:	f7ff f88c 	bl	8001084 <q31_mul>
 8001f6c:	4604      	mov	r4, r0
 8001f6e:	4b25      	ldr	r3, [pc, #148]	@ (8002004 <APP_Step+0x3b8>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4619      	mov	r1, r3
 8001f74:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001f76:	f7ff f885 	bl	8001084 <q31_mul>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	4620      	mov	r0, r4
 8001f80:	f7ff f8c8 	bl	8001114 <q31_add_sat>
 8001f84:	61f8      	str	r0, [r7, #28]
			if (s_foc.Id_ref_q31 > 0)
 8001f86:	4b20      	ldr	r3, [pc, #128]	@ (8002008 <APP_Step+0x3bc>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	dd12      	ble.n	8001fb4 <APP_Step+0x368>
				int32_t step = ST_ALIGN_ID_Q31 >> 4;
 8001f8e:	f04f 4378 	mov.w	r3, #4160749568	@ 0xf8000000
 8001f92:	61bb      	str	r3, [r7, #24]
						(s_foc.Id_ref_q31 > step) ?
 8001f94:	4b1c      	ldr	r3, [pc, #112]	@ (8002008 <APP_Step+0x3bc>)
 8001f96:	681b      	ldr	r3, [r3, #0]
								q31_sub_sat(s_foc.Id_ref_q31, step) : 0;
 8001f98:	69ba      	ldr	r2, [r7, #24]
 8001f9a:	429a      	cmp	r2, r3
 8001f9c:	da07      	bge.n	8001fae <APP_Step+0x362>
 8001f9e:	4b1a      	ldr	r3, [pc, #104]	@ (8002008 <APP_Step+0x3bc>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	69b9      	ldr	r1, [r7, #24]
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f7ff f8ea 	bl	800117e <q31_sub_sat>
 8001faa:	4603      	mov	r3, r0
 8001fac:	e000      	b.n	8001fb0 <APP_Step+0x364>
 8001fae:	2300      	movs	r3, #0
				s_foc.Id_ref_q31 =
 8001fb0:	4a15      	ldr	r2, [pc, #84]	@ (8002008 <APP_Step+0x3bc>)
 8001fb2:	6013      	str	r3, [r2, #0]
			if (s_tick >= ST_BLEND_TICKS)
 8001fb4:	4b11      	ldr	r3, [pc, #68]	@ (8001ffc <APP_Step+0x3b0>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	2bc7      	cmp	r3, #199	@ 0xc7
 8001fba:	d902      	bls.n	8001fc2 <APP_Step+0x376>
				s_st = ST_RUN;
 8001fbc:	4b13      	ldr	r3, [pc, #76]	@ (800200c <APP_Step+0x3c0>)
 8001fbe:	2204      	movs	r2, #4
 8001fc0:	701a      	strb	r2, [r3, #0]
			s_tick++;
 8001fc2:	4b0e      	ldr	r3, [pc, #56]	@ (8001ffc <APP_Step+0x3b0>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	3301      	adds	r3, #1
 8001fc8:	4a0c      	ldr	r2, [pc, #48]	@ (8001ffc <APP_Step+0x3b0>)
 8001fca:	6013      	str	r3, [r2, #0]
			break;
 8001fcc:	e00b      	b.n	8001fe6 <APP_Step+0x39a>
			s_foc.Id_ref_q31 = 0;
 8001fce:	4b0e      	ldr	r3, [pc, #56]	@ (8002008 <APP_Step+0x3bc>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	601a      	str	r2, [r3, #0]
			s_foc.Iq_ref_q31 = 0;
 8001fd4:	4b0c      	ldr	r3, [pc, #48]	@ (8002008 <APP_Step+0x3bc>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	605a      	str	r2, [r3, #4]
			break;
 8001fda:	e004      	b.n	8001fe6 <APP_Step+0x39a>
			break;
 8001fdc:	bf00      	nop
 8001fde:	e002      	b.n	8001fe6 <APP_Step+0x39a>
			break;
 8001fe0:	bf00      	nop
 8001fe2:	e000      	b.n	8001fe6 <APP_Step+0x39a>
			break;
 8001fe4:	bf00      	nop
		FW_SetPWMDuties(c1, c2, c3);
 8001fe6:	89fb      	ldrh	r3, [r7, #14]
 8001fe8:	89b9      	ldrh	r1, [r7, #12]
 8001fea:	897a      	ldrh	r2, [r7, #10]
 8001fec:	4618      	mov	r0, r3
 8001fee:	f000 ff4f 	bl	8002e90 <FW_SetPWMDuties>
}
 8001ff2:	bf00      	nop
 8001ff4:	3758      	adds	r7, #88	@ 0x58
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001ffc:	20000208 	.word	0x20000208
 8002000:	200001fc 	.word	0x200001fc
 8002004:	20000238 	.word	0x20000238
 8002008:	2000020c 	.word	0x2000020c
 800200c:	200001f8 	.word	0x200001f8

08002010 <APP_VoltageConv>:

void APP_VoltageConv(void)
{
 8002010:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002014:	b094      	sub	sp, #80	@ 0x50
 8002016:	af00      	add	r7, sp, #0
	uint32_t v_phase[4];
	uint32_t v_ref = (uint32_t) ((((uint64_t) AD_MAX
			/ (uint64_t) (s_voltage[0] << 16)) * (uint64_t) V_REF_AD) >> 16);
 8002018:	4b78      	ldr	r3, [pc, #480]	@ (80021fc <APP_VoltageConv+0x1ec>)
 800201a:	881b      	ldrh	r3, [r3, #0]
 800201c:	b29b      	uxth	r3, r3
 800201e:	041b      	lsls	r3, r3, #16
 8002020:	17da      	asrs	r2, r3, #31
 8002022:	4618      	mov	r0, r3
 8002024:	4611      	mov	r1, r2
 8002026:	4602      	mov	r2, r0
 8002028:	460b      	mov	r3, r1
 800202a:	f640 70ff 	movw	r0, #4095	@ 0xfff
 800202e:	f04f 0100 	mov.w	r1, #0
 8002032:	f7fe fe09 	bl	8000c48 <__aeabi_uldivmod>
 8002036:	4602      	mov	r2, r0
 8002038:	460b      	mov	r3, r1
 800203a:	4971      	ldr	r1, [pc, #452]	@ (8002200 <APP_VoltageConv+0x1f0>)
 800203c:	fb01 f003 	mul.w	r0, r1, r3
 8002040:	2100      	movs	r1, #0
 8002042:	fb02 f101 	mul.w	r1, r2, r1
 8002046:	4408      	add	r0, r1
 8002048:	496d      	ldr	r1, [pc, #436]	@ (8002200 <APP_VoltageConv+0x1f0>)
 800204a:	fba2 4501 	umull	r4, r5, r2, r1
 800204e:	1943      	adds	r3, r0, r5
 8002050:	461d      	mov	r5, r3
 8002052:	f04f 0200 	mov.w	r2, #0
 8002056:	f04f 0300 	mov.w	r3, #0
 800205a:	0c22      	lsrs	r2, r4, #16
 800205c:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
 8002060:	0c2b      	lsrs	r3, r5, #16
	uint32_t v_ref = (uint32_t) ((((uint64_t) AD_MAX
 8002062:	4613      	mov	r3, r2
 8002064:	64bb      	str	r3, [r7, #72]	@ 0x48
	uint32_t v_battery = (uint32_t) ((((((uint64_t) s_voltage[1]
 8002066:	4b65      	ldr	r3, [pc, #404]	@ (80021fc <APP_VoltageConv+0x1ec>)
 8002068:	885b      	ldrh	r3, [r3, #2]
 800206a:	b29b      	uxth	r3, r3
			<< 16 / (uint64_t) AD_MAX) * (uint64_t) v_ref) >> 16)
 800206c:	b29b      	uxth	r3, r3
 800206e:	2200      	movs	r2, #0
 8002070:	60bb      	str	r3, [r7, #8]
 8002072:	60fa      	str	r2, [r7, #12]
 8002074:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002076:	2200      	movs	r2, #0
 8002078:	62bb      	str	r3, [r7, #40]	@ 0x28
 800207a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800207c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002080:	460b      	mov	r3, r1
 8002082:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 8002086:	4622      	mov	r2, r4
 8002088:	fb02 f203 	mul.w	r2, r2, r3
 800208c:	e9c7 450a 	strd	r4, r5, [r7, #40]	@ 0x28
 8002090:	462b      	mov	r3, r5
 8002092:	4604      	mov	r4, r0
 8002094:	460d      	mov	r5, r1
 8002096:	4621      	mov	r1, r4
 8002098:	fb01 f303 	mul.w	r3, r1, r3
 800209c:	4413      	add	r3, r2
 800209e:	4622      	mov	r2, r4
 80020a0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80020a2:	fba2 1201 	umull	r1, r2, r2, r1
 80020a6:	627a      	str	r2, [r7, #36]	@ 0x24
 80020a8:	460a      	mov	r2, r1
 80020aa:	623a      	str	r2, [r7, #32]
 80020ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80020ae:	4413      	add	r3, r2
 80020b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80020b2:	f04f 0200 	mov.w	r2, #0
 80020b6:	f04f 0300 	mov.w	r3, #0
 80020ba:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80020be:	4621      	mov	r1, r4
 80020c0:	0c0a      	lsrs	r2, r1, #16
 80020c2:	4629      	mov	r1, r5
 80020c4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80020c8:	4629      	mov	r1, r5
 80020ca:	0c0b      	lsrs	r3, r1, #16
			* (uint64_t) V_DIV) >> 16);
 80020cc:	f64c 1178 	movw	r1, #51576	@ 0xc978
 80020d0:	fb01 f003 	mul.w	r0, r1, r3
 80020d4:	2100      	movs	r1, #0
 80020d6:	fb02 f101 	mul.w	r1, r2, r1
 80020da:	4401      	add	r1, r0
 80020dc:	f64c 1078 	movw	r0, #51576	@ 0xc978
 80020e0:	fba2 2300 	umull	r2, r3, r2, r0
 80020e4:	61fb      	str	r3, [r7, #28]
 80020e6:	4613      	mov	r3, r2
 80020e8:	61bb      	str	r3, [r7, #24]
 80020ea:	69fb      	ldr	r3, [r7, #28]
 80020ec:	18cb      	adds	r3, r1, r3
 80020ee:	61fb      	str	r3, [r7, #28]
 80020f0:	f04f 0200 	mov.w	r2, #0
 80020f4:	f04f 0300 	mov.w	r3, #0
 80020f8:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 80020fc:	4621      	mov	r1, r4
 80020fe:	0c0a      	lsrs	r2, r1, #16
 8002100:	4629      	mov	r1, r5
 8002102:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002106:	4629      	mov	r1, r5
 8002108:	0c0b      	lsrs	r3, r1, #16
	uint32_t v_battery = (uint32_t) ((((((uint64_t) s_voltage[1]
 800210a:	4613      	mov	r3, r2
 800210c:	647b      	str	r3, [r7, #68]	@ 0x44

	for (size_t i = 0; i < 4; i++)
 800210e:	2300      	movs	r3, #0
 8002110:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002112:	e061      	b.n	80021d8 <APP_VoltageConv+0x1c8>
	{
		v_phase[i] = (uint32_t) ((((((uint64_t) s_vphase_adc[i]
 8002114:	4a3b      	ldr	r2, [pc, #236]	@ (8002204 <APP_VoltageConv+0x1f4>)
 8002116:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002118:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800211c:	b29b      	uxth	r3, r3
				<< 16 / (uint64_t) AD_MAX) * (uint64_t) v_ref) >> 16)
 800211e:	b29b      	uxth	r3, r3
 8002120:	2200      	movs	r2, #0
 8002122:	603b      	str	r3, [r7, #0]
 8002124:	607a      	str	r2, [r7, #4]
 8002126:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002128:	2200      	movs	r2, #0
 800212a:	613b      	str	r3, [r7, #16]
 800212c:	617a      	str	r2, [r7, #20]
 800212e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002132:	462b      	mov	r3, r5
 8002134:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002138:	4602      	mov	r2, r0
 800213a:	fb02 f203 	mul.w	r2, r2, r3
 800213e:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8002142:	460b      	mov	r3, r1
 8002144:	4621      	mov	r1, r4
 8002146:	fb01 f303 	mul.w	r3, r1, r3
 800214a:	4413      	add	r3, r2
 800214c:	4622      	mov	r2, r4
 800214e:	6939      	ldr	r1, [r7, #16]
 8002150:	fba2 8901 	umull	r8, r9, r2, r1
 8002154:	444b      	add	r3, r9
 8002156:	4699      	mov	r9, r3
 8002158:	f04f 0200 	mov.w	r2, #0
 800215c:	f04f 0300 	mov.w	r3, #0
 8002160:	ea4f 4218 	mov.w	r2, r8, lsr #16
 8002164:	ea42 4209 	orr.w	r2, r2, r9, lsl #16
 8002168:	ea4f 4319 	mov.w	r3, r9, lsr #16
				* (uint64_t) V_DIV) >> 16);
 800216c:	f64c 1178 	movw	r1, #51576	@ 0xc978
 8002170:	fb01 f003 	mul.w	r0, r1, r3
 8002174:	2100      	movs	r1, #0
 8002176:	fb02 f101 	mul.w	r1, r2, r1
 800217a:	4401      	add	r1, r0
 800217c:	f64c 1078 	movw	r0, #51576	@ 0xc978
 8002180:	fba2 ab00 	umull	sl, fp, r2, r0
 8002184:	eb01 030b 	add.w	r3, r1, fp
 8002188:	469b      	mov	fp, r3
 800218a:	f04f 0200 	mov.w	r2, #0
 800218e:	f04f 0300 	mov.w	r3, #0
 8002192:	ea4f 421a 	mov.w	r2, sl, lsr #16
 8002196:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
 800219a:	ea4f 431b 	mov.w	r3, fp, lsr #16
		v_phase[i] = (uint32_t) ((((((uint64_t) s_vphase_adc[i]
 800219e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80021a0:	009b      	lsls	r3, r3, #2
 80021a2:	3320      	adds	r3, #32
 80021a4:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 80021a8:	440b      	add	r3, r1
 80021aa:	f843 2c1c 	str.w	r2, [r3, #-28]
		motor_voltage_buff[i] = (uint16_t) ((v_phase[i] * 1000) >> 16);
 80021ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80021b0:	009b      	lsls	r3, r3, #2
 80021b2:	3320      	adds	r3, #32
 80021b4:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80021b8:	4413      	add	r3, r2
 80021ba:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 80021be:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80021c2:	fb02 f303 	mul.w	r3, r2, r3
 80021c6:	0c1b      	lsrs	r3, r3, #16
 80021c8:	b299      	uxth	r1, r3
 80021ca:	4a0f      	ldr	r2, [pc, #60]	@ (8002208 <APP_VoltageConv+0x1f8>)
 80021cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80021ce:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (size_t i = 0; i < 4; i++)
 80021d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80021d4:	3301      	adds	r3, #1
 80021d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80021d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80021da:	2b03      	cmp	r3, #3
 80021dc:	d99a      	bls.n	8002114 <APP_VoltageConv+0x104>
	}

	bat_voltage_buff = (uint16_t) ((v_battery * 1000) >> 16);
 80021de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80021e0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80021e4:	fb02 f303 	mul.w	r3, r2, r3
 80021e8:	0c1b      	lsrs	r3, r3, #16
 80021ea:	b29a      	uxth	r2, r3
 80021ec:	4b07      	ldr	r3, [pc, #28]	@ (800220c <APP_VoltageConv+0x1fc>)
 80021ee:	801a      	strh	r2, [r3, #0]
}
 80021f0:	bf00      	nop
 80021f2:	3750      	adds	r7, #80	@ 0x50
 80021f4:	46bd      	mov	sp, r7
 80021f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80021fa:	bf00      	nop
 80021fc:	20000294 	.word	0x20000294
 8002200:	00013c28 	.word	0x00013c28
 8002204:	20000298 	.word	0x20000298
 8002208:	200002b0 	.word	0x200002b0
 800220c:	200002ac 	.word	0x200002ac

08002210 <APP_CurrentConv>:

void APP_CurrentConv(void)
{
 8002210:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002214:	b08c      	sub	sp, #48	@ 0x30
 8002216:	af00      	add	r7, sp, #0
	int32_t i_phase;
	int32_t vi_phase;
	int32_t v_ref = (int32_t) ((((int64_t) AD_MAX
			/ (int64_t) (s_voltage[0] << 16)) * (int64_t) V_REF_AD) >> 16);
 8002218:	4b66      	ldr	r3, [pc, #408]	@ (80023b4 <APP_CurrentConv+0x1a4>)
 800221a:	881b      	ldrh	r3, [r3, #0]
 800221c:	b29b      	uxth	r3, r3
 800221e:	041b      	lsls	r3, r3, #16
 8002220:	17da      	asrs	r2, r3, #31
 8002222:	4618      	mov	r0, r3
 8002224:	4611      	mov	r1, r2
 8002226:	4602      	mov	r2, r0
 8002228:	460b      	mov	r3, r1
 800222a:	f640 70ff 	movw	r0, #4095	@ 0xfff
 800222e:	f04f 0100 	mov.w	r1, #0
 8002232:	f7fe fcb9 	bl	8000ba8 <__aeabi_ldivmod>
 8002236:	4602      	mov	r2, r0
 8002238:	460b      	mov	r3, r1
 800223a:	495f      	ldr	r1, [pc, #380]	@ (80023b8 <APP_CurrentConv+0x1a8>)
 800223c:	fb01 f003 	mul.w	r0, r1, r3
 8002240:	2100      	movs	r1, #0
 8002242:	fb02 f101 	mul.w	r1, r2, r1
 8002246:	4408      	add	r0, r1
 8002248:	495b      	ldr	r1, [pc, #364]	@ (80023b8 <APP_CurrentConv+0x1a8>)
 800224a:	fba2 4501 	umull	r4, r5, r2, r1
 800224e:	1943      	adds	r3, r0, r5
 8002250:	461d      	mov	r5, r3
 8002252:	f04f 0200 	mov.w	r2, #0
 8002256:	f04f 0300 	mov.w	r3, #0
 800225a:	0c22      	lsrs	r2, r4, #16
 800225c:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
 8002260:	142b      	asrs	r3, r5, #16
	int32_t v_ref = (int32_t) ((((int64_t) AD_MAX
 8002262:	4613      	mov	r3, r2
 8002264:	62bb      	str	r3, [r7, #40]	@ 0x28

	for (size_t i = 0; i < 3; i++)
 8002266:	2300      	movs	r3, #0
 8002268:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800226a:	e098      	b.n	800239e <APP_CurrentConv+0x18e>
	{
		vi_phase = (int32_t) ((((int64_t) (s_current[i] << 16)
 800226c:	4a53      	ldr	r2, [pc, #332]	@ (80023bc <APP_CurrentConv+0x1ac>)
 800226e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002270:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002274:	b29b      	uxth	r3, r3
 8002276:	041a      	lsls	r2, r3, #16
				/ (int64_t) AD_MAX) * (int64_t) v_ref) >> 16);
 8002278:	4b51      	ldr	r3, [pc, #324]	@ (80023c0 <APP_CurrentConv+0x1b0>)
 800227a:	fb83 1302 	smull	r1, r3, r3, r2
 800227e:	4413      	add	r3, r2
 8002280:	12d9      	asrs	r1, r3, #11
 8002282:	17d3      	asrs	r3, r2, #31
 8002284:	1acb      	subs	r3, r1, r3
 8002286:	17da      	asrs	r2, r3, #31
 8002288:	60bb      	str	r3, [r7, #8]
 800228a:	60fa      	str	r2, [r7, #12]
 800228c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800228e:	17da      	asrs	r2, r3, #31
 8002290:	61bb      	str	r3, [r7, #24]
 8002292:	61fa      	str	r2, [r7, #28]
 8002294:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002298:	462b      	mov	r3, r5
 800229a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800229e:	4602      	mov	r2, r0
 80022a0:	fb02 f203 	mul.w	r2, r2, r3
 80022a4:	e9c7 0106 	strd	r0, r1, [r7, #24]
 80022a8:	460b      	mov	r3, r1
 80022aa:	4621      	mov	r1, r4
 80022ac:	fb01 f303 	mul.w	r3, r1, r3
 80022b0:	4413      	add	r3, r2
 80022b2:	4622      	mov	r2, r4
 80022b4:	69b9      	ldr	r1, [r7, #24]
 80022b6:	fba2 ab01 	umull	sl, fp, r2, r1
 80022ba:	445b      	add	r3, fp
 80022bc:	469b      	mov	fp, r3
 80022be:	f04f 0200 	mov.w	r2, #0
 80022c2:	f04f 0300 	mov.w	r3, #0
 80022c6:	ea4f 421a 	mov.w	r2, sl, lsr #16
 80022ca:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
 80022ce:	ea4f 432b 	mov.w	r3, fp, asr #16
		vi_phase = (int32_t) ((((int64_t) (s_current[i] << 16)
 80022d2:	4613      	mov	r3, r2
 80022d4:	627b      	str	r3, [r7, #36]	@ 0x24
		i_phase = (int32_t) ((((((int64_t) (vi_phase - V_CENTER)) * 1000) / 11)
 80022d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022d8:	f5a3 33d3 	sub.w	r3, r3, #108032	@ 0x1a600
 80022dc:	3b66      	subs	r3, #102	@ 0x66
 80022de:	17da      	asrs	r2, r3, #31
 80022e0:	603b      	str	r3, [r7, #0]
 80022e2:	607a      	str	r2, [r7, #4]
 80022e4:	e9d7 4500 	ldrd	r4, r5, [r7]
 80022e8:	4622      	mov	r2, r4
 80022ea:	462b      	mov	r3, r5
 80022ec:	f04f 0000 	mov.w	r0, #0
 80022f0:	f04f 0100 	mov.w	r1, #0
 80022f4:	0159      	lsls	r1, r3, #5
 80022f6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80022fa:	0150      	lsls	r0, r2, #5
 80022fc:	4602      	mov	r2, r0
 80022fe:	460b      	mov	r3, r1
 8002300:	4621      	mov	r1, r4
 8002302:	ebb2 0801 	subs.w	r8, r2, r1
 8002306:	4629      	mov	r1, r5
 8002308:	eb63 0901 	sbc.w	r9, r3, r1
 800230c:	f04f 0200 	mov.w	r2, #0
 8002310:	f04f 0300 	mov.w	r3, #0
 8002314:	ea4f 0389 	mov.w	r3, r9, lsl #2
 8002318:	ea43 7398 	orr.w	r3, r3, r8, lsr #30
 800231c:	ea4f 0288 	mov.w	r2, r8, lsl #2
 8002320:	4690      	mov	r8, r2
 8002322:	4699      	mov	r9, r3
 8002324:	4623      	mov	r3, r4
 8002326:	eb18 0303 	adds.w	r3, r8, r3
 800232a:	613b      	str	r3, [r7, #16]
 800232c:	462b      	mov	r3, r5
 800232e:	eb49 0303 	adc.w	r3, r9, r3
 8002332:	617b      	str	r3, [r7, #20]
 8002334:	f04f 0200 	mov.w	r2, #0
 8002338:	f04f 0300 	mov.w	r3, #0
 800233c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002340:	4629      	mov	r1, r5
 8002342:	00cb      	lsls	r3, r1, #3
 8002344:	4621      	mov	r1, r4
 8002346:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800234a:	4621      	mov	r1, r4
 800234c:	00ca      	lsls	r2, r1, #3
 800234e:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8002352:	4610      	mov	r0, r2
 8002354:	4619      	mov	r1, r3
 8002356:	f04f 020b 	mov.w	r2, #11
 800235a:	f04f 0300 	mov.w	r3, #0
 800235e:	f7fe fc23 	bl	8000ba8 <__aeabi_ldivmod>
 8002362:	4602      	mov	r2, r0
 8002364:	460b      	mov	r3, r1
				<< 16) / (int64_t) (R_SHUNT));
 8002366:	f04f 0000 	mov.w	r0, #0
 800236a:	f04f 0100 	mov.w	r1, #0
 800236e:	0419      	lsls	r1, r3, #16
 8002370:	ea41 4112 	orr.w	r1, r1, r2, lsr #16
 8002374:	0410      	lsls	r0, r2, #16
 8002376:	f640 42cc 	movw	r2, #3276	@ 0xccc
 800237a:	f04f 0300 	mov.w	r3, #0
 800237e:	f7fe fc13 	bl	8000ba8 <__aeabi_ldivmod>
 8002382:	4602      	mov	r2, r0
 8002384:	460b      	mov	r3, r1
		i_phase = (int32_t) ((((((int64_t) (vi_phase - V_CENTER)) * 1000) / 11)
 8002386:	4613      	mov	r3, r2
 8002388:	623b      	str	r3, [r7, #32]
		motor_current_buff[i] = (int16_t) (i_phase >> 16);
 800238a:	6a3b      	ldr	r3, [r7, #32]
 800238c:	141b      	asrs	r3, r3, #16
 800238e:	b21b      	sxth	r3, r3
 8002390:	490c      	ldr	r1, [pc, #48]	@ (80023c4 <APP_CurrentConv+0x1b4>)
 8002392:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002394:	f821 3012 	strh.w	r3, [r1, r2, lsl #1]
	for (size_t i = 0; i < 3; i++)
 8002398:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800239a:	3301      	adds	r3, #1
 800239c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800239e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023a0:	2b02      	cmp	r3, #2
 80023a2:	f67f af63 	bls.w	800226c <APP_CurrentConv+0x5c>
	}
}
 80023a6:	bf00      	nop
 80023a8:	bf00      	nop
 80023aa:	3730      	adds	r7, #48	@ 0x30
 80023ac:	46bd      	mov	sp, r7
 80023ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80023b2:	bf00      	nop
 80023b4:	20000294 	.word	0x20000294
 80023b8:	00013c28 	.word	0x00013c28
 80023bc:	200002a0 	.word	0x200002a0
 80023c0:	80080081 	.word	0x80080081
 80023c4:	200002b8 	.word	0x200002b8

080023c8 <q31_mul>:
{
 80023c8:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 80023cc:	b085      	sub	sp, #20
 80023ce:	af00      	add	r7, sp, #0
 80023d0:	6078      	str	r0, [r7, #4]
 80023d2:	6039      	str	r1, [r7, #0]
	int64_t t = (int64_t) a * (int64_t) b;
 80023d4:	6879      	ldr	r1, [r7, #4]
 80023d6:	17c8      	asrs	r0, r1, #31
 80023d8:	4688      	mov	r8, r1
 80023da:	4681      	mov	r9, r0
 80023dc:	6839      	ldr	r1, [r7, #0]
 80023de:	17c8      	asrs	r0, r1, #31
 80023e0:	460c      	mov	r4, r1
 80023e2:	4605      	mov	r5, r0
 80023e4:	fb04 f009 	mul.w	r0, r4, r9
 80023e8:	fb08 f105 	mul.w	r1, r8, r5
 80023ec:	4401      	add	r1, r0
 80023ee:	fba8 2304 	umull	r2, r3, r8, r4
 80023f2:	4419      	add	r1, r3
 80023f4:	460b      	mov	r3, r1
 80023f6:	e9c7 2302 	strd	r2, r3, [r7, #8]
 80023fa:	e9c7 2302 	strd	r2, r3, [r7, #8]
	t >>= 31;
 80023fe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002402:	f04f 0200 	mov.w	r2, #0
 8002406:	f04f 0300 	mov.w	r3, #0
 800240a:	0fc2      	lsrs	r2, r0, #31
 800240c:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8002410:	17cb      	asrs	r3, r1, #31
 8002412:	e9c7 2302 	strd	r2, r3, [r7, #8]
	if (t > 0x7FFFFFFFLL)
 8002416:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800241a:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 800241e:	f173 0300 	sbcs.w	r3, r3, #0
 8002422:	db05      	blt.n	8002430 <q31_mul+0x68>
		t = 0x7FFFFFFFLL;
 8002424:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8002428:	f04f 0300 	mov.w	r3, #0
 800242c:	e9c7 2302 	strd	r2, r3, [r7, #8]
	if (t < -0x80000000LL)
 8002430:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002434:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8002438:	f173 33ff 	sbcs.w	r3, r3, #4294967295
 800243c:	da05      	bge.n	800244a <q31_mul+0x82>
		t = -0x80000000LL;
 800243e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8002442:	f04f 33ff 	mov.w	r3, #4294967295
 8002446:	e9c7 2302 	strd	r2, r3, [r7, #8]
	return (int32_t) t;
 800244a:	68bb      	ldr	r3, [r7, #8]
}
 800244c:	4618      	mov	r0, r3
 800244e:	3714      	adds	r7, #20
 8002450:	46bd      	mov	sp, r7
 8002452:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 8002456:	4770      	bx	lr

08002458 <q31_div>:
{
 8002458:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800245c:	b084      	sub	sp, #16
 800245e:	af00      	add	r7, sp, #0
 8002460:	6078      	str	r0, [r7, #4]
 8002462:	6039      	str	r1, [r7, #0]
	if (b == 0)
 8002464:	6839      	ldr	r1, [r7, #0]
 8002466:	2900      	cmp	r1, #0
 8002468:	d108      	bne.n	800247c <q31_div+0x24>
		return (a >= 0) ? 0x7FFFFFFF : (int32_t) 0x80000000;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2b00      	cmp	r3, #0
 800246e:	db02      	blt.n	8002476 <q31_div+0x1e>
 8002470:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8002474:	e031      	b.n	80024da <q31_div+0x82>
 8002476:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800247a:	e02e      	b.n	80024da <q31_div+0x82>
	int64_t t = ((int64_t) a << 31) / (int64_t) b;
 800247c:	6879      	ldr	r1, [r7, #4]
 800247e:	17c8      	asrs	r0, r1, #31
 8002480:	460a      	mov	r2, r1
 8002482:	4603      	mov	r3, r0
 8002484:	1055      	asrs	r5, r2, #1
 8002486:	07d4      	lsls	r4, r2, #31
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	17da      	asrs	r2, r3, #31
 800248c:	4698      	mov	r8, r3
 800248e:	4691      	mov	r9, r2
 8002490:	4642      	mov	r2, r8
 8002492:	464b      	mov	r3, r9
 8002494:	4620      	mov	r0, r4
 8002496:	4629      	mov	r1, r5
 8002498:	f7fe fb86 	bl	8000ba8 <__aeabi_ldivmod>
 800249c:	4602      	mov	r2, r0
 800249e:	460b      	mov	r3, r1
 80024a0:	e9c7 2302 	strd	r2, r3, [r7, #8]
	if (t > 0x7FFFFFFFLL)
 80024a4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80024a8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80024ac:	f173 0300 	sbcs.w	r3, r3, #0
 80024b0:	db05      	blt.n	80024be <q31_div+0x66>
		t = 0x7FFFFFFFLL;
 80024b2:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 80024b6:	f04f 0300 	mov.w	r3, #0
 80024ba:	e9c7 2302 	strd	r2, r3, [r7, #8]
	if (t < -0x80000000LL)
 80024be:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80024c2:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80024c6:	f173 33ff 	sbcs.w	r3, r3, #4294967295
 80024ca:	da05      	bge.n	80024d8 <q31_div+0x80>
		t = -0x80000000LL;
 80024cc:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80024d0:	f04f 33ff 	mov.w	r3, #4294967295
 80024d4:	e9c7 2302 	strd	r2, r3, [r7, #8]
	return (int32_t) t;
 80024d8:	68bb      	ldr	r3, [r7, #8]
}
 80024da:	4618      	mov	r0, r3
 80024dc:	3710      	adds	r7, #16
 80024de:	46bd      	mov	sp, r7
 80024e0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

080024e4 <q31_add_sat>:
{
 80024e4:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 80024e8:	b085      	sub	sp, #20
 80024ea:	af00      	add	r7, sp, #0
 80024ec:	6078      	str	r0, [r7, #4]
 80024ee:	6039      	str	r1, [r7, #0]
	int64_t t = (int64_t) a + (int64_t) b;
 80024f0:	6879      	ldr	r1, [r7, #4]
 80024f2:	17c8      	asrs	r0, r1, #31
 80024f4:	460c      	mov	r4, r1
 80024f6:	4605      	mov	r5, r0
 80024f8:	6839      	ldr	r1, [r7, #0]
 80024fa:	17c8      	asrs	r0, r1, #31
 80024fc:	460a      	mov	r2, r1
 80024fe:	4603      	mov	r3, r0
 8002500:	eb14 0802 	adds.w	r8, r4, r2
 8002504:	eb45 0903 	adc.w	r9, r5, r3
 8002508:	e9c7 8902 	strd	r8, r9, [r7, #8]
	if (t > 0x7FFFFFFFLL)
 800250c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002510:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8002514:	f173 0300 	sbcs.w	r3, r3, #0
 8002518:	db05      	blt.n	8002526 <q31_add_sat+0x42>
		t = 0x7FFFFFFFLL;
 800251a:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 800251e:	f04f 0300 	mov.w	r3, #0
 8002522:	e9c7 2302 	strd	r2, r3, [r7, #8]
	if (t < -0x80000000LL)
 8002526:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800252a:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 800252e:	f173 33ff 	sbcs.w	r3, r3, #4294967295
 8002532:	da05      	bge.n	8002540 <q31_add_sat+0x5c>
		t = -0x80000000LL;
 8002534:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8002538:	f04f 33ff 	mov.w	r3, #4294967295
 800253c:	e9c7 2302 	strd	r2, r3, [r7, #8]
	return (int32_t) t;
 8002540:	68bb      	ldr	r3, [r7, #8]
}
 8002542:	4618      	mov	r0, r3
 8002544:	3714      	adds	r7, #20
 8002546:	46bd      	mov	sp, r7
 8002548:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 800254c:	4770      	bx	lr

0800254e <q31_sub_sat>:
{
 800254e:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 8002552:	b085      	sub	sp, #20
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
 8002558:	6039      	str	r1, [r7, #0]
	int64_t t = (int64_t) a - (int64_t) b;
 800255a:	6879      	ldr	r1, [r7, #4]
 800255c:	17c8      	asrs	r0, r1, #31
 800255e:	460c      	mov	r4, r1
 8002560:	4605      	mov	r5, r0
 8002562:	6839      	ldr	r1, [r7, #0]
 8002564:	17c8      	asrs	r0, r1, #31
 8002566:	460a      	mov	r2, r1
 8002568:	4603      	mov	r3, r0
 800256a:	ebb4 0802 	subs.w	r8, r4, r2
 800256e:	eb65 0903 	sbc.w	r9, r5, r3
 8002572:	e9c7 8902 	strd	r8, r9, [r7, #8]
	if (t > 0x7FFFFFFFLL)
 8002576:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800257a:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 800257e:	f173 0300 	sbcs.w	r3, r3, #0
 8002582:	db05      	blt.n	8002590 <q31_sub_sat+0x42>
		t = 0x7FFFFFFFLL;
 8002584:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8002588:	f04f 0300 	mov.w	r3, #0
 800258c:	e9c7 2302 	strd	r2, r3, [r7, #8]
	if (t < -0x80000000LL)
 8002590:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002594:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8002598:	f173 33ff 	sbcs.w	r3, r3, #4294967295
 800259c:	da05      	bge.n	80025aa <q31_sub_sat+0x5c>
		t = -0x80000000LL;
 800259e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80025a2:	f04f 33ff 	mov.w	r3, #4294967295
 80025a6:	e9c7 2302 	strd	r2, r3, [r7, #8]
	return (int32_t) t;
 80025aa:	68bb      	ldr	r3, [r7, #8]
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	3714      	adds	r7, #20
 80025b0:	46bd      	mov	sp, r7
 80025b2:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 80025b6:	4770      	bx	lr

080025b8 <BEMF_PLL_Init>:
#include "bemf_pll.h"
#include "fixedpoint.h"


void BEMF_PLL_Init(BEMF_PLL_t *o)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b083      	sub	sp, #12
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
	o->theta_q31 = 0;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2200      	movs	r2, #0
 80025c4:	601a      	str	r2, [r3, #0]
	o->omega_q31 = 0;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2200      	movs	r2, #0
 80025ca:	605a      	str	r2, [r3, #4]
	o->integ_q31 = 0;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2200      	movs	r2, #0
 80025d0:	611a      	str	r2, [r3, #16]
	o->i_alpha_prev = 0;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2200      	movs	r2, #0
 80025d6:	629a      	str	r2, [r3, #40]	@ 0x28
	o->i_beta_prev = 0;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2200      	movs	r2, #0
 80025dc:	62da      	str	r2, [r3, #44]	@ 0x2c
	o->di_alpha_q31 = 0;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2200      	movs	r2, #0
 80025e2:	631a      	str	r2, [r3, #48]	@ 0x30
	o->di_beta_q31 = 0;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2200      	movs	r2, #0
 80025e8:	635a      	str	r2, [r3, #52]	@ 0x34
	o->e_alpha_q31 = 0;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2200      	movs	r2, #0
 80025ee:	639a      	str	r2, [r3, #56]	@ 0x38
	o->e_beta_q31 = 0;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2200      	movs	r2, #0
 80025f4:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80025f6:	bf00      	nop
 80025f8:	370c      	adds	r7, #12
 80025fa:	46bd      	mov	sp, r7
 80025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002600:	4770      	bx	lr

08002602 <BEMF_PLL_Step>:

void BEMF_PLL_Step(BEMF_PLL_t *o, int32_t v_alpha_q31, int32_t v_beta_q31,
		int32_t i_alpha_q31, int32_t i_beta_q31)
{
 8002602:	b590      	push	{r4, r7, lr}
 8002604:	b099      	sub	sp, #100	@ 0x64
 8002606:	af00      	add	r7, sp, #0
 8002608:	60f8      	str	r0, [r7, #12]
 800260a:	60b9      	str	r1, [r7, #8]
 800260c:	607a      	str	r2, [r7, #4]
 800260e:	603b      	str	r3, [r7, #0]
	int32_t di_a = q31_sub_sat(i_alpha_q31, o->i_alpha_prev);
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002614:	4619      	mov	r1, r3
 8002616:	6838      	ldr	r0, [r7, #0]
 8002618:	f7ff ff99 	bl	800254e <q31_sub_sat>
 800261c:	65f8      	str	r0, [r7, #92]	@ 0x5c
	int32_t di_b = q31_sub_sat(i_beta_q31, o->i_beta_prev);
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002622:	4619      	mov	r1, r3
 8002624:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8002626:	f7ff ff92 	bl	800254e <q31_sub_sat>
 800262a:	65b8      	str	r0, [r7, #88]	@ 0x58

	int32_t di_alpha_inst = q31_div(di_a, o->Ts_q31);
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	69db      	ldr	r3, [r3, #28]
 8002630:	4619      	mov	r1, r3
 8002632:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8002634:	f7ff ff10 	bl	8002458 <q31_div>
 8002638:	6578      	str	r0, [r7, #84]	@ 0x54
	int32_t di_beta_inst = q31_div(di_b, o->Ts_q31);
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	69db      	ldr	r3, [r3, #28]
 800263e:	4619      	mov	r1, r3
 8002640:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8002642:	f7ff ff09 	bl	8002458 <q31_div>
 8002646:	6538      	str	r0, [r7, #80]	@ 0x50

	int32_t one_minus_alpha = q31_sub_sat(Q31_ONE, o->alpha_q31);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800264c:	4619      	mov	r1, r3
 800264e:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 8002652:	f7ff ff7c 	bl	800254e <q31_sub_sat>
 8002656:	64f8      	str	r0, [r7, #76]	@ 0x4c
	o->di_alpha_q31 = q31_add_sat(q31_mul(o->alpha_q31, di_alpha_inst),
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800265c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800265e:	4618      	mov	r0, r3
 8002660:	f7ff feb2 	bl	80023c8 <q31_mul>
 8002664:	4604      	mov	r4, r0
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800266a:	4619      	mov	r1, r3
 800266c:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800266e:	f7ff feab 	bl	80023c8 <q31_mul>
 8002672:	4603      	mov	r3, r0
 8002674:	4619      	mov	r1, r3
 8002676:	4620      	mov	r0, r4
 8002678:	f7ff ff34 	bl	80024e4 <q31_add_sat>
 800267c:	4602      	mov	r2, r0
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	631a      	str	r2, [r3, #48]	@ 0x30
			q31_mul(one_minus_alpha, o->di_alpha_q31));
	o->di_beta_q31 = q31_add_sat(q31_mul(o->alpha_q31, di_beta_inst),
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002686:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8002688:	4618      	mov	r0, r3
 800268a:	f7ff fe9d 	bl	80023c8 <q31_mul>
 800268e:	4604      	mov	r4, r0
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002694:	4619      	mov	r1, r3
 8002696:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8002698:	f7ff fe96 	bl	80023c8 <q31_mul>
 800269c:	4603      	mov	r3, r0
 800269e:	4619      	mov	r1, r3
 80026a0:	4620      	mov	r0, r4
 80026a2:	f7ff ff1f 	bl	80024e4 <q31_add_sat>
 80026a6:	4602      	mov	r2, r0
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	635a      	str	r2, [r3, #52]	@ 0x34
			q31_mul(one_minus_alpha, o->di_beta_q31));

	o->i_alpha_prev = i_alpha_q31;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	683a      	ldr	r2, [r7, #0]
 80026b0:	629a      	str	r2, [r3, #40]	@ 0x28
	o->i_beta_prev = i_beta_q31;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80026b6:	62da      	str	r2, [r3, #44]	@ 0x2c

	int32_t Ri_a = q31_mul(o->Rs_q31, i_alpha_q31);
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	695b      	ldr	r3, [r3, #20]
 80026bc:	6839      	ldr	r1, [r7, #0]
 80026be:	4618      	mov	r0, r3
 80026c0:	f7ff fe82 	bl	80023c8 <q31_mul>
 80026c4:	64b8      	str	r0, [r7, #72]	@ 0x48
	int32_t Ri_b = q31_mul(o->Rs_q31, i_beta_q31);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	695b      	ldr	r3, [r3, #20]
 80026ca:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 80026cc:	4618      	mov	r0, r3
 80026ce:	f7ff fe7b 	bl	80023c8 <q31_mul>
 80026d2:	6478      	str	r0, [r7, #68]	@ 0x44
	int32_t Ldidt_a = q31_mul(o->Ls_q31, o->di_alpha_q31);
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	699a      	ldr	r2, [r3, #24]
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026dc:	4619      	mov	r1, r3
 80026de:	4610      	mov	r0, r2
 80026e0:	f7ff fe72 	bl	80023c8 <q31_mul>
 80026e4:	6438      	str	r0, [r7, #64]	@ 0x40
	int32_t Ldidt_b = q31_mul(o->Ls_q31, o->di_beta_q31);
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	699a      	ldr	r2, [r3, #24]
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80026ee:	4619      	mov	r1, r3
 80026f0:	4610      	mov	r0, r2
 80026f2:	f7ff fe69 	bl	80023c8 <q31_mul>
 80026f6:	63f8      	str	r0, [r7, #60]	@ 0x3c

	int32_t sub_a = q31_add_sat(Ri_a, Ldidt_a);
 80026f8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80026fa:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 80026fc:	f7ff fef2 	bl	80024e4 <q31_add_sat>
 8002700:	63b8      	str	r0, [r7, #56]	@ 0x38
	int32_t sub_b = q31_add_sat(Ri_b, Ldidt_b);
 8002702:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002704:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8002706:	f7ff feed 	bl	80024e4 <q31_add_sat>
 800270a:	6378      	str	r0, [r7, #52]	@ 0x34

	int32_t e_a = q31_sub_sat(v_alpha_q31, sub_a);
 800270c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800270e:	68b8      	ldr	r0, [r7, #8]
 8002710:	f7ff ff1d 	bl	800254e <q31_sub_sat>
 8002714:	6338      	str	r0, [r7, #48]	@ 0x30
	int32_t e_b = q31_sub_sat(v_beta_q31, sub_b);
 8002716:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8002718:	6878      	ldr	r0, [r7, #4]
 800271a:	f7ff ff18 	bl	800254e <q31_sub_sat>
 800271e:	62f8      	str	r0, [r7, #44]	@ 0x2c

	o->e_alpha_q31 = e_a;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002724:	639a      	str	r2, [r3, #56]	@ 0x38
	o->e_beta_q31 = e_b;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800272a:	63da      	str	r2, [r3, #60]	@ 0x3c

	int32_t s, c;
	sincos_q31(o->theta_q31, &s, &c);
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f107 0210 	add.w	r2, r7, #16
 8002734:	f107 0114 	add.w	r1, r7, #20
 8002738:	4618      	mov	r0, r3
 800273a:	f7ff f839 	bl	80017b0 <sincos_q31>
	int32_t e_q1 = q31_mul(e_a, -s);
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	425b      	negs	r3, r3
 8002742:	4619      	mov	r1, r3
 8002744:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002746:	f7ff fe3f 	bl	80023c8 <q31_mul>
 800274a:	62b8      	str	r0, [r7, #40]	@ 0x28
	int32_t e_q2 = q31_mul(e_b, c);
 800274c:	693b      	ldr	r3, [r7, #16]
 800274e:	4619      	mov	r1, r3
 8002750:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002752:	f7ff fe39 	bl	80023c8 <q31_mul>
 8002756:	6278      	str	r0, [r7, #36]	@ 0x24
	int32_t eps = q31_add_sat(e_q1, e_q2);
 8002758:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800275a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800275c:	f7ff fec2 	bl	80024e4 <q31_add_sat>
 8002760:	6238      	str	r0, [r7, #32]

	o->integ_q31 = q31_add_sat(o->integ_q31, q31_mul(o->ki_q31, eps));
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	691c      	ldr	r4, [r3, #16]
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	68db      	ldr	r3, [r3, #12]
 800276a:	6a39      	ldr	r1, [r7, #32]
 800276c:	4618      	mov	r0, r3
 800276e:	f7ff fe2b 	bl	80023c8 <q31_mul>
 8002772:	4603      	mov	r3, r0
 8002774:	4619      	mov	r1, r3
 8002776:	4620      	mov	r0, r4
 8002778:	f7ff feb4 	bl	80024e4 <q31_add_sat>
 800277c:	4602      	mov	r2, r0
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	611a      	str	r2, [r3, #16]
	if (o->integ_q31 > o->integ_max_q31)
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	691a      	ldr	r2, [r3, #16]
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800278a:	429a      	cmp	r2, r3
 800278c:	dd03      	ble.n	8002796 <BEMF_PLL_Step+0x194>
		o->integ_q31 = o->integ_max_q31;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	611a      	str	r2, [r3, #16]
	if (o->integ_q31 < o->integ_min_q31)
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	691a      	ldr	r2, [r3, #16]
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800279e:	429a      	cmp	r2, r3
 80027a0:	da03      	bge.n	80027aa <BEMF_PLL_Step+0x1a8>
		o->integ_q31 = o->integ_min_q31;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	611a      	str	r2, [r3, #16]

	int32_t prop = q31_mul(o->kp_q31, eps);
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	6a39      	ldr	r1, [r7, #32]
 80027b0:	4618      	mov	r0, r3
 80027b2:	f7ff fe09 	bl	80023c8 <q31_mul>
 80027b6:	61f8      	str	r0, [r7, #28]
	int32_t domega = q31_add_sat(prop, o->integ_q31);
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	691b      	ldr	r3, [r3, #16]
 80027bc:	4619      	mov	r1, r3
 80027be:	69f8      	ldr	r0, [r7, #28]
 80027c0:	f7ff fe90 	bl	80024e4 <q31_add_sat>
 80027c4:	61b8      	str	r0, [r7, #24]
	o->omega_q31 = q31_add_sat(o->omega_q31, domega);
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	69b9      	ldr	r1, [r7, #24]
 80027cc:	4618      	mov	r0, r3
 80027ce:	f7ff fe89 	bl	80024e4 <q31_add_sat>
 80027d2:	4602      	mov	r2, r0
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	605a      	str	r2, [r3, #4]

	if (o->omega_q31 > o->omega_max_q31)
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	685a      	ldr	r2, [r3, #4]
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027e0:	429a      	cmp	r2, r3
 80027e2:	dd03      	ble.n	80027ec <BEMF_PLL_Step+0x1ea>
		o->omega_q31 = o->omega_max_q31;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	605a      	str	r2, [r3, #4]
}
 80027ec:	bf00      	nop
 80027ee:	3764      	adds	r7, #100	@ 0x64
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd90      	pop	{r4, r7, pc}

080027f4 <ENC_Init>:

#include "encoder.h"

// ---- 初期化 ----
void ENC_Init(Encoder_t *enc, int32_t step_q31, int32_t min_q31, int32_t max_q31)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b085      	sub	sp, #20
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	60f8      	str	r0, [r7, #12]
 80027fc:	60b9      	str	r1, [r7, #8]
 80027fe:	607a      	str	r2, [r7, #4]
 8002800:	603b      	str	r3, [r7, #0]
    enc->a = 0;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	2200      	movs	r2, #0
 8002806:	701a      	strb	r2, [r3, #0]
    enc->b = 0;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	2200      	movs	r2, #0
 800280c:	705a      	strb	r2, [r3, #1]
    enc->prev_state = 0;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	2200      	movs	r2, #0
 8002812:	709a      	strb	r2, [r3, #2]
    enc->counter = 0;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	2200      	movs	r2, #0
 8002818:	605a      	str	r2, [r3, #4]
    enc->filt_counter = 0;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	2200      	movs	r2, #0
 800281e:	609a      	str	r2, [r3, #8]
    enc->step_q31 = step_q31;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	68ba      	ldr	r2, [r7, #8]
 8002824:	60da      	str	r2, [r3, #12]
    enc->min_q31 = min_q31;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	687a      	ldr	r2, [r7, #4]
 800282a:	611a      	str	r2, [r3, #16]
    enc->max_q31 = max_q31;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	683a      	ldr	r2, [r7, #0]
 8002830:	615a      	str	r2, [r3, #20]
    enc->current_q31 = 0;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	2200      	movs	r2, #0
 8002836:	619a      	str	r2, [r3, #24]
    enc->stable_count = 0;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	2200      	movs	r2, #0
 800283c:	771a      	strb	r2, [r3, #28]
    enc->debounce = 0;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	2200      	movs	r2, #0
 8002842:	775a      	strb	r2, [r3, #29]
}
 8002844:	bf00      	nop
 8002846:	3714      	adds	r7, #20
 8002848:	46bd      	mov	sp, r7
 800284a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284e:	4770      	bx	lr

08002850 <ENC_Scan>:

// ---- A/B入力から回転方向を算出する ----
// 呼び出し周期: 約1〜2ms（タイマ割り込み内）
void ENC_Scan(Encoder_t *enc, uint8_t pin_a, uint8_t pin_b)
{
 8002850:	b480      	push	{r7}
 8002852:	b085      	sub	sp, #20
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
 8002858:	460b      	mov	r3, r1
 800285a:	70fb      	strb	r3, [r7, #3]
 800285c:	4613      	mov	r3, r2
 800285e:	70bb      	strb	r3, [r7, #2]
	static uint8_t buff0 = 0, buff1 = 0, buff2 = 0, buff3 = 0;
    uint8_t ab = ((pin_a ? 0 : 1) << 1) | (pin_b ? 0 : 1);
 8002860:	78fb      	ldrb	r3, [r7, #3]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d101      	bne.n	800286a <ENC_Scan+0x1a>
 8002866:	2202      	movs	r2, #2
 8002868:	e000      	b.n	800286c <ENC_Scan+0x1c>
 800286a:	2200      	movs	r2, #0
 800286c:	78bb      	ldrb	r3, [r7, #2]
 800286e:	2b00      	cmp	r3, #0
 8002870:	bf0c      	ite	eq
 8002872:	2301      	moveq	r3, #1
 8002874:	2300      	movne	r3, #0
 8002876:	b2db      	uxtb	r3, r3
 8002878:	b25b      	sxtb	r3, r3
 800287a:	4313      	orrs	r3, r2
 800287c:	b25b      	sxtb	r3, r3
 800287e:	73fb      	strb	r3, [r7, #15]
    uint8_t prev = buff1;
 8002880:	4b2f      	ldr	r3, [pc, #188]	@ (8002940 <ENC_Scan+0xf0>)
 8002882:	781b      	ldrb	r3, [r3, #0]
 8002884:	73bb      	strb	r3, [r7, #14]

    buff0 = ab;
 8002886:	4a2f      	ldr	r2, [pc, #188]	@ (8002944 <ENC_Scan+0xf4>)
 8002888:	7bfb      	ldrb	r3, [r7, #15]
 800288a:	7013      	strb	r3, [r2, #0]
    buff2 &= (buff1 | buff0);
 800288c:	4b2c      	ldr	r3, [pc, #176]	@ (8002940 <ENC_Scan+0xf0>)
 800288e:	781a      	ldrb	r2, [r3, #0]
 8002890:	4b2c      	ldr	r3, [pc, #176]	@ (8002944 <ENC_Scan+0xf4>)
 8002892:	781b      	ldrb	r3, [r3, #0]
 8002894:	4313      	orrs	r3, r2
 8002896:	b2da      	uxtb	r2, r3
 8002898:	4b2b      	ldr	r3, [pc, #172]	@ (8002948 <ENC_Scan+0xf8>)
 800289a:	781b      	ldrb	r3, [r3, #0]
 800289c:	4013      	ands	r3, r2
 800289e:	b2da      	uxtb	r2, r3
 80028a0:	4b29      	ldr	r3, [pc, #164]	@ (8002948 <ENC_Scan+0xf8>)
 80028a2:	701a      	strb	r2, [r3, #0]
    buff2 |= (buff1 & buff0);
 80028a4:	4b26      	ldr	r3, [pc, #152]	@ (8002940 <ENC_Scan+0xf0>)
 80028a6:	781a      	ldrb	r2, [r3, #0]
 80028a8:	4b26      	ldr	r3, [pc, #152]	@ (8002944 <ENC_Scan+0xf4>)
 80028aa:	781b      	ldrb	r3, [r3, #0]
 80028ac:	4013      	ands	r3, r2
 80028ae:	b2da      	uxtb	r2, r3
 80028b0:	4b25      	ldr	r3, [pc, #148]	@ (8002948 <ENC_Scan+0xf8>)
 80028b2:	781b      	ldrb	r3, [r3, #0]
 80028b4:	4313      	orrs	r3, r2
 80028b6:	b2da      	uxtb	r2, r3
 80028b8:	4b23      	ldr	r3, [pc, #140]	@ (8002948 <ENC_Scan+0xf8>)
 80028ba:	701a      	strb	r2, [r3, #0]
    buff1 = buff0;
 80028bc:	4b21      	ldr	r3, [pc, #132]	@ (8002944 <ENC_Scan+0xf4>)
 80028be:	781a      	ldrb	r2, [r3, #0]
 80028c0:	4b1f      	ldr	r3, [pc, #124]	@ (8002940 <ENC_Scan+0xf0>)
 80028c2:	701a      	strb	r2, [r3, #0]
    buff3 &= (buff2 | buff1);
 80028c4:	4b20      	ldr	r3, [pc, #128]	@ (8002948 <ENC_Scan+0xf8>)
 80028c6:	781a      	ldrb	r2, [r3, #0]
 80028c8:	4b1d      	ldr	r3, [pc, #116]	@ (8002940 <ENC_Scan+0xf0>)
 80028ca:	781b      	ldrb	r3, [r3, #0]
 80028cc:	4313      	orrs	r3, r2
 80028ce:	b2da      	uxtb	r2, r3
 80028d0:	4b1e      	ldr	r3, [pc, #120]	@ (800294c <ENC_Scan+0xfc>)
 80028d2:	781b      	ldrb	r3, [r3, #0]
 80028d4:	4013      	ands	r3, r2
 80028d6:	b2da      	uxtb	r2, r3
 80028d8:	4b1c      	ldr	r3, [pc, #112]	@ (800294c <ENC_Scan+0xfc>)
 80028da:	701a      	strb	r2, [r3, #0]
    buff3 |= (buff2 & buff1);
 80028dc:	4b1a      	ldr	r3, [pc, #104]	@ (8002948 <ENC_Scan+0xf8>)
 80028de:	781a      	ldrb	r2, [r3, #0]
 80028e0:	4b17      	ldr	r3, [pc, #92]	@ (8002940 <ENC_Scan+0xf0>)
 80028e2:	781b      	ldrb	r3, [r3, #0]
 80028e4:	4013      	ands	r3, r2
 80028e6:	b2da      	uxtb	r2, r3
 80028e8:	4b18      	ldr	r3, [pc, #96]	@ (800294c <ENC_Scan+0xfc>)
 80028ea:	781b      	ldrb	r3, [r3, #0]
 80028ec:	4313      	orrs	r3, r2
 80028ee:	b2da      	uxtb	r2, r3
 80028f0:	4b16      	ldr	r3, [pc, #88]	@ (800294c <ENC_Scan+0xfc>)
 80028f2:	701a      	strb	r2, [r3, #0]
    buff2 = buff1;
 80028f4:	4b12      	ldr	r3, [pc, #72]	@ (8002940 <ENC_Scan+0xf0>)
 80028f6:	781a      	ldrb	r2, [r3, #0]
 80028f8:	4b13      	ldr	r3, [pc, #76]	@ (8002948 <ENC_Scan+0xf8>)
 80028fa:	701a      	strb	r2, [r3, #0]


    if(prev != buff3)
 80028fc:	4b13      	ldr	r3, [pc, #76]	@ (800294c <ENC_Scan+0xfc>)
 80028fe:	781b      	ldrb	r3, [r3, #0]
 8002900:	7bba      	ldrb	r2, [r7, #14]
 8002902:	429a      	cmp	r2, r3
 8002904:	d016      	beq.n	8002934 <ENC_Scan+0xe4>
    {
    	if((buff3 & 1) != 0)
 8002906:	4b11      	ldr	r3, [pc, #68]	@ (800294c <ENC_Scan+0xfc>)
 8002908:	781b      	ldrb	r3, [r3, #0]
 800290a:	f003 0301 	and.w	r3, r3, #1
 800290e:	2b00      	cmp	r3, #0
 8002910:	d010      	beq.n	8002934 <ENC_Scan+0xe4>
    	{
    		if((buff3 & 2) != 0)
 8002912:	4b0e      	ldr	r3, [pc, #56]	@ (800294c <ENC_Scan+0xfc>)
 8002914:	781b      	ldrb	r3, [r3, #0]
 8002916:	f003 0302 	and.w	r3, r3, #2
 800291a:	2b00      	cmp	r3, #0
 800291c:	d005      	beq.n	800292a <ENC_Scan+0xda>
    		{
    			enc->counter++;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	1c5a      	adds	r2, r3, #1
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	605a      	str	r2, [r3, #4]
    		{
    			enc->counter--;
    		}
    	}
    }
}
 8002928:	e004      	b.n	8002934 <ENC_Scan+0xe4>
    			enc->counter--;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	1e5a      	subs	r2, r3, #1
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	605a      	str	r2, [r3, #4]
}
 8002934:	bf00      	nop
 8002936:	3714      	adds	r7, #20
 8002938:	46bd      	mov	sp, r7
 800293a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293e:	4770      	bx	lr
 8002940:	200002c4 	.word	0x200002c4
 8002944:	200002c5 	.word	0x200002c5
 8002948:	200002c6 	.word	0x200002c6
 800294c:	200002c7 	.word	0x200002c7

08002950 <ENC_Update>:

// ---- カウント値からQ31出力へ更新 ----
void ENC_Update(Encoder_t *enc)
{
 8002950:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 8002954:	b087      	sub	sp, #28
 8002956:	af00      	add	r7, sp, #0
 8002958:	6078      	str	r0, [r7, #4]
    // LPFで滑らかにする（フィルタ係数 α=1/8 固定）
    int32_t diff = enc->counter - enc->filt_counter;
 800295a:	6879      	ldr	r1, [r7, #4]
 800295c:	6848      	ldr	r0, [r1, #4]
 800295e:	6879      	ldr	r1, [r7, #4]
 8002960:	6889      	ldr	r1, [r1, #8]
 8002962:	1a41      	subs	r1, r0, r1
 8002964:	6139      	str	r1, [r7, #16]
    enc->filt_counter += diff >> 3;
 8002966:	6879      	ldr	r1, [r7, #4]
 8002968:	6888      	ldr	r0, [r1, #8]
 800296a:	6939      	ldr	r1, [r7, #16]
 800296c:	10c9      	asrs	r1, r1, #3
 800296e:	4408      	add	r0, r1
 8002970:	6879      	ldr	r1, [r7, #4]
 8002972:	6088      	str	r0, [r1, #8]

    // Q31正規化：1クリックあたり step_q31 増減
    int64_t tmp = (int64_t)enc->filt_counter * (int64_t)enc->step_q31;
 8002974:	6879      	ldr	r1, [r7, #4]
 8002976:	6889      	ldr	r1, [r1, #8]
 8002978:	17c8      	asrs	r0, r1, #31
 800297a:	4688      	mov	r8, r1
 800297c:	4681      	mov	r9, r0
 800297e:	6879      	ldr	r1, [r7, #4]
 8002980:	68c9      	ldr	r1, [r1, #12]
 8002982:	17c8      	asrs	r0, r1, #31
 8002984:	460c      	mov	r4, r1
 8002986:	4605      	mov	r5, r0
 8002988:	fb04 f009 	mul.w	r0, r4, r9
 800298c:	fb08 f105 	mul.w	r1, r8, r5
 8002990:	4401      	add	r1, r0
 8002992:	fba8 2304 	umull	r2, r3, r8, r4
 8002996:	4419      	add	r1, r3
 8002998:	460b      	mov	r3, r1
 800299a:	e9c7 2302 	strd	r2, r3, [r7, #8]
 800299e:	e9c7 2302 	strd	r2, r3, [r7, #8]
    int32_t q31_val = (int32_t)tmp;
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	617b      	str	r3, [r7, #20]

    if (q31_val > enc->max_q31) q31_val = enc->max_q31;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	695b      	ldr	r3, [r3, #20]
 80029aa:	697a      	ldr	r2, [r7, #20]
 80029ac:	429a      	cmp	r2, r3
 80029ae:	dd02      	ble.n	80029b6 <ENC_Update+0x66>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	695b      	ldr	r3, [r3, #20]
 80029b4:	617b      	str	r3, [r7, #20]
    if (q31_val < enc->min_q31) q31_val = enc->min_q31;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	691b      	ldr	r3, [r3, #16]
 80029ba:	697a      	ldr	r2, [r7, #20]
 80029bc:	429a      	cmp	r2, r3
 80029be:	da02      	bge.n	80029c6 <ENC_Update+0x76>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	691b      	ldr	r3, [r3, #16]
 80029c4:	617b      	str	r3, [r7, #20]

    enc->current_q31 = q31_val;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	697a      	ldr	r2, [r7, #20]
 80029ca:	619a      	str	r2, [r3, #24]
}
 80029cc:	bf00      	nop
 80029ce:	371c      	adds	r7, #28
 80029d0:	46bd      	mov	sp, r7
 80029d2:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 80029d6:	4770      	bx	lr

080029d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029d8:	b480      	push	{r7}
 80029da:	b083      	sub	sp, #12
 80029dc:	af00      	add	r7, sp, #0
 80029de:	4603      	mov	r3, r0
 80029e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	db0b      	blt.n	8002a02 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029ea:	79fb      	ldrb	r3, [r7, #7]
 80029ec:	f003 021f 	and.w	r2, r3, #31
 80029f0:	4907      	ldr	r1, [pc, #28]	@ (8002a10 <__NVIC_EnableIRQ+0x38>)
 80029f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029f6:	095b      	lsrs	r3, r3, #5
 80029f8:	2001      	movs	r0, #1
 80029fa:	fa00 f202 	lsl.w	r2, r0, r2
 80029fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002a02:	bf00      	nop
 8002a04:	370c      	adds	r7, #12
 8002a06:	46bd      	mov	sp, r7
 8002a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0c:	4770      	bx	lr
 8002a0e:	bf00      	nop
 8002a10:	e000e100 	.word	0xe000e100

08002a14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b083      	sub	sp, #12
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	6039      	str	r1, [r7, #0]
 8002a1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	db0a      	blt.n	8002a3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	b2da      	uxtb	r2, r3
 8002a2c:	490c      	ldr	r1, [pc, #48]	@ (8002a60 <__NVIC_SetPriority+0x4c>)
 8002a2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a32:	0112      	lsls	r2, r2, #4
 8002a34:	b2d2      	uxtb	r2, r2
 8002a36:	440b      	add	r3, r1
 8002a38:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a3c:	e00a      	b.n	8002a54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	b2da      	uxtb	r2, r3
 8002a42:	4908      	ldr	r1, [pc, #32]	@ (8002a64 <__NVIC_SetPriority+0x50>)
 8002a44:	79fb      	ldrb	r3, [r7, #7]
 8002a46:	f003 030f 	and.w	r3, r3, #15
 8002a4a:	3b04      	subs	r3, #4
 8002a4c:	0112      	lsls	r2, r2, #4
 8002a4e:	b2d2      	uxtb	r2, r2
 8002a50:	440b      	add	r3, r1
 8002a52:	761a      	strb	r2, [r3, #24]
}
 8002a54:	bf00      	nop
 8002a56:	370c      	adds	r7, #12
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5e:	4770      	bx	lr
 8002a60:	e000e100 	.word	0xe000e100
 8002a64:	e000ed00 	.word	0xe000ed00

08002a68 <FW_InitClocksAndGPIO>:

volatile uint8_t count_flag = 0;
Encoder_t s_enc;

void FW_InitClocksAndGPIO(void)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	af00      	add	r7, sp, #0
	FW_InitClock();
 8002a6c:	f000 f81a 	bl	8002aa4 <FW_InitClock>
	FW_InitGPIO();
 8002a70:	f000 f894 	bl	8002b9c <FW_InitGPIO>

	RCC->APB2ENR |= RCC_APB2ENR_TIM1EN | RCC_APB2ENR_ADC1EN;
 8002a74:	4b0a      	ldr	r3, [pc, #40]	@ (8002aa0 <FW_InitClocksAndGPIO+0x38>)
 8002a76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a78:	4a09      	ldr	r2, [pc, #36]	@ (8002aa0 <FW_InitClocksAndGPIO+0x38>)
 8002a7a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a7e:	f043 0301 	orr.w	r3, r3, #1
 8002a82:	6453      	str	r3, [r2, #68]	@ 0x44
	RCC->AHB1ENR |= RCC_AHB1ENR_DMA2EN;
 8002a84:	4b06      	ldr	r3, [pc, #24]	@ (8002aa0 <FW_InitClocksAndGPIO+0x38>)
 8002a86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a88:	4a05      	ldr	r2, [pc, #20]	@ (8002aa0 <FW_InitClocksAndGPIO+0x38>)
 8002a8a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002a8e:	6313      	str	r3, [r2, #48]	@ 0x30
	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN | RCC_APB1ENR_TIM3EN | RCC_APB1ENR_TIM7EN;
 8002a90:	4b03      	ldr	r3, [pc, #12]	@ (8002aa0 <FW_InitClocksAndGPIO+0x38>)
 8002a92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a94:	4a02      	ldr	r2, [pc, #8]	@ (8002aa0 <FW_InitClocksAndGPIO+0x38>)
 8002a96:	f043 0323 	orr.w	r3, r3, #35	@ 0x23
 8002a9a:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8002a9c:	bf00      	nop
 8002a9e:	bd80      	pop	{r7, pc}
 8002aa0:	40023800 	.word	0x40023800

08002aa4 <FW_InitClock>:

void FW_InitClock(void)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b082      	sub	sp, #8
 8002aa8:	af00      	add	r7, sp, #0
	RCC->CR |= RCC_CR_HSEON;
 8002aaa:	4b3b      	ldr	r3, [pc, #236]	@ (8002b98 <FW_InitClock+0xf4>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a3a      	ldr	r2, [pc, #232]	@ (8002b98 <FW_InitClock+0xf4>)
 8002ab0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ab4:	6013      	str	r3, [r2, #0]
	while((RCC->CR) & RCC_CR_HSERDY)
 8002ab6:	bf00      	nop
 8002ab8:	4b37      	ldr	r3, [pc, #220]	@ (8002b98 <FW_InitClock+0xf4>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d1f9      	bne.n	8002ab8 <FW_InitClock+0x14>
	{
		// 何もしない
	}

	RCC->PLLCFGR |= RCC_PLLCFGR_PLLSRC;
 8002ac4:	4b34      	ldr	r3, [pc, #208]	@ (8002b98 <FW_InitClock+0xf4>)
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	4a33      	ldr	r2, [pc, #204]	@ (8002b98 <FW_InitClock+0xf4>)
 8002aca:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002ace:	6053      	str	r3, [r2, #4]

	RCC->PLLCFGR &= (~(63 << RCC_PLLCFGR_PLLM_Pos));
 8002ad0:	4b31      	ldr	r3, [pc, #196]	@ (8002b98 <FW_InitClock+0xf4>)
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	4a30      	ldr	r2, [pc, #192]	@ (8002b98 <FW_InitClock+0xf4>)
 8002ad6:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002ada:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= (12 << RCC_PLLCFGR_PLLM_Pos);
 8002adc:	4b2e      	ldr	r3, [pc, #184]	@ (8002b98 <FW_InitClock+0xf4>)
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	4a2d      	ldr	r2, [pc, #180]	@ (8002b98 <FW_InitClock+0xf4>)
 8002ae2:	f043 030c 	orr.w	r3, r3, #12
 8002ae6:	6053      	str	r3, [r2, #4]

	RCC->PLLCFGR &= (~(511 << RCC_PLLCFGR_PLLN_Pos));
 8002ae8:	4b2b      	ldr	r3, [pc, #172]	@ (8002b98 <FW_InitClock+0xf4>)
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	4a2a      	ldr	r2, [pc, #168]	@ (8002b98 <FW_InitClock+0xf4>)
 8002aee:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8002af2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002af6:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= (168 << RCC_PLLCFGR_PLLN_Pos);
 8002af8:	4b27      	ldr	r3, [pc, #156]	@ (8002b98 <FW_InitClock+0xf4>)
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	4a26      	ldr	r2, [pc, #152]	@ (8002b98 <FW_InitClock+0xf4>)
 8002afe:	f443 5328 	orr.w	r3, r3, #10752	@ 0x2a00
 8002b02:	6053      	str	r3, [r2, #4]

	RCC->PLLCFGR &= (3 << RCC_PLLCFGR_PLLP_Pos);
 8002b04:	4b24      	ldr	r3, [pc, #144]	@ (8002b98 <FW_InitClock+0xf4>)
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	4a23      	ldr	r2, [pc, #140]	@ (8002b98 <FW_InitClock+0xf4>)
 8002b0a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002b0e:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= (0 << RCC_PLLCFGR_PLLP_Pos);
 8002b10:	4b21      	ldr	r3, [pc, #132]	@ (8002b98 <FW_InitClock+0xf4>)
 8002b12:	4a21      	ldr	r2, [pc, #132]	@ (8002b98 <FW_InitClock+0xf4>)
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	6053      	str	r3, [r2, #4]

	RCC->PLLCFGR &= (~(15 << RCC_PLLCFGR_PLLQ_Pos));
 8002b18:	4b1f      	ldr	r3, [pc, #124]	@ (8002b98 <FW_InitClock+0xf4>)
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	4a1e      	ldr	r2, [pc, #120]	@ (8002b98 <FW_InitClock+0xf4>)
 8002b1e:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 8002b22:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= (7 << RCC_PLLCFGR_PLLQ_Pos);
 8002b24:	4b1c      	ldr	r3, [pc, #112]	@ (8002b98 <FW_InitClock+0xf4>)
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	4a1b      	ldr	r2, [pc, #108]	@ (8002b98 <FW_InitClock+0xf4>)
 8002b2a:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8002b2e:	6053      	str	r3, [r2, #4]

	RCC->CFGR |= (5 << RCC_CFGR_PPRE1_Pos);	// 4分周
 8002b30:	4b19      	ldr	r3, [pc, #100]	@ (8002b98 <FW_InitClock+0xf4>)
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	4a18      	ldr	r2, [pc, #96]	@ (8002b98 <FW_InitClock+0xf4>)
 8002b36:	f443 53a0 	orr.w	r3, r3, #5120	@ 0x1400
 8002b3a:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= (4 << RCC_CFGR_PPRE2_Pos);	// 2分周
 8002b3c:	4b16      	ldr	r3, [pc, #88]	@ (8002b98 <FW_InitClock+0xf4>)
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	4a15      	ldr	r2, [pc, #84]	@ (8002b98 <FW_InitClock+0xf4>)
 8002b42:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002b46:	6093      	str	r3, [r2, #8]

	RCC->CR |= RCC_CR_PLLON;
 8002b48:	4b13      	ldr	r3, [pc, #76]	@ (8002b98 <FW_InitClock+0xf4>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a12      	ldr	r2, [pc, #72]	@ (8002b98 <FW_InitClock+0xf4>)
 8002b4e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002b52:	6013      	str	r3, [r2, #0]
	while((RCC->CR) & RCC_CR_PLLRDY)
 8002b54:	bf00      	nop
 8002b56:	4b10      	ldr	r3, [pc, #64]	@ (8002b98 <FW_InitClock+0xf4>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d1f9      	bne.n	8002b56 <FW_InitClock+0xb2>
	{
		// 何もしない
	}

	uint32_t tmp = (RCC->CFGR);
 8002b62:	4b0d      	ldr	r3, [pc, #52]	@ (8002b98 <FW_InitClock+0xf4>)
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	607b      	str	r3, [r7, #4]
	tmp &= (~(RCC_CFGR_SW_Msk));
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	f023 0303 	bic.w	r3, r3, #3
 8002b6e:	607b      	str	r3, [r7, #4]
	tmp |= (RCC_CFGR_SW_PLL);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	f043 0302 	orr.w	r3, r3, #2
 8002b76:	607b      	str	r3, [r7, #4]
	RCC->CFGR = tmp;
 8002b78:	4a07      	ldr	r2, [pc, #28]	@ (8002b98 <FW_InitClock+0xf4>)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6093      	str	r3, [r2, #8]
	while(((RCC->CFGR) & RCC_CFGR_SWS) == RCC_CFGR_SWS_PLL)
 8002b7e:	bf00      	nop
 8002b80:	4b05      	ldr	r3, [pc, #20]	@ (8002b98 <FW_InitClock+0xf4>)
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	f003 030c 	and.w	r3, r3, #12
 8002b88:	2b08      	cmp	r3, #8
 8002b8a:	d0f9      	beq.n	8002b80 <FW_InitClock+0xdc>
	{
		// 何もしない
	}

	SystemCoreClockUpdate();
 8002b8c:	f7fe fa04 	bl	8000f98 <SystemCoreClockUpdate>
}
 8002b90:	bf00      	nop
 8002b92:	3708      	adds	r7, #8
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}
 8002b98:	40023800 	.word	0x40023800

08002b9c <FW_InitGPIO>:

void FW_InitGPIO(void)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOAEN | RCC_AHB1ENR_GPIOBEN |
 8002ba0:	4b15      	ldr	r3, [pc, #84]	@ (8002bf8 <FW_InitGPIO+0x5c>)
 8002ba2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ba4:	4a14      	ldr	r2, [pc, #80]	@ (8002bf8 <FW_InitGPIO+0x5c>)
 8002ba6:	f043 030b 	orr.w	r3, r3, #11
 8002baa:	6313      	str	r3, [r2, #48]	@ 0x30
			RCC_AHB1ENR_GPIODEN);

	GPIOA->MODER = 0x282Affff;
 8002bac:	4b13      	ldr	r3, [pc, #76]	@ (8002bfc <FW_InitGPIO+0x60>)
 8002bae:	4a14      	ldr	r2, [pc, #80]	@ (8002c00 <FW_InitGPIO+0x64>)
 8002bb0:	601a      	str	r2, [r3, #0]
	GPIOA->OSPEEDR = 0x0C3F0000;
 8002bb2:	4b12      	ldr	r3, [pc, #72]	@ (8002bfc <FW_InitGPIO+0x60>)
 8002bb4:	4a13      	ldr	r2, [pc, #76]	@ (8002c04 <FW_InitGPIO+0x68>)
 8002bb6:	609a      	str	r2, [r3, #8]
	GPIOA->AFR[0] = 0x00000000;
 8002bb8:	4b10      	ldr	r3, [pc, #64]	@ (8002bfc <FW_InitGPIO+0x60>)
 8002bba:	2200      	movs	r2, #0
 8002bbc:	621a      	str	r2, [r3, #32]
	GPIOA->AFR[1] = 0x00000111;
 8002bbe:	4b0f      	ldr	r3, [pc, #60]	@ (8002bfc <FW_InitGPIO+0x60>)
 8002bc0:	f240 1211 	movw	r2, #273	@ 0x111
 8002bc4:	625a      	str	r2, [r3, #36]	@ 0x24

	GPIOB->MODER = 0xA800A003;
 8002bc6:	4b10      	ldr	r3, [pc, #64]	@ (8002c08 <FW_InitGPIO+0x6c>)
 8002bc8:	4a10      	ldr	r2, [pc, #64]	@ (8002c0c <FW_InitGPIO+0x70>)
 8002bca:	601a      	str	r2, [r3, #0]
	GPIOB->OSPEEDR = 0xFC003000;
 8002bcc:	4b0e      	ldr	r3, [pc, #56]	@ (8002c08 <FW_InitGPIO+0x6c>)
 8002bce:	4a10      	ldr	r2, [pc, #64]	@ (8002c10 <FW_InitGPIO+0x74>)
 8002bd0:	609a      	str	r2, [r3, #8]
	GPIOB->AFR[0] = 0x77000000;
 8002bd2:	4b0d      	ldr	r3, [pc, #52]	@ (8002c08 <FW_InitGPIO+0x6c>)
 8002bd4:	f04f 42ee 	mov.w	r2, #1996488704	@ 0x77000000
 8002bd8:	621a      	str	r2, [r3, #32]
	GPIOB->AFR[1] = 0x11100000;
 8002bda:	4b0b      	ldr	r3, [pc, #44]	@ (8002c08 <FW_InitGPIO+0x6c>)
 8002bdc:	4a0d      	ldr	r2, [pc, #52]	@ (8002c14 <FW_InitGPIO+0x78>)
 8002bde:	625a      	str	r2, [r3, #36]	@ 0x24

	GPIOD->MODER = 0x00000010;
 8002be0:	4b0d      	ldr	r3, [pc, #52]	@ (8002c18 <FW_InitGPIO+0x7c>)
 8002be2:	2210      	movs	r2, #16
 8002be4:	601a      	str	r2, [r3, #0]
	GPIOD->OSPEEDR = 0x00000000;
 8002be6:	4b0c      	ldr	r3, [pc, #48]	@ (8002c18 <FW_InitGPIO+0x7c>)
 8002be8:	2200      	movs	r2, #0
 8002bea:	609a      	str	r2, [r3, #8]
}
 8002bec:	bf00      	nop
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf4:	4770      	bx	lr
 8002bf6:	bf00      	nop
 8002bf8:	40023800 	.word	0x40023800
 8002bfc:	40020000 	.word	0x40020000
 8002c00:	282affff 	.word	0x282affff
 8002c04:	0c3f0000 	.word	0x0c3f0000
 8002c08:	40020400 	.word	0x40020400
 8002c0c:	a800a003 	.word	0xa800a003
 8002c10:	fc003000 	.word	0xfc003000
 8002c14:	11100000 	.word	0x11100000
 8002c18:	40020c00 	.word	0x40020c00

08002c1c <FW_TIM1_InitPWM>:

void FW_TIM1_InitPWM(void)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	af00      	add	r7, sp, #0
	TIM1->PSC = 0;
 8002c20:	4b48      	ldr	r3, [pc, #288]	@ (8002d44 <FW_TIM1_InitPWM+0x128>)
 8002c22:	2200      	movs	r2, #0
 8002c24:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM1->ARR = TIM1_ARR;
 8002c26:	4b47      	ldr	r3, [pc, #284]	@ (8002d44 <FW_TIM1_InitPWM+0x128>)
 8002c28:	f640 729f 	movw	r2, #3999	@ 0xf9f
 8002c2c:	62da      	str	r2, [r3, #44]	@ 0x2c

	TIM1->CR1 &= ~TIM_CR1_DIR;
 8002c2e:	4b45      	ldr	r3, [pc, #276]	@ (8002d44 <FW_TIM1_InitPWM+0x128>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a44      	ldr	r2, [pc, #272]	@ (8002d44 <FW_TIM1_InitPWM+0x128>)
 8002c34:	f023 0310 	bic.w	r3, r3, #16
 8002c38:	6013      	str	r3, [r2, #0]
	TIM1->CR1 &= ~TIM_CR1_CMS;
 8002c3a:	4b42      	ldr	r3, [pc, #264]	@ (8002d44 <FW_TIM1_InitPWM+0x128>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a41      	ldr	r2, [pc, #260]	@ (8002d44 <FW_TIM1_InitPWM+0x128>)
 8002c40:	f023 0360 	bic.w	r3, r3, #96	@ 0x60
 8002c44:	6013      	str	r3, [r2, #0]
	TIM1->CR1 |= (1 << TIM_CR1_CMS_Pos); // center-aligned mode 1
 8002c46:	4b3f      	ldr	r3, [pc, #252]	@ (8002d44 <FW_TIM1_InitPWM+0x128>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a3e      	ldr	r2, [pc, #248]	@ (8002d44 <FW_TIM1_InitPWM+0x128>)
 8002c4c:	f043 0320 	orr.w	r3, r3, #32
 8002c50:	6013      	str	r3, [r2, #0]
	TIM1->CR1 |= TIM_CR1_ARPE;
 8002c52:	4b3c      	ldr	r3, [pc, #240]	@ (8002d44 <FW_TIM1_InitPWM+0x128>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a3b      	ldr	r2, [pc, #236]	@ (8002d44 <FW_TIM1_InitPWM+0x128>)
 8002c58:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002c5c:	6013      	str	r3, [r2, #0]

	// 出力比較: CH1..3 = PWM1 + preload
	TIM1->CCMR1 = 0;
 8002c5e:	4b39      	ldr	r3, [pc, #228]	@ (8002d44 <FW_TIM1_InitPWM+0x128>)
 8002c60:	2200      	movs	r2, #0
 8002c62:	619a      	str	r2, [r3, #24]
	TIM1->CCMR1 |= (6<<TIM_CCMR1_OC1M_Pos)|TIM_CCMR1_OC1PE;
 8002c64:	4b37      	ldr	r3, [pc, #220]	@ (8002d44 <FW_TIM1_InitPWM+0x128>)
 8002c66:	699b      	ldr	r3, [r3, #24]
 8002c68:	4a36      	ldr	r2, [pc, #216]	@ (8002d44 <FW_TIM1_InitPWM+0x128>)
 8002c6a:	f043 0368 	orr.w	r3, r3, #104	@ 0x68
 8002c6e:	6193      	str	r3, [r2, #24]
	TIM1->CCMR1 |= (6<<TIM_CCMR1_OC2M_Pos)|TIM_CCMR1_OC2PE;
 8002c70:	4b34      	ldr	r3, [pc, #208]	@ (8002d44 <FW_TIM1_InitPWM+0x128>)
 8002c72:	699b      	ldr	r3, [r3, #24]
 8002c74:	4a33      	ldr	r2, [pc, #204]	@ (8002d44 <FW_TIM1_InitPWM+0x128>)
 8002c76:	f443 43d0 	orr.w	r3, r3, #26624	@ 0x6800
 8002c7a:	6193      	str	r3, [r2, #24]
	TIM1->CCMR2 = 0;
 8002c7c:	4b31      	ldr	r3, [pc, #196]	@ (8002d44 <FW_TIM1_InitPWM+0x128>)
 8002c7e:	2200      	movs	r2, #0
 8002c80:	61da      	str	r2, [r3, #28]
	TIM1->CCMR2 |= (6<<TIM_CCMR2_OC3M_Pos)|TIM_CCMR2_OC3PE;
 8002c82:	4b30      	ldr	r3, [pc, #192]	@ (8002d44 <FW_TIM1_InitPWM+0x128>)
 8002c84:	69db      	ldr	r3, [r3, #28]
 8002c86:	4a2f      	ldr	r2, [pc, #188]	@ (8002d44 <FW_TIM1_InitPWM+0x128>)
 8002c88:	f043 0368 	orr.w	r3, r3, #104	@ 0x68
 8002c8c:	61d3      	str	r3, [r2, #28]

	// CH4 は内部トリガ用 (OC4REF)。ピン出力は使わない＝CC4Eは後で0のまま。
	// ここでは強制アクティブ + preload で基準パルスを作る例
	TIM1->CCMR2 |= (7<<TIM_CCMR2_OC4M_Pos)|TIM_CCMR2_OC4PE;
 8002c8e:	4b2d      	ldr	r3, [pc, #180]	@ (8002d44 <FW_TIM1_InitPWM+0x128>)
 8002c90:	69db      	ldr	r3, [r3, #28]
 8002c92:	4a2c      	ldr	r2, [pc, #176]	@ (8002d44 <FW_TIM1_InitPWM+0x128>)
 8002c94:	f443 43f0 	orr.w	r3, r3, #30720	@ 0x7800
 8002c98:	61d3      	str	r3, [r2, #28]

	// デューティ初期値（50%で開始推奨）
	TIM1->CCR1 = TIM1_ARR/2;
 8002c9a:	4b2a      	ldr	r3, [pc, #168]	@ (8002d44 <FW_TIM1_InitPWM+0x128>)
 8002c9c:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8002ca0:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM1->CCR2 = TIM1_ARR/2;
 8002ca2:	4b28      	ldr	r3, [pc, #160]	@ (8002d44 <FW_TIM1_InitPWM+0x128>)
 8002ca4:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8002ca8:	639a      	str	r2, [r3, #56]	@ 0x38
	TIM1->CCR3 = TIM1_ARR/2;
 8002caa:	4b26      	ldr	r3, [pc, #152]	@ (8002d44 <FW_TIM1_InitPWM+0x128>)
 8002cac:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8002cb0:	63da      	str	r2, [r3, #60]	@ 0x3c

	// --- CCER: メイン＋コンプリメンタリを両方有効化 ---
	// 極性はまず非反転（H=ON）で開始。必要なら後述の「極性」参照。
	TIM1->CCER = 0;
 8002cb2:	4b24      	ldr	r3, [pc, #144]	@ (8002d44 <FW_TIM1_InitPWM+0x128>)
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	621a      	str	r2, [r3, #32]
        TIM1->CCER |= TIM_CCER_CC1E | TIM_CCER_CC1NE;  // CH1/CH1N
 8002cb8:	4b22      	ldr	r3, [pc, #136]	@ (8002d44 <FW_TIM1_InitPWM+0x128>)
 8002cba:	6a1b      	ldr	r3, [r3, #32]
 8002cbc:	4a21      	ldr	r2, [pc, #132]	@ (8002d44 <FW_TIM1_InitPWM+0x128>)
 8002cbe:	f043 0305 	orr.w	r3, r3, #5
 8002cc2:	6213      	str	r3, [r2, #32]
        TIM1->CCER |= TIM_CCER_CC2E | TIM_CCER_CC2NE;  // CH2/CH2N
 8002cc4:	4b1f      	ldr	r3, [pc, #124]	@ (8002d44 <FW_TIM1_InitPWM+0x128>)
 8002cc6:	6a1b      	ldr	r3, [r3, #32]
 8002cc8:	4a1e      	ldr	r2, [pc, #120]	@ (8002d44 <FW_TIM1_InitPWM+0x128>)
 8002cca:	f043 0350 	orr.w	r3, r3, #80	@ 0x50
 8002cce:	6213      	str	r3, [r2, #32]
        TIM1->CCER |= TIM_CCER_CC3E | TIM_CCER_CC3NE;  // CH3/CH3N
 8002cd0:	4b1c      	ldr	r3, [pc, #112]	@ (8002d44 <FW_TIM1_InitPWM+0x128>)
 8002cd2:	6a1b      	ldr	r3, [r3, #32]
 8002cd4:	4a1b      	ldr	r2, [pc, #108]	@ (8002d44 <FW_TIM1_InitPWM+0x128>)
 8002cd6:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 8002cda:	6213      	str	r3, [r2, #32]
        // CH4ピンは無効のまま（OC4REFは内部利用）
       /* 極性：アクティブロー（論理0=ON）に設定する */
       TIM1->CCER |= (TIM_CCER_CC1P | TIM_CCER_CC1NP
 8002cdc:	4b19      	ldr	r3, [pc, #100]	@ (8002d44 <FW_TIM1_InitPWM+0x128>)
 8002cde:	6a1b      	ldr	r3, [r3, #32]
 8002ce0:	4a18      	ldr	r2, [pc, #96]	@ (8002d44 <FW_TIM1_InitPWM+0x128>)
 8002ce2:	f443 632a 	orr.w	r3, r3, #2720	@ 0xaa0
 8002ce6:	f043 030a 	orr.w	r3, r3, #10
 8002cea:	6213      	str	r3, [r2, #32]
                   |  TIM_CCER_CC2P | TIM_CCER_CC2NP
                   |  TIM_CCER_CC3P | TIM_CCER_CC3NP);
       /* 停止時のアイドル出力も LOW=OFF へ統一（OISx=0/OISxN=0）*/
       TIM1->CR2 &= ~(TIM_CR2_OIS1|TIM_CR2_OIS1N|TIM_CR2_OIS2|TIM_CR2_OIS2N|TIM_CR2_OIS3|TIM_CR2_OIS3N);
 8002cec:	4b15      	ldr	r3, [pc, #84]	@ (8002d44 <FW_TIM1_InitPWM+0x128>)
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	4a14      	ldr	r2, [pc, #80]	@ (8002d44 <FW_TIM1_InitPWM+0x128>)
 8002cf2:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002cf6:	6053      	str	r3, [r2, #4]

        // --- TRGO: OC4REF を外部へ（TIM3ブリッジ・ADC用） ---
        TIM1->CR2 &= ~TIM_CR2_MMS;
 8002cf8:	4b12      	ldr	r3, [pc, #72]	@ (8002d44 <FW_TIM1_InitPWM+0x128>)
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	4a11      	ldr	r2, [pc, #68]	@ (8002d44 <FW_TIM1_InitPWM+0x128>)
 8002cfe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d02:	6053      	str	r3, [r2, #4]
        TIM1->CR2 |=  (7<<TIM_CR2_MMS_Pos);  // TRGO = OC4REF
 8002d04:	4b0f      	ldr	r3, [pc, #60]	@ (8002d44 <FW_TIM1_InitPWM+0x128>)
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	4a0e      	ldr	r2, [pc, #56]	@ (8002d44 <FW_TIM1_InitPWM+0x128>)
 8002d0a:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 8002d0e:	6053      	str	r3, [r2, #4]

	TIM1->BDTR = 0;
 8002d10:	4b0c      	ldr	r3, [pc, #48]	@ (8002d44 <FW_TIM1_InitPWM+0x128>)
 8002d12:	2200      	movs	r2, #0
 8002d14:	645a      	str	r2, [r3, #68]	@ 0x44
	TIM1->BDTR |= (DTG_TICKS << TIM_BDTR_DTG_Pos);
 8002d16:	4b0b      	ldr	r3, [pc, #44]	@ (8002d44 <FW_TIM1_InitPWM+0x128>)
 8002d18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d1a:	4a0a      	ldr	r2, [pc, #40]	@ (8002d44 <FW_TIM1_InitPWM+0x128>)
 8002d1c:	f043 033c 	orr.w	r3, r3, #60	@ 0x3c
 8002d20:	6453      	str	r3, [r2, #68]	@ 0x44
	TIM1->BDTR |= TIM_BDTR_OSSR | TIM_BDTR_OSSI;   // ★強く推奨（停止/ブレークでOISレベルを適用）
 8002d22:	4b08      	ldr	r3, [pc, #32]	@ (8002d44 <FW_TIM1_InitPWM+0x128>)
 8002d24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d26:	4a07      	ldr	r2, [pc, #28]	@ (8002d44 <FW_TIM1_InitPWM+0x128>)
 8002d28:	f443 6340 	orr.w	r3, r3, #3072	@ 0xc00
 8002d2c:	6453      	str	r3, [r2, #68]	@ 0x44

	TIM1->BDTR |= TIM_BDTR_MOE;
 8002d2e:	4b05      	ldr	r3, [pc, #20]	@ (8002d44 <FW_TIM1_InitPWM+0x128>)
 8002d30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d32:	4a04      	ldr	r2, [pc, #16]	@ (8002d44 <FW_TIM1_InitPWM+0x128>)
 8002d34:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002d38:	6453      	str	r3, [r2, #68]	@ 0x44
}
 8002d3a:	bf00      	nop
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d42:	4770      	bx	lr
 8002d44:	40010000 	.word	0x40010000

08002d48 <FW_TIM2_Init>:

void FW_TIM2_Init(void)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	af00      	add	r7, sp, #0
	TIM2->PSC = 8 - 1;
 8002d4c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002d50:	2207      	movs	r2, #7
 8002d52:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM2->ARR = 1000 - 1;
 8002d54:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002d58:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002d5c:	62da      	str	r2, [r3, #44]	@ 0x2c

	TIM2->DIER = 0x00000001;
 8002d5e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002d62:	2201      	movs	r2, #1
 8002d64:	60da      	str	r2, [r3, #12]

	NVIC_SetPriority(TIM2_IRQn, 0);
 8002d66:	2100      	movs	r1, #0
 8002d68:	201c      	movs	r0, #28
 8002d6a:	f7ff fe53 	bl	8002a14 <__NVIC_SetPriority>
	NVIC_EnableIRQ(TIM2_IRQn);
 8002d6e:	201c      	movs	r0, #28
 8002d70:	f7ff fe32 	bl	80029d8 <__NVIC_EnableIRQ>
}
 8002d74:	bf00      	nop
 8002d76:	bd80      	pop	{r7, pc}

08002d78 <FW_TIM3_InitBridge>:

void FW_TIM3_InitBridge(void)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	af00      	add	r7, sp, #0
	// TIM1: TRGO=OC4REF（firmware内のInjected初期化で設定）
	TIM3->PSC = 0;
 8002d7c:	4b16      	ldr	r3, [pc, #88]	@ (8002dd8 <FW_TIM3_InitBridge+0x60>)
 8002d7e:	2200      	movs	r2, #0
 8002d80:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM3->ARR = 1;
 8002d82:	4b15      	ldr	r3, [pc, #84]	@ (8002dd8 <FW_TIM3_InitBridge+0x60>)
 8002d84:	2201      	movs	r2, #1
 8002d86:	62da      	str	r2, [r3, #44]	@ 0x2c

	TIM3->SMCR &= ~(TIM_SMCR_TS | TIM_SMCR_SMS);
 8002d88:	4b13      	ldr	r3, [pc, #76]	@ (8002dd8 <FW_TIM3_InitBridge+0x60>)
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	4a12      	ldr	r2, [pc, #72]	@ (8002dd8 <FW_TIM3_InitBridge+0x60>)
 8002d8e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002d92:	6093      	str	r3, [r2, #8]
	TIM3->SMCR |= (0 << TIM_SMCR_TS_Pos); // TS = ITR0 (多くのF4で TIM1)
 8002d94:	4b10      	ldr	r3, [pc, #64]	@ (8002dd8 <FW_TIM3_InitBridge+0x60>)
 8002d96:	4a10      	ldr	r2, [pc, #64]	@ (8002dd8 <FW_TIM3_InitBridge+0x60>)
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	6093      	str	r3, [r2, #8]
	TIM3->SMCR |= (6 << TIM_SMCR_SMS_Pos); // Trigger mode: TRGI↑でUG
 8002d9c:	4b0e      	ldr	r3, [pc, #56]	@ (8002dd8 <FW_TIM3_InitBridge+0x60>)
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	4a0d      	ldr	r2, [pc, #52]	@ (8002dd8 <FW_TIM3_InitBridge+0x60>)
 8002da2:	f043 0306 	orr.w	r3, r3, #6
 8002da6:	6093      	str	r3, [r2, #8]

	TIM3->CR2 &= ~TIM_CR2_MMS;
 8002da8:	4b0b      	ldr	r3, [pc, #44]	@ (8002dd8 <FW_TIM3_InitBridge+0x60>)
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	4a0a      	ldr	r2, [pc, #40]	@ (8002dd8 <FW_TIM3_InitBridge+0x60>)
 8002dae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002db2:	6053      	str	r3, [r2, #4]
	TIM3->CR2 |= (2 << TIM_CR2_MMS_Pos); // TRGO=Update
 8002db4:	4b08      	ldr	r3, [pc, #32]	@ (8002dd8 <FW_TIM3_InitBridge+0x60>)
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	4a07      	ldr	r2, [pc, #28]	@ (8002dd8 <FW_TIM3_InitBridge+0x60>)
 8002dba:	f043 0320 	orr.w	r3, r3, #32
 8002dbe:	6053      	str	r3, [r2, #4]

	TIM3->EGR |= TIM_EGR_UG;
 8002dc0:	4b05      	ldr	r3, [pc, #20]	@ (8002dd8 <FW_TIM3_InitBridge+0x60>)
 8002dc2:	695b      	ldr	r3, [r3, #20]
 8002dc4:	4a04      	ldr	r2, [pc, #16]	@ (8002dd8 <FW_TIM3_InitBridge+0x60>)
 8002dc6:	f043 0301 	orr.w	r3, r3, #1
 8002dca:	6153      	str	r3, [r2, #20]
}
 8002dcc:	bf00      	nop
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd4:	4770      	bx	lr
 8002dd6:	bf00      	nop
 8002dd8:	40000400 	.word	0x40000400

08002ddc <FW_TIM7_Init>:

void FW_TIM7_Init(void)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	af00      	add	r7, sp, #0
	ENC_Init(&s_enc, ENC_STEP_Q31, ENC_MIN_Q31, ENC_MAX_Q31);
 8002de0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8002de4:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8002de8:	490b      	ldr	r1, [pc, #44]	@ (8002e18 <FW_TIM7_Init+0x3c>)
 8002dea:	480c      	ldr	r0, [pc, #48]	@ (8002e1c <FW_TIM7_Init+0x40>)
 8002dec:	f7ff fd02 	bl	80027f4 <ENC_Init>

	TIM7->PSC = 42 - 1;
 8002df0:	4b0b      	ldr	r3, [pc, #44]	@ (8002e20 <FW_TIM7_Init+0x44>)
 8002df2:	2229      	movs	r2, #41	@ 0x29
 8002df4:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM7->ARR = 1000 - 1;
 8002df6:	4b0a      	ldr	r3, [pc, #40]	@ (8002e20 <FW_TIM7_Init+0x44>)
 8002df8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002dfc:	62da      	str	r2, [r3, #44]	@ 0x2c

	TIM7->DIER = 0x00000001;
 8002dfe:	4b08      	ldr	r3, [pc, #32]	@ (8002e20 <FW_TIM7_Init+0x44>)
 8002e00:	2201      	movs	r2, #1
 8002e02:	60da      	str	r2, [r3, #12]

	NVIC_SetPriority(TIM7_IRQn, 0);
 8002e04:	2100      	movs	r1, #0
 8002e06:	2037      	movs	r0, #55	@ 0x37
 8002e08:	f7ff fe04 	bl	8002a14 <__NVIC_SetPriority>
	NVIC_EnableIRQ(TIM7_IRQn);
 8002e0c:	2037      	movs	r0, #55	@ 0x37
 8002e0e:	f7ff fde3 	bl	80029d8 <__NVIC_EnableIRQ>
}
 8002e12:	bf00      	nop
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	bf00      	nop
 8002e18:	06666666 	.word	0x06666666
 8002e1c:	200002d4 	.word	0x200002d4
 8002e20:	40001400 	.word	0x40001400

08002e24 <FW_StartAll>:
	NVIC_EnableIRQ(DMA2_Stream0_IRQn);
	DMA2_Stream0->CR |= DMA_SxCR_EN;
}

void FW_StartAll(void)
{
 8002e24:	b480      	push	{r7}
 8002e26:	af00      	add	r7, sp, #0
	TIM1->EGR |= TIM_EGR_UG;
 8002e28:	4b16      	ldr	r3, [pc, #88]	@ (8002e84 <FW_StartAll+0x60>)
 8002e2a:	695b      	ldr	r3, [r3, #20]
 8002e2c:	4a15      	ldr	r2, [pc, #84]	@ (8002e84 <FW_StartAll+0x60>)
 8002e2e:	f043 0301 	orr.w	r3, r3, #1
 8002e32:	6153      	str	r3, [r2, #20]
	TIM1->CR1 |= TIM_CR1_CEN;
 8002e34:	4b13      	ldr	r3, [pc, #76]	@ (8002e84 <FW_StartAll+0x60>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a12      	ldr	r2, [pc, #72]	@ (8002e84 <FW_StartAll+0x60>)
 8002e3a:	f043 0301 	orr.w	r3, r3, #1
 8002e3e:	6013      	str	r3, [r2, #0]

	TIM2->CR1 |= TIM_CR1_CEN;
 8002e40:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002e4a:	f043 0301 	orr.w	r3, r3, #1
 8002e4e:	6013      	str	r3, [r2, #0]

	TIM3->EGR |= TIM_EGR_UG;
 8002e50:	4b0d      	ldr	r3, [pc, #52]	@ (8002e88 <FW_StartAll+0x64>)
 8002e52:	695b      	ldr	r3, [r3, #20]
 8002e54:	4a0c      	ldr	r2, [pc, #48]	@ (8002e88 <FW_StartAll+0x64>)
 8002e56:	f043 0301 	orr.w	r3, r3, #1
 8002e5a:	6153      	str	r3, [r2, #20]
	TIM3->CR1 |= TIM_CR1_CEN;
 8002e5c:	4b0a      	ldr	r3, [pc, #40]	@ (8002e88 <FW_StartAll+0x64>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a09      	ldr	r2, [pc, #36]	@ (8002e88 <FW_StartAll+0x64>)
 8002e62:	f043 0301 	orr.w	r3, r3, #1
 8002e66:	6013      	str	r3, [r2, #0]

	TIM7->CR1 |= TIM_CR1_CEN;
 8002e68:	4b08      	ldr	r3, [pc, #32]	@ (8002e8c <FW_StartAll+0x68>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a07      	ldr	r2, [pc, #28]	@ (8002e8c <FW_StartAll+0x68>)
 8002e6e:	f043 0301 	orr.w	r3, r3, #1
 8002e72:	6013      	str	r3, [r2, #0]
  \details Enables IRQ interrupts by clearing special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8002e74:	b662      	cpsie	i
}
 8002e76:	bf00      	nop

	__enable_irq();
}
 8002e78:	bf00      	nop
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e80:	4770      	bx	lr
 8002e82:	bf00      	nop
 8002e84:	40010000 	.word	0x40010000
 8002e88:	40000400 	.word	0x40000400
 8002e8c:	40001400 	.word	0x40001400

08002e90 <FW_SetPWMDuties>:

void FW_SetPWMDuties(uint16_t ccr1, uint16_t ccr2, uint16_t ccr3)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b083      	sub	sp, #12
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	4603      	mov	r3, r0
 8002e98:	80fb      	strh	r3, [r7, #6]
 8002e9a:	460b      	mov	r3, r1
 8002e9c:	80bb      	strh	r3, [r7, #4]
 8002e9e:	4613      	mov	r3, r2
 8002ea0:	807b      	strh	r3, [r7, #2]
	TIM1->CCR1 = ccr1;
 8002ea2:	4a07      	ldr	r2, [pc, #28]	@ (8002ec0 <FW_SetPWMDuties+0x30>)
 8002ea4:	88fb      	ldrh	r3, [r7, #6]
 8002ea6:	6353      	str	r3, [r2, #52]	@ 0x34
	TIM1->CCR2 = ccr2;
 8002ea8:	4a05      	ldr	r2, [pc, #20]	@ (8002ec0 <FW_SetPWMDuties+0x30>)
 8002eaa:	88bb      	ldrh	r3, [r7, #4]
 8002eac:	6393      	str	r3, [r2, #56]	@ 0x38
	TIM1->CCR3 = ccr3;
 8002eae:	4a04      	ldr	r2, [pc, #16]	@ (8002ec0 <FW_SetPWMDuties+0x30>)
 8002eb0:	887b      	ldrh	r3, [r7, #2]
 8002eb2:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8002eb4:	bf00      	nop
 8002eb6:	370c      	adds	r7, #12
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebe:	4770      	bx	lr
 8002ec0:	40010000 	.word	0x40010000

08002ec4 <FW_SetSampleMarker>:

void FW_SetSampleMarker(uint16_t ccr4)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b083      	sub	sp, #12
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	4603      	mov	r3, r0
 8002ecc:	80fb      	strh	r3, [r7, #6]
	TIM1->CCR4 = ccr4;
 8002ece:	4a04      	ldr	r2, [pc, #16]	@ (8002ee0 <FW_SetSampleMarker+0x1c>)
 8002ed0:	88fb      	ldrh	r3, [r7, #6]
 8002ed2:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8002ed4:	bf00      	nop
 8002ed6:	370c      	adds	r7, #12
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ede:	4770      	bx	lr
 8002ee0:	40010000 	.word	0x40010000

08002ee4 <DMA2_Stream0_IRQHandler>:


// ===== 割り込み =====
void DMA2_Stream0_IRQHandler(void);
void DMA2_Stream0_IRQHandler(void)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b082      	sub	sp, #8
 8002ee8:	af00      	add	r7, sp, #0
	ADC1->SR &= ~ADC_SR_EOC;
 8002eea:	4b17      	ldr	r3, [pc, #92]	@ (8002f48 <DMA2_Stream0_IRQHandler+0x64>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a16      	ldr	r2, [pc, #88]	@ (8002f48 <DMA2_Stream0_IRQHandler+0x64>)
 8002ef0:	f023 0302 	bic.w	r3, r3, #2
 8002ef4:	6013      	str	r3, [r2, #0]
	ADC1->SR &= ~ADC_SR_STRT;
 8002ef6:	4b14      	ldr	r3, [pc, #80]	@ (8002f48 <DMA2_Stream0_IRQHandler+0x64>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a13      	ldr	r2, [pc, #76]	@ (8002f48 <DMA2_Stream0_IRQHandler+0x64>)
 8002efc:	f023 0310 	bic.w	r3, r3, #16
 8002f00:	6013      	str	r3, [r2, #0]

	uint16_t buff[2] = {0, 0};
 8002f02:	2300      	movs	r3, #0
 8002f04:	80bb      	strh	r3, [r7, #4]
 8002f06:	2300      	movs	r3, #0
 8002f08:	80fb      	strh	r3, [r7, #6]

	DMA2->LIFCR = DMA_LIFCR_CTCIF0;
 8002f0a:	4b10      	ldr	r3, [pc, #64]	@ (8002f4c <DMA2_Stream0_IRQHandler+0x68>)
 8002f0c:	2220      	movs	r2, #32
 8002f0e:	609a      	str	r2, [r3, #8]

	buff[0] = s_AdcBuf[0];
 8002f10:	4b0f      	ldr	r3, [pc, #60]	@ (8002f50 <DMA2_Stream0_IRQHandler+0x6c>)
 8002f12:	881b      	ldrh	r3, [r3, #0]
 8002f14:	b29b      	uxth	r3, r3
 8002f16:	80bb      	strh	r3, [r7, #4]
	buff[1] = s_AdcBuf[1];
 8002f18:	4b0d      	ldr	r3, [pc, #52]	@ (8002f50 <DMA2_Stream0_IRQHandler+0x6c>)
 8002f1a:	885b      	ldrh	r3, [r3, #2]
 8002f1c:	b29b      	uxth	r3, r3
 8002f1e:	80fb      	strh	r3, [r7, #6]

	APP_OnVoltage(&buff[0]);
 8002f20:	1d3b      	adds	r3, r7, #4
 8002f22:	4618      	mov	r0, r3
 8002f24:	f7fe fe6e 	bl	8001c04 <APP_OnVoltage>
	APP_OnCurrents(s_AdcBuf[2], s_AdcBuf[3], s_AdcBuf[4]);
 8002f28:	4b09      	ldr	r3, [pc, #36]	@ (8002f50 <DMA2_Stream0_IRQHandler+0x6c>)
 8002f2a:	889b      	ldrh	r3, [r3, #4]
 8002f2c:	b29b      	uxth	r3, r3
 8002f2e:	4a08      	ldr	r2, [pc, #32]	@ (8002f50 <DMA2_Stream0_IRQHandler+0x6c>)
 8002f30:	88d2      	ldrh	r2, [r2, #6]
 8002f32:	b291      	uxth	r1, r2
 8002f34:	4a06      	ldr	r2, [pc, #24]	@ (8002f50 <DMA2_Stream0_IRQHandler+0x6c>)
 8002f36:	8912      	ldrh	r2, [r2, #8]
 8002f38:	b292      	uxth	r2, r2
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f7fe fe24 	bl	8001b88 <APP_OnCurrents>
}
 8002f40:	bf00      	nop
 8002f42:	3708      	adds	r7, #8
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}
 8002f48:	40012000 	.word	0x40012000
 8002f4c:	40026400 	.word	0x40026400
 8002f50:	200002c8 	.word	0x200002c8

08002f54 <ADC_IRQHandler>:

void ADC_IRQHandler(void);
void ADC_IRQHandler(void)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b082      	sub	sp, #8
 8002f58:	af00      	add	r7, sp, #0
	if (ADC1->SR & ADC_SR_JEOC)
 8002f5a:	4b15      	ldr	r3, [pc, #84]	@ (8002fb0 <ADC_IRQHandler+0x5c>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 0304 	and.w	r3, r3, #4
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d01f      	beq.n	8002fa6 <ADC_IRQHandler+0x52>
	{
		uint16_t v[ADC_INJBUF_LEN] = {(uint16_t)ADC1->JDR1, (uint16_t)ADC1->JDR2, (uint16_t)ADC1->JDR3, (uint16_t)ADC1->JDR4};
 8002f66:	4b12      	ldr	r3, [pc, #72]	@ (8002fb0 <ADC_IRQHandler+0x5c>)
 8002f68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f6a:	b29b      	uxth	r3, r3
 8002f6c:	803b      	strh	r3, [r7, #0]
 8002f6e:	4b10      	ldr	r3, [pc, #64]	@ (8002fb0 <ADC_IRQHandler+0x5c>)
 8002f70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f72:	b29b      	uxth	r3, r3
 8002f74:	807b      	strh	r3, [r7, #2]
 8002f76:	4b0e      	ldr	r3, [pc, #56]	@ (8002fb0 <ADC_IRQHandler+0x5c>)
 8002f78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f7a:	b29b      	uxth	r3, r3
 8002f7c:	80bb      	strh	r3, [r7, #4]
 8002f7e:	4b0c      	ldr	r3, [pc, #48]	@ (8002fb0 <ADC_IRQHandler+0x5c>)
 8002f80:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f82:	b29b      	uxth	r3, r3
 8002f84:	80fb      	strh	r3, [r7, #6]

		APP_OnVphase(v);
 8002f86:	463b      	mov	r3, r7
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f7fe fe1f 	bl	8001bcc <APP_OnVphase>

		ADC1->SR &= ~ADC_SR_JEOC;
 8002f8e:	4b08      	ldr	r3, [pc, #32]	@ (8002fb0 <ADC_IRQHandler+0x5c>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a07      	ldr	r2, [pc, #28]	@ (8002fb0 <ADC_IRQHandler+0x5c>)
 8002f94:	f023 0304 	bic.w	r3, r3, #4
 8002f98:	6013      	str	r3, [r2, #0]
		ADC1->SR &= ~ADC_SR_JSTRT;
 8002f9a:	4b05      	ldr	r3, [pc, #20]	@ (8002fb0 <ADC_IRQHandler+0x5c>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a04      	ldr	r2, [pc, #16]	@ (8002fb0 <ADC_IRQHandler+0x5c>)
 8002fa0:	f023 0308 	bic.w	r3, r3, #8
 8002fa4:	6013      	str	r3, [r2, #0]
	}
}
 8002fa6:	bf00      	nop
 8002fa8:	3708      	adds	r7, #8
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}
 8002fae:	bf00      	nop
 8002fb0:	40012000 	.word	0x40012000

08002fb4 <TIM2_IRQHandler>:

void TIM2_IRQHandler(void);
void TIM2_IRQHandler(void)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	af00      	add	r7, sp, #0
	TIM2->SR = 0x00000000;
 8002fb8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	611a      	str	r2, [r3, #16]

	count_flag = 1;
 8002fc0:	4b03      	ldr	r3, [pc, #12]	@ (8002fd0 <TIM2_IRQHandler+0x1c>)
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	701a      	strb	r2, [r3, #0]
}
 8002fc6:	bf00      	nop
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fce:	4770      	bx	lr
 8002fd0:	200002d2 	.word	0x200002d2

08002fd4 <TIM7_IRQHandler>:

void TIM7_IRQHandler(void);
void TIM7_IRQHandler(void) // 1〜2ms周期で呼ばれるタイマ割り込み
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b082      	sub	sp, #8
 8002fd8:	af00      	add	r7, sp, #0
	TIM7->SR = 0x00000000;
 8002fda:	4b0d      	ldr	r3, [pc, #52]	@ (8003010 <TIM7_IRQHandler+0x3c>)
 8002fdc:	2200      	movs	r2, #0
 8002fde:	611a      	str	r2, [r3, #16]

    // 例：GPIOAのbit0/bit1をA/B相とする場合
    uint8_t pin_a = (GPIOB->IDR >> 8) & 1;
 8002fe0:	4b0c      	ldr	r3, [pc, #48]	@ (8003014 <TIM7_IRQHandler+0x40>)
 8002fe2:	691b      	ldr	r3, [r3, #16]
 8002fe4:	0a1b      	lsrs	r3, r3, #8
 8002fe6:	b2db      	uxtb	r3, r3
 8002fe8:	f003 0301 	and.w	r3, r3, #1
 8002fec:	71fb      	strb	r3, [r7, #7]
    uint8_t pin_b = (GPIOB->IDR >> 9) & 1;
 8002fee:	4b09      	ldr	r3, [pc, #36]	@ (8003014 <TIM7_IRQHandler+0x40>)
 8002ff0:	691b      	ldr	r3, [r3, #16]
 8002ff2:	0a5b      	lsrs	r3, r3, #9
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	f003 0301 	and.w	r3, r3, #1
 8002ffa:	71bb      	strb	r3, [r7, #6]

    ENC_Scan(&s_enc, pin_a, pin_b);
 8002ffc:	79ba      	ldrb	r2, [r7, #6]
 8002ffe:	79fb      	ldrb	r3, [r7, #7]
 8003000:	4619      	mov	r1, r3
 8003002:	4805      	ldr	r0, [pc, #20]	@ (8003018 <TIM7_IRQHandler+0x44>)
 8003004:	f7ff fc24 	bl	8002850 <ENC_Scan>
}
 8003008:	bf00      	nop
 800300a:	3708      	adds	r7, #8
 800300c:	46bd      	mov	sp, r7
 800300e:	bd80      	pop	{r7, pc}
 8003010:	40001400 	.word	0x40001400
 8003014:	40020400 	.word	0x40020400
 8003018:	200002d4 	.word	0x200002d4

0800301c <HardFault_Handler>:

void HardFault_Handler(void);
void HardFault_Handler(void)
{
 800301c:	b480      	push	{r7}
 800301e:	af00      	add	r7, sp, #0
	while(1)
 8003020:	bf00      	nop
 8003022:	e7fd      	b.n	8003020 <HardFault_Handler+0x4>

08003024 <MemManage_Handler>:
	}
}

void MemManage_Handler(void);
void MemManage_Handler(void)
{
 8003024:	b480      	push	{r7}
 8003026:	af00      	add	r7, sp, #0
	while(1)
 8003028:	bf00      	nop
 800302a:	e7fd      	b.n	8003028 <MemManage_Handler+0x4>

0800302c <BusFault_Handler>:
	}
}

void BusFault_Handler(void);
void BusFault_Handler(void)
{
 800302c:	b480      	push	{r7}
 800302e:	af00      	add	r7, sp, #0
	while(1)
 8003030:	bf00      	nop
 8003032:	e7fd      	b.n	8003030 <BusFault_Handler+0x4>

08003034 <UsageFault_Handler>:
	}
}

void UsageFault_Handler(void);
void UsageFault_Handler(void)
{
 8003034:	b480      	push	{r7}
 8003036:	af00      	add	r7, sp, #0
	while(1)
 8003038:	bf00      	nop
 800303a:	e7fd      	b.n	8003038 <UsageFault_Handler+0x4>

0800303c <q31_mul>:
{
 800303c:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 8003040:	b085      	sub	sp, #20
 8003042:	af00      	add	r7, sp, #0
 8003044:	6078      	str	r0, [r7, #4]
 8003046:	6039      	str	r1, [r7, #0]
	int64_t t = (int64_t) a * (int64_t) b;
 8003048:	6879      	ldr	r1, [r7, #4]
 800304a:	17c8      	asrs	r0, r1, #31
 800304c:	4688      	mov	r8, r1
 800304e:	4681      	mov	r9, r0
 8003050:	6839      	ldr	r1, [r7, #0]
 8003052:	17c8      	asrs	r0, r1, #31
 8003054:	460c      	mov	r4, r1
 8003056:	4605      	mov	r5, r0
 8003058:	fb04 f009 	mul.w	r0, r4, r9
 800305c:	fb08 f105 	mul.w	r1, r8, r5
 8003060:	4401      	add	r1, r0
 8003062:	fba8 2304 	umull	r2, r3, r8, r4
 8003066:	4419      	add	r1, r3
 8003068:	460b      	mov	r3, r1
 800306a:	e9c7 2302 	strd	r2, r3, [r7, #8]
 800306e:	e9c7 2302 	strd	r2, r3, [r7, #8]
	t >>= 31;
 8003072:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003076:	f04f 0200 	mov.w	r2, #0
 800307a:	f04f 0300 	mov.w	r3, #0
 800307e:	0fc2      	lsrs	r2, r0, #31
 8003080:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8003084:	17cb      	asrs	r3, r1, #31
 8003086:	e9c7 2302 	strd	r2, r3, [r7, #8]
	if (t > 0x7FFFFFFFLL)
 800308a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800308e:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8003092:	f173 0300 	sbcs.w	r3, r3, #0
 8003096:	db05      	blt.n	80030a4 <q31_mul+0x68>
		t = 0x7FFFFFFFLL;
 8003098:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 800309c:	f04f 0300 	mov.w	r3, #0
 80030a0:	e9c7 2302 	strd	r2, r3, [r7, #8]
	if (t < -0x80000000LL)
 80030a4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80030a8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80030ac:	f173 33ff 	sbcs.w	r3, r3, #4294967295
 80030b0:	da05      	bge.n	80030be <q31_mul+0x82>
		t = -0x80000000LL;
 80030b2:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80030b6:	f04f 33ff 	mov.w	r3, #4294967295
 80030ba:	e9c7 2302 	strd	r2, r3, [r7, #8]
	return (int32_t) t;
 80030be:	68bb      	ldr	r3, [r7, #8]
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	3714      	adds	r7, #20
 80030c4:	46bd      	mov	sp, r7
 80030c6:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 80030ca:	4770      	bx	lr

080030cc <q31_add_sat>:
{
 80030cc:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 80030d0:	b085      	sub	sp, #20
 80030d2:	af00      	add	r7, sp, #0
 80030d4:	6078      	str	r0, [r7, #4]
 80030d6:	6039      	str	r1, [r7, #0]
	int64_t t = (int64_t) a + (int64_t) b;
 80030d8:	6879      	ldr	r1, [r7, #4]
 80030da:	17c8      	asrs	r0, r1, #31
 80030dc:	460c      	mov	r4, r1
 80030de:	4605      	mov	r5, r0
 80030e0:	6839      	ldr	r1, [r7, #0]
 80030e2:	17c8      	asrs	r0, r1, #31
 80030e4:	460a      	mov	r2, r1
 80030e6:	4603      	mov	r3, r0
 80030e8:	eb14 0802 	adds.w	r8, r4, r2
 80030ec:	eb45 0903 	adc.w	r9, r5, r3
 80030f0:	e9c7 8902 	strd	r8, r9, [r7, #8]
	if (t > 0x7FFFFFFFLL)
 80030f4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80030f8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80030fc:	f173 0300 	sbcs.w	r3, r3, #0
 8003100:	db05      	blt.n	800310e <q31_add_sat+0x42>
		t = 0x7FFFFFFFLL;
 8003102:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8003106:	f04f 0300 	mov.w	r3, #0
 800310a:	e9c7 2302 	strd	r2, r3, [r7, #8]
	if (t < -0x80000000LL)
 800310e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003112:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8003116:	f173 33ff 	sbcs.w	r3, r3, #4294967295
 800311a:	da05      	bge.n	8003128 <q31_add_sat+0x5c>
		t = -0x80000000LL;
 800311c:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8003120:	f04f 33ff 	mov.w	r3, #4294967295
 8003124:	e9c7 2302 	strd	r2, r3, [r7, #8]
	return (int32_t) t;
 8003128:	68bb      	ldr	r3, [r7, #8]
}
 800312a:	4618      	mov	r0, r3
 800312c:	3714      	adds	r7, #20
 800312e:	46bd      	mov	sp, r7
 8003130:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 8003134:	4770      	bx	lr

08003136 <q31_sub_sat>:
{
 8003136:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 800313a:	b085      	sub	sp, #20
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
 8003140:	6039      	str	r1, [r7, #0]
	int64_t t = (int64_t) a - (int64_t) b;
 8003142:	6879      	ldr	r1, [r7, #4]
 8003144:	17c8      	asrs	r0, r1, #31
 8003146:	460c      	mov	r4, r1
 8003148:	4605      	mov	r5, r0
 800314a:	6839      	ldr	r1, [r7, #0]
 800314c:	17c8      	asrs	r0, r1, #31
 800314e:	460a      	mov	r2, r1
 8003150:	4603      	mov	r3, r0
 8003152:	ebb4 0802 	subs.w	r8, r4, r2
 8003156:	eb65 0903 	sbc.w	r9, r5, r3
 800315a:	e9c7 8902 	strd	r8, r9, [r7, #8]
	if (t > 0x7FFFFFFFLL)
 800315e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003162:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8003166:	f173 0300 	sbcs.w	r3, r3, #0
 800316a:	db05      	blt.n	8003178 <q31_sub_sat+0x42>
		t = 0x7FFFFFFFLL;
 800316c:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8003170:	f04f 0300 	mov.w	r3, #0
 8003174:	e9c7 2302 	strd	r2, r3, [r7, #8]
	if (t < -0x80000000LL)
 8003178:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800317c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8003180:	f173 33ff 	sbcs.w	r3, r3, #4294967295
 8003184:	da05      	bge.n	8003192 <q31_sub_sat+0x5c>
		t = -0x80000000LL;
 8003186:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800318a:	f04f 33ff 	mov.w	r3, #4294967295
 800318e:	e9c7 2302 	strd	r2, r3, [r7, #8]
	return (int32_t) t;
 8003192:	68bb      	ldr	r3, [r7, #8]
}
 8003194:	4618      	mov	r0, r3
 8003196:	3714      	adds	r7, #20
 8003198:	46bd      	mov	sp, r7
 800319a:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 800319e:	4770      	bx	lr

080031a0 <q16_16_mul>:
{
 80031a0:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80031a4:	b085      	sub	sp, #20
 80031a6:	af00      	add	r7, sp, #0
 80031a8:	6078      	str	r0, [r7, #4]
 80031aa:	6039      	str	r1, [r7, #0]
	int64_t t = (int64_t) a * (int64_t) b;
 80031ac:	6879      	ldr	r1, [r7, #4]
 80031ae:	17c8      	asrs	r0, r1, #31
 80031b0:	468a      	mov	sl, r1
 80031b2:	4683      	mov	fp, r0
 80031b4:	6839      	ldr	r1, [r7, #0]
 80031b6:	17c8      	asrs	r0, r1, #31
 80031b8:	4688      	mov	r8, r1
 80031ba:	4681      	mov	r9, r0
 80031bc:	fb08 f00b 	mul.w	r0, r8, fp
 80031c0:	fb0a f109 	mul.w	r1, sl, r9
 80031c4:	4401      	add	r1, r0
 80031c6:	fbaa 2308 	umull	r2, r3, sl, r8
 80031ca:	4419      	add	r1, r3
 80031cc:	460b      	mov	r3, r1
 80031ce:	e9c7 2302 	strd	r2, r3, [r7, #8]
 80031d2:	e9c7 2302 	strd	r2, r3, [r7, #8]
	t = (t + (int64_t) Q16_16_HALF) >> Q16_16_FBITS;
 80031d6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80031da:	f512 4400 	adds.w	r4, r2, #32768	@ 0x8000
 80031de:	f143 0500 	adc.w	r5, r3, #0
 80031e2:	f04f 0200 	mov.w	r2, #0
 80031e6:	f04f 0300 	mov.w	r3, #0
 80031ea:	0c22      	lsrs	r2, r4, #16
 80031ec:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
 80031f0:	142b      	asrs	r3, r5, #16
 80031f2:	e9c7 2302 	strd	r2, r3, [r7, #8]
	if (t > (int64_t) Q16_16_MAX)
 80031f6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80031fa:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80031fe:	f173 0300 	sbcs.w	r3, r3, #0
 8003202:	db02      	blt.n	800320a <q16_16_mul+0x6a>
		return Q16_16_MAX;
 8003204:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8003208:	e00a      	b.n	8003220 <q16_16_mul+0x80>
	if (t < (int64_t) Q16_16_MIN)
 800320a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800320e:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8003212:	f173 33ff 	sbcs.w	r3, r3, #4294967295
 8003216:	da02      	bge.n	800321e <q16_16_mul+0x7e>
		return Q16_16_MIN;
 8003218:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800321c:	e000      	b.n	8003220 <q16_16_mul+0x80>
	return (q16_16_t) t;
 800321e:	68bb      	ldr	r3, [r7, #8]
}
 8003220:	4618      	mov	r0, r3
 8003222:	3714      	adds	r7, #20
 8003224:	46bd      	mov	sp, r7
 8003226:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800322a:	4770      	bx	lr

0800322c <q16_16_div>:
{
 800322c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003230:	b08c      	sub	sp, #48	@ 0x30
 8003232:	af00      	add	r7, sp, #0
 8003234:	61f8      	str	r0, [r7, #28]
 8003236:	61b9      	str	r1, [r7, #24]
	if (b == 0)
 8003238:	69bb      	ldr	r3, [r7, #24]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d108      	bne.n	8003250 <q16_16_div+0x24>
		return (a >= 0) ? Q16_16_MAX : Q16_16_MIN;
 800323e:	69fb      	ldr	r3, [r7, #28]
 8003240:	2b00      	cmp	r3, #0
 8003242:	db02      	blt.n	800324a <q16_16_div+0x1e>
 8003244:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8003248:	e07a      	b.n	8003340 <q16_16_div+0x114>
 800324a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800324e:	e077      	b.n	8003340 <q16_16_div+0x114>
	int64_t t = ((int64_t) a << Q16_16_FBITS);
 8003250:	69fb      	ldr	r3, [r7, #28]
 8003252:	17da      	asrs	r2, r3, #31
 8003254:	461c      	mov	r4, r3
 8003256:	4615      	mov	r5, r2
 8003258:	f04f 0200 	mov.w	r2, #0
 800325c:	f04f 0300 	mov.w	r3, #0
 8003260:	042b      	lsls	r3, r5, #16
 8003262:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8003266:	0422      	lsls	r2, r4, #16
 8003268:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
	if ((t >= 0 && b > 0) || (t < 0 && b < 0))
 800326c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003270:	2b00      	cmp	r3, #0
 8003272:	db02      	blt.n	800327a <q16_16_div+0x4e>
 8003274:	69bb      	ldr	r3, [r7, #24]
 8003276:	2b00      	cmp	r3, #0
 8003278:	dc06      	bgt.n	8003288 <q16_16_div+0x5c>
 800327a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800327e:	2b00      	cmp	r3, #0
 8003280:	da1f      	bge.n	80032c2 <q16_16_div+0x96>
 8003282:	69bb      	ldr	r3, [r7, #24]
 8003284:	2b00      	cmp	r3, #0
 8003286:	da1c      	bge.n	80032c2 <q16_16_div+0x96>
		t += (b > 0) ? (b / 2) : (-b / 2);
 8003288:	69bb      	ldr	r3, [r7, #24]
 800328a:	2b00      	cmp	r3, #0
 800328c:	dd04      	ble.n	8003298 <q16_16_div+0x6c>
 800328e:	69bb      	ldr	r3, [r7, #24]
 8003290:	0fda      	lsrs	r2, r3, #31
 8003292:	4413      	add	r3, r2
 8003294:	105b      	asrs	r3, r3, #1
 8003296:	e004      	b.n	80032a2 <q16_16_div+0x76>
 8003298:	69bb      	ldr	r3, [r7, #24]
 800329a:	425b      	negs	r3, r3
 800329c:	0fda      	lsrs	r2, r3, #31
 800329e:	4413      	add	r3, r2
 80032a0:	105b      	asrs	r3, r3, #1
 80032a2:	17da      	asrs	r2, r3, #31
 80032a4:	469a      	mov	sl, r3
 80032a6:	4693      	mov	fp, r2
 80032a8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80032ac:	eb12 010a 	adds.w	r1, r2, sl
 80032b0:	60b9      	str	r1, [r7, #8]
 80032b2:	eb43 030b 	adc.w	r3, r3, fp
 80032b6:	60fb      	str	r3, [r7, #12]
 80032b8:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80032bc:	e9c7 340a 	strd	r3, r4, [r7, #40]	@ 0x28
 80032c0:	e01b      	b.n	80032fa <q16_16_div+0xce>
		t -= (b > 0) ? (b / 2) : (-b / 2);
 80032c2:	69bb      	ldr	r3, [r7, #24]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	dd04      	ble.n	80032d2 <q16_16_div+0xa6>
 80032c8:	69bb      	ldr	r3, [r7, #24]
 80032ca:	0fda      	lsrs	r2, r3, #31
 80032cc:	4413      	add	r3, r2
 80032ce:	105b      	asrs	r3, r3, #1
 80032d0:	e004      	b.n	80032dc <q16_16_div+0xb0>
 80032d2:	69bb      	ldr	r3, [r7, #24]
 80032d4:	425b      	negs	r3, r3
 80032d6:	0fda      	lsrs	r2, r3, #31
 80032d8:	4413      	add	r3, r2
 80032da:	105b      	asrs	r3, r3, #1
 80032dc:	17da      	asrs	r2, r3, #31
 80032de:	4698      	mov	r8, r3
 80032e0:	4691      	mov	r9, r2
 80032e2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80032e6:	ebb2 0108 	subs.w	r1, r2, r8
 80032ea:	6039      	str	r1, [r7, #0]
 80032ec:	eb63 0309 	sbc.w	r3, r3, r9
 80032f0:	607b      	str	r3, [r7, #4]
 80032f2:	e9d7 3400 	ldrd	r3, r4, [r7]
 80032f6:	e9c7 340a 	strd	r3, r4, [r7, #40]	@ 0x28
	int64_t q = t / b;
 80032fa:	69bb      	ldr	r3, [r7, #24]
 80032fc:	17da      	asrs	r2, r3, #31
 80032fe:	613b      	str	r3, [r7, #16]
 8003300:	617a      	str	r2, [r7, #20]
 8003302:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003306:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800330a:	f7fd fc4d 	bl	8000ba8 <__aeabi_ldivmod>
 800330e:	4602      	mov	r2, r0
 8003310:	460b      	mov	r3, r1
 8003312:	e9c7 2308 	strd	r2, r3, [r7, #32]
	if (q > (int64_t) Q16_16_MAX)
 8003316:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800331a:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 800331e:	f173 0300 	sbcs.w	r3, r3, #0
 8003322:	db02      	blt.n	800332a <q16_16_div+0xfe>
		return Q16_16_MAX;
 8003324:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8003328:	e00a      	b.n	8003340 <q16_16_div+0x114>
	if (q < (int64_t) Q16_16_MIN)
 800332a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800332e:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8003332:	f173 33ff 	sbcs.w	r3, r3, #4294967295
 8003336:	da02      	bge.n	800333e <q16_16_div+0x112>
		return Q16_16_MIN;
 8003338:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800333c:	e000      	b.n	8003340 <q16_16_div+0x114>
	return (q16_16_t) q;
 800333e:	6a3b      	ldr	r3, [r7, #32]
}
 8003340:	4618      	mov	r0, r3
 8003342:	3730      	adds	r7, #48	@ 0x30
 8003344:	46bd      	mov	sp, r7
 8003346:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800334a <q16_16_add_sat>:
{
 800334a:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 800334e:	b085      	sub	sp, #20
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
 8003354:	6039      	str	r1, [r7, #0]
	int64_t s = (int64_t) a + (int64_t) b;
 8003356:	6879      	ldr	r1, [r7, #4]
 8003358:	17c8      	asrs	r0, r1, #31
 800335a:	460c      	mov	r4, r1
 800335c:	4605      	mov	r5, r0
 800335e:	6839      	ldr	r1, [r7, #0]
 8003360:	17c8      	asrs	r0, r1, #31
 8003362:	460a      	mov	r2, r1
 8003364:	4603      	mov	r3, r0
 8003366:	eb14 0802 	adds.w	r8, r4, r2
 800336a:	eb45 0903 	adc.w	r9, r5, r3
 800336e:	e9c7 8902 	strd	r8, r9, [r7, #8]
	if (s > (int64_t) Q16_16_MAX)
 8003372:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003376:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 800337a:	f173 0300 	sbcs.w	r3, r3, #0
 800337e:	db02      	blt.n	8003386 <q16_16_add_sat+0x3c>
		return Q16_16_MAX;
 8003380:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8003384:	e00a      	b.n	800339c <q16_16_add_sat+0x52>
	if (s < (int64_t) Q16_16_MIN)
 8003386:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800338a:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 800338e:	f173 33ff 	sbcs.w	r3, r3, #4294967295
 8003392:	da02      	bge.n	800339a <q16_16_add_sat+0x50>
		return Q16_16_MIN;
 8003394:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8003398:	e000      	b.n	800339c <q16_16_add_sat+0x52>
	return (q16_16_t) s;
 800339a:	68bb      	ldr	r3, [r7, #8]
}
 800339c:	4618      	mov	r0, r3
 800339e:	3714      	adds	r7, #20
 80033a0:	46bd      	mov	sp, r7
 80033a2:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 80033a6:	4770      	bx	lr

080033a8 <q16_16_sub_sat>:
{
 80033a8:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 80033ac:	b085      	sub	sp, #20
 80033ae:	af00      	add	r7, sp, #0
 80033b0:	6078      	str	r0, [r7, #4]
 80033b2:	6039      	str	r1, [r7, #0]
	int64_t d = (int64_t) a - (int64_t) b;
 80033b4:	6879      	ldr	r1, [r7, #4]
 80033b6:	17c8      	asrs	r0, r1, #31
 80033b8:	460c      	mov	r4, r1
 80033ba:	4605      	mov	r5, r0
 80033bc:	6839      	ldr	r1, [r7, #0]
 80033be:	17c8      	asrs	r0, r1, #31
 80033c0:	460a      	mov	r2, r1
 80033c2:	4603      	mov	r3, r0
 80033c4:	ebb4 0802 	subs.w	r8, r4, r2
 80033c8:	eb65 0903 	sbc.w	r9, r5, r3
 80033cc:	e9c7 8902 	strd	r8, r9, [r7, #8]
	if (d > (int64_t) Q16_16_MAX)
 80033d0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80033d4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80033d8:	f173 0300 	sbcs.w	r3, r3, #0
 80033dc:	db02      	blt.n	80033e4 <q16_16_sub_sat+0x3c>
		return Q16_16_MAX;
 80033de:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80033e2:	e00a      	b.n	80033fa <q16_16_sub_sat+0x52>
	if (d < (int64_t) Q16_16_MIN)
 80033e4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80033e8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80033ec:	f173 33ff 	sbcs.w	r3, r3, #4294967295
 80033f0:	da02      	bge.n	80033f8 <q16_16_sub_sat+0x50>
		return Q16_16_MIN;
 80033f2:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80033f6:	e000      	b.n	80033fa <q16_16_sub_sat+0x52>
	return (q16_16_t) d;
 80033f8:	68bb      	ldr	r3, [r7, #8]
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	3714      	adds	r7, #20
 80033fe:	46bd      	mov	sp, r7
 8003400:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 8003404:	4770      	bx	lr

08003406 <pid_q16_16_init>:
	q16_16_t integrator;
	q16_16_t prev_meas;
} pid_q16_16_t;

static inline void pid_q16_16_init(pid_q16_16_t *p)
{
 8003406:	b480      	push	{r7}
 8003408:	b083      	sub	sp, #12
 800340a:	af00      	add	r7, sp, #0
 800340c:	6078      	str	r0, [r7, #4]
	p->integrator = 0;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2200      	movs	r2, #0
 8003412:	615a      	str	r2, [r3, #20]
	p->prev_meas = 0;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2200      	movs	r2, #0
 8003418:	619a      	str	r2, [r3, #24]
}
 800341a:	bf00      	nop
 800341c:	370c      	adds	r7, #12
 800341e:	46bd      	mov	sp, r7
 8003420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003424:	4770      	bx	lr

08003426 <pid_q16_16_step>:

static inline q16_16_t pid_q16_16_step(pid_q16_16_t *p, q16_16_t setpoint,
		q16_16_t measurement, q16_16_t dt)
{
 8003426:	b590      	push	{r4, r7, lr}
 8003428:	b08d      	sub	sp, #52	@ 0x34
 800342a:	af00      	add	r7, sp, #0
 800342c:	60f8      	str	r0, [r7, #12]
 800342e:	60b9      	str	r1, [r7, #8]
 8003430:	607a      	str	r2, [r7, #4]
 8003432:	603b      	str	r3, [r7, #0]
	q16_16_t error = q16_16_sub_sat(setpoint, measurement);
 8003434:	6879      	ldr	r1, [r7, #4]
 8003436:	68b8      	ldr	r0, [r7, #8]
 8003438:	f7ff ffb6 	bl	80033a8 <q16_16_sub_sat>
 800343c:	6238      	str	r0, [r7, #32]
	q16_16_t P = q16_16_mul(p->kp, error);
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	6a39      	ldr	r1, [r7, #32]
 8003444:	4618      	mov	r0, r3
 8003446:	f7ff feab 	bl	80031a0 <q16_16_mul>
 800344a:	61f8      	str	r0, [r7, #28]
	/* D は測定値微分（ノイズ増幅を抑える） */
	q16_16_t d_meas = q16_16_sub_sat(measurement, p->prev_meas);
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	699b      	ldr	r3, [r3, #24]
 8003450:	4619      	mov	r1, r3
 8003452:	6878      	ldr	r0, [r7, #4]
 8003454:	f7ff ffa8 	bl	80033a8 <q16_16_sub_sat>
 8003458:	61b8      	str	r0, [r7, #24]
	q16_16_t D = 0;
 800345a:	2300      	movs	r3, #0
 800345c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (dt != 0)
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d00e      	beq.n	8003482 <pid_q16_16_step+0x5c>
	{
		D = q16_16_div(d_meas, dt);
 8003464:	6839      	ldr	r1, [r7, #0]
 8003466:	69b8      	ldr	r0, [r7, #24]
 8003468:	f7ff fee0 	bl	800322c <q16_16_div>
 800346c:	62f8      	str	r0, [r7, #44]	@ 0x2c
		D = q16_16_mul(p->kd, D);
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	689b      	ldr	r3, [r3, #8]
 8003472:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003474:	4618      	mov	r0, r3
 8003476:	f7ff fe93 	bl	80031a0 <q16_16_mul>
 800347a:	62f8      	str	r0, [r7, #44]	@ 0x2c
		D = -D;
 800347c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800347e:	425b      	negs	r3, r3
 8003480:	62fb      	str	r3, [r7, #44]	@ 0x2c
	}
	p->prev_meas = measurement;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	687a      	ldr	r2, [r7, #4]
 8003486:	619a      	str	r2, [r3, #24]
	q16_16_t u_noI = q16_16_add_sat(P, D);
 8003488:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800348a:	69f8      	ldr	r0, [r7, #28]
 800348c:	f7ff ff5d 	bl	800334a <q16_16_add_sat>
 8003490:	6178      	str	r0, [r7, #20]
	/* 積分項の候補を先に計算（アンチワインドアップ）*/
	q16_16_t I_cand = p->integrator;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	695b      	ldr	r3, [r3, #20]
 8003496:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (dt != 0 && p->ki != 0)
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d014      	beq.n	80034c8 <pid_q16_16_step+0xa2>
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d010      	beq.n	80034c8 <pid_q16_16_step+0xa2>
	{
		q16_16_t inc = q16_16_mul(p->ki, q16_16_mul(error, dt));
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	685c      	ldr	r4, [r3, #4]
 80034aa:	6839      	ldr	r1, [r7, #0]
 80034ac:	6a38      	ldr	r0, [r7, #32]
 80034ae:	f7ff fe77 	bl	80031a0 <q16_16_mul>
 80034b2:	4603      	mov	r3, r0
 80034b4:	4619      	mov	r1, r3
 80034b6:	4620      	mov	r0, r4
 80034b8:	f7ff fe72 	bl	80031a0 <q16_16_mul>
 80034bc:	6138      	str	r0, [r7, #16]
		I_cand = q16_16_add_sat(I_cand, inc);
 80034be:	6939      	ldr	r1, [r7, #16]
 80034c0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80034c2:	f7ff ff42 	bl	800334a <q16_16_add_sat>
 80034c6:	62b8      	str	r0, [r7, #40]	@ 0x28
	}
	q16_16_t u = q16_16_add_sat(u_noI, I_cand);
 80034c8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80034ca:	6978      	ldr	r0, [r7, #20]
 80034cc:	f7ff ff3d 	bl	800334a <q16_16_add_sat>
 80034d0:	6278      	str	r0, [r7, #36]	@ 0x24
	if (u > p->out_max)
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	691b      	ldr	r3, [r3, #16]
 80034d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034d8:	429a      	cmp	r2, r3
 80034da:	dd0f      	ble.n	80034fc <pid_q16_16_step+0xd6>
	{
		u = p->out_max;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	691b      	ldr	r3, [r3, #16]
 80034e0:	627b      	str	r3, [r7, #36]	@ 0x24
		if ((p->ki != 0) && (u_noI < p->out_max))
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d020      	beq.n	800352c <pid_q16_16_step+0x106>
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	691b      	ldr	r3, [r3, #16]
 80034ee:	697a      	ldr	r2, [r7, #20]
 80034f0:	429a      	cmp	r2, r3
 80034f2:	da1b      	bge.n	800352c <pid_q16_16_step+0x106>
			p->integrator = I_cand;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80034f8:	615a      	str	r2, [r3, #20]
 80034fa:	e017      	b.n	800352c <pid_q16_16_step+0x106>
	}
	else if (u < p->out_min)
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	68db      	ldr	r3, [r3, #12]
 8003500:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003502:	429a      	cmp	r2, r3
 8003504:	da0f      	bge.n	8003526 <pid_q16_16_step+0x100>
	{
		u = p->out_min;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	68db      	ldr	r3, [r3, #12]
 800350a:	627b      	str	r3, [r7, #36]	@ 0x24
		if ((p->ki != 0) && (u_noI > p->out_min))
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d00b      	beq.n	800352c <pid_q16_16_step+0x106>
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	68db      	ldr	r3, [r3, #12]
 8003518:	697a      	ldr	r2, [r7, #20]
 800351a:	429a      	cmp	r2, r3
 800351c:	dd06      	ble.n	800352c <pid_q16_16_step+0x106>
			p->integrator = I_cand;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003522:	615a      	str	r2, [r3, #20]
 8003524:	e002      	b.n	800352c <pid_q16_16_step+0x106>
	}
	else
	{
		p->integrator = I_cand;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800352a:	615a      	str	r2, [r3, #20]
	}
	return u;
 800352c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800352e:	4618      	mov	r0, r3
 8003530:	3734      	adds	r7, #52	@ 0x34
 8003532:	46bd      	mov	sp, r7
 8003534:	bd90      	pop	{r4, r7, pc}

08003536 <q16_16_slew_step>:
#define SLEW_Q16_H
#include <stdint.h>
#include "fixed_q16.h"
static inline q16_16_t q16_16_slew_step(q16_16_t prev, q16_16_t target,
		q16_16_t slew_up_per_s, q16_16_t slew_dn_per_s, q16_16_t dt_s)
{
 8003536:	b580      	push	{r7, lr}
 8003538:	b086      	sub	sp, #24
 800353a:	af00      	add	r7, sp, #0
 800353c:	60f8      	str	r0, [r7, #12]
 800353e:	60b9      	str	r1, [r7, #8]
 8003540:	607a      	str	r2, [r7, #4]
 8003542:	603b      	str	r3, [r7, #0]
	q16_16_t diff = q16_16_sub_sat(target, prev);
 8003544:	68f9      	ldr	r1, [r7, #12]
 8003546:	68b8      	ldr	r0, [r7, #8]
 8003548:	f7ff ff2e 	bl	80033a8 <q16_16_sub_sat>
 800354c:	6178      	str	r0, [r7, #20]
	if (diff == 0)
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d101      	bne.n	8003558 <q16_16_slew_step+0x22>
		return prev;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	e029      	b.n	80035ac <q16_16_slew_step+0x76>
	q16_16_t max_step =
			(diff > 0) ?
					q16_16_mul(slew_up_per_s, dt_s) :
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	2b00      	cmp	r3, #0
 800355c:	dd05      	ble.n	800356a <q16_16_slew_step+0x34>
 800355e:	6a39      	ldr	r1, [r7, #32]
 8003560:	6878      	ldr	r0, [r7, #4]
 8003562:	f7ff fe1d 	bl	80031a0 <q16_16_mul>
 8003566:	4603      	mov	r3, r0
 8003568:	e004      	b.n	8003574 <q16_16_slew_step+0x3e>
					q16_16_mul(slew_dn_per_s, dt_s);
 800356a:	6a39      	ldr	r1, [r7, #32]
 800356c:	6838      	ldr	r0, [r7, #0]
 800356e:	f7ff fe17 	bl	80031a0 <q16_16_mul>
 8003572:	4603      	mov	r3, r0
	q16_16_t max_step =
 8003574:	613b      	str	r3, [r7, #16]
	if (diff > 0)
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	2b00      	cmp	r3, #0
 800357a:	dd0b      	ble.n	8003594 <q16_16_slew_step+0x5e>
	{
		if (diff > max_step)
 800357c:	697a      	ldr	r2, [r7, #20]
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	429a      	cmp	r2, r3
 8003582:	dd05      	ble.n	8003590 <q16_16_slew_step+0x5a>
			return q16_16_add_sat(prev, max_step);
 8003584:	6939      	ldr	r1, [r7, #16]
 8003586:	68f8      	ldr	r0, [r7, #12]
 8003588:	f7ff fedf 	bl	800334a <q16_16_add_sat>
 800358c:	4603      	mov	r3, r0
 800358e:	e00d      	b.n	80035ac <q16_16_slew_step+0x76>
		return target;
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	e00b      	b.n	80035ac <q16_16_slew_step+0x76>
	}
	else
	{
		if (-diff > max_step)
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	425b      	negs	r3, r3
 8003598:	693a      	ldr	r2, [r7, #16]
 800359a:	429a      	cmp	r2, r3
 800359c:	da05      	bge.n	80035aa <q16_16_slew_step+0x74>
			return q16_16_sub_sat(prev, max_step);
 800359e:	6939      	ldr	r1, [r7, #16]
 80035a0:	68f8      	ldr	r0, [r7, #12]
 80035a2:	f7ff ff01 	bl	80033a8 <q16_16_sub_sat>
 80035a6:	4603      	mov	r3, r0
 80035a8:	e000      	b.n	80035ac <q16_16_slew_step+0x76>
		return target;
 80035aa:	68bb      	ldr	r3, [r7, #8]
	}
}
 80035ac:	4618      	mov	r0, r3
 80035ae:	3718      	adds	r7, #24
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}

080035b4 <softstart_init>:
	q16_16_t scale;
	q16_16_t step_per_s;
	uint8_t enabled;
} softstart_t;
static inline void softstart_init(softstart_t *s, q16_16_t rise_time_s)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b082      	sub	sp, #8
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
 80035bc:	6039      	str	r1, [r7, #0]
	s->scale = 0;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2200      	movs	r2, #0
 80035c2:	601a      	str	r2, [r3, #0]
	s->enabled = 0;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2200      	movs	r2, #0
 80035c8:	721a      	strb	r2, [r3, #8]
	if (rise_time_s <= 0)
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	dc04      	bgt.n	80035da <softstart_init+0x26>
		s->step_per_s = Q16_16_MAX;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 80035d6:	605a      	str	r2, [r3, #4]
	else
		s->step_per_s = q16_16_div(Q16_16_ONE, rise_time_s);
}
 80035d8:	e007      	b.n	80035ea <softstart_init+0x36>
		s->step_per_s = q16_16_div(Q16_16_ONE, rise_time_s);
 80035da:	6839      	ldr	r1, [r7, #0]
 80035dc:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 80035e0:	f7ff fe24 	bl	800322c <q16_16_div>
 80035e4:	4602      	mov	r2, r0
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	605a      	str	r2, [r3, #4]
}
 80035ea:	bf00      	nop
 80035ec:	3708      	adds	r7, #8
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}

080035f2 <softstart_enable>:
static inline void softstart_enable(softstart_t *s, uint8_t en)
{
 80035f2:	b480      	push	{r7}
 80035f4:	b083      	sub	sp, #12
 80035f6:	af00      	add	r7, sp, #0
 80035f8:	6078      	str	r0, [r7, #4]
 80035fa:	460b      	mov	r3, r1
 80035fc:	70fb      	strb	r3, [r7, #3]
	s->enabled = en ? 1 : 0;
 80035fe:	78fb      	ldrb	r3, [r7, #3]
 8003600:	2b00      	cmp	r3, #0
 8003602:	bf14      	ite	ne
 8003604:	2301      	movne	r3, #1
 8003606:	2300      	moveq	r3, #0
 8003608:	b2db      	uxtb	r3, r3
 800360a:	461a      	mov	r2, r3
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	721a      	strb	r2, [r3, #8]
}
 8003610:	bf00      	nop
 8003612:	370c      	adds	r7, #12
 8003614:	46bd      	mov	sp, r7
 8003616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361a:	4770      	bx	lr

0800361c <softstart_step>:
static inline q16_16_t softstart_step(softstart_t *s, q16_16_t dt_s)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b084      	sub	sp, #16
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
 8003624:	6039      	str	r1, [r7, #0]
	if (!s->enabled)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	7a1b      	ldrb	r3, [r3, #8]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d105      	bne.n	800363a <softstart_step+0x1e>
	{
		s->scale = 0;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2200      	movs	r2, #0
 8003632:	601a      	str	r2, [r3, #0]
		return s->scale;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	e01a      	b.n	8003670 <softstart_step+0x54>
	}
	q16_16_t inc = q16_16_mul(s->step_per_s, dt_s);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	6839      	ldr	r1, [r7, #0]
 8003640:	4618      	mov	r0, r3
 8003642:	f7ff fdad 	bl	80031a0 <q16_16_mul>
 8003646:	60f8      	str	r0, [r7, #12]
	s->scale = q16_16_add_sat(s->scale, inc);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	68f9      	ldr	r1, [r7, #12]
 800364e:	4618      	mov	r0, r3
 8003650:	f7ff fe7b 	bl	800334a <q16_16_add_sat>
 8003654:	4602      	mov	r2, r0
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	601a      	str	r2, [r3, #0]
	if (s->scale > Q16_16_ONE)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003662:	dd03      	ble.n	800366c <softstart_step+0x50>
		s->scale = Q16_16_ONE;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800366a:	601a      	str	r2, [r3, #0]
	return s->scale;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
}
 8003670:	4618      	mov	r0, r3
 8003672:	3710      	adds	r7, #16
 8003674:	46bd      	mov	sp, r7
 8003676:	bd80      	pop	{r7, pc}

08003678 <svm_sector_from_alphabeta_q31>:
}

// --- SVM セクタ算出（αβ→abcの符号で判定, 1..6） ---
static inline uint8_t svm_sector_from_alphabeta_q31(int32_t v_alpha,
		int32_t v_beta)
{
 8003678:	b590      	push	{r4, r7, lr}
 800367a:	b087      	sub	sp, #28
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
 8003680:	6039      	str	r1, [r7, #0]
	int32_t va = v_alpha;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	617b      	str	r3, [r7, #20]
	int32_t vb = q31_add_sat(q31_mul(-(Q31_HALF), v_alpha),
 8003686:	6879      	ldr	r1, [r7, #4]
 8003688:	4832      	ldr	r0, [pc, #200]	@ (8003754 <svm_sector_from_alphabeta_q31+0xdc>)
 800368a:	f7ff fcd7 	bl	800303c <q31_mul>
 800368e:	4604      	mov	r4, r0
 8003690:	6839      	ldr	r1, [r7, #0]
 8003692:	4831      	ldr	r0, [pc, #196]	@ (8003758 <svm_sector_from_alphabeta_q31+0xe0>)
 8003694:	f7ff fcd2 	bl	800303c <q31_mul>
 8003698:	4603      	mov	r3, r0
 800369a:	4619      	mov	r1, r3
 800369c:	4620      	mov	r0, r4
 800369e:	f7ff fd15 	bl	80030cc <q31_add_sat>
 80036a2:	6138      	str	r0, [r7, #16]
			q31_mul(Q31_SQRT3_OVER_2, v_beta));
	int32_t vc = q31_sub_sat(q31_mul(-(Q31_HALF), v_alpha),
 80036a4:	6879      	ldr	r1, [r7, #4]
 80036a6:	482b      	ldr	r0, [pc, #172]	@ (8003754 <svm_sector_from_alphabeta_q31+0xdc>)
 80036a8:	f7ff fcc8 	bl	800303c <q31_mul>
 80036ac:	4604      	mov	r4, r0
 80036ae:	6839      	ldr	r1, [r7, #0]
 80036b0:	4829      	ldr	r0, [pc, #164]	@ (8003758 <svm_sector_from_alphabeta_q31+0xe0>)
 80036b2:	f7ff fcc3 	bl	800303c <q31_mul>
 80036b6:	4603      	mov	r3, r0
 80036b8:	4619      	mov	r1, r3
 80036ba:	4620      	mov	r0, r4
 80036bc:	f7ff fd3b 	bl	8003136 <q31_sub_sat>
 80036c0:	60f8      	str	r0, [r7, #12]
			q31_mul(Q31_SQRT3_OVER_2, v_beta));

	uint8_t a = (va > 0);
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	bfcc      	ite	gt
 80036c8:	2301      	movgt	r3, #1
 80036ca:	2300      	movle	r3, #0
 80036cc:	b2db      	uxtb	r3, r3
 80036ce:	72fb      	strb	r3, [r7, #11]
	uint8_t b = (vb > 0);
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	bfcc      	ite	gt
 80036d6:	2301      	movgt	r3, #1
 80036d8:	2300      	movle	r3, #0
 80036da:	b2db      	uxtb	r3, r3
 80036dc:	72bb      	strb	r3, [r7, #10]
	uint8_t c = (vc > 0);
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	bfcc      	ite	gt
 80036e4:	2301      	movgt	r3, #1
 80036e6:	2300      	movle	r3, #0
 80036e8:	b2db      	uxtb	r3, r3
 80036ea:	727b      	strb	r3, [r7, #9]
	uint8_t code = (a << 2) | (b << 1) | c;
 80036ec:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80036f0:	009b      	lsls	r3, r3, #2
 80036f2:	b25a      	sxtb	r2, r3
 80036f4:	f997 300a 	ldrsb.w	r3, [r7, #10]
 80036f8:	005b      	lsls	r3, r3, #1
 80036fa:	b25b      	sxtb	r3, r3
 80036fc:	4313      	orrs	r3, r2
 80036fe:	b25a      	sxtb	r2, r3
 8003700:	f997 3009 	ldrsb.w	r3, [r7, #9]
 8003704:	4313      	orrs	r3, r2
 8003706:	b25b      	sxtb	r3, r3
 8003708:	723b      	strb	r3, [r7, #8]

	switch (code)
 800370a:	7a3b      	ldrb	r3, [r7, #8]
 800370c:	3b01      	subs	r3, #1
 800370e:	2b05      	cmp	r3, #5
 8003710:	d81a      	bhi.n	8003748 <svm_sector_from_alphabeta_q31+0xd0>
 8003712:	a201      	add	r2, pc, #4	@ (adr r2, 8003718 <svm_sector_from_alphabeta_q31+0xa0>)
 8003714:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003718:	08003741 	.word	0x08003741
 800371c:	0800373d 	.word	0x0800373d
 8003720:	08003739 	.word	0x08003739
 8003724:	08003745 	.word	0x08003745
 8003728:	08003735 	.word	0x08003735
 800372c:	08003731 	.word	0x08003731
	{
	case 0b110:
		return 1;
 8003730:	2301      	movs	r3, #1
 8003732:	e00a      	b.n	800374a <svm_sector_from_alphabeta_q31+0xd2>
	case 0b101:
		return 2;
 8003734:	2302      	movs	r3, #2
 8003736:	e008      	b.n	800374a <svm_sector_from_alphabeta_q31+0xd2>
	case 0b011:
		return 3;
 8003738:	2303      	movs	r3, #3
 800373a:	e006      	b.n	800374a <svm_sector_from_alphabeta_q31+0xd2>
	case 0b010:
		return 4;
 800373c:	2304      	movs	r3, #4
 800373e:	e004      	b.n	800374a <svm_sector_from_alphabeta_q31+0xd2>
	case 0b001:
		return 5;
 8003740:	2305      	movs	r3, #5
 8003742:	e002      	b.n	800374a <svm_sector_from_alphabeta_q31+0xd2>
	case 0b100:
		return 6;
 8003744:	2306      	movs	r3, #6
 8003746:	e000      	b.n	800374a <svm_sector_from_alphabeta_q31+0xd2>
	case 0b111:
	case 0b000:
	default:
		return 1;
 8003748:	2301      	movs	r3, #1
	}
}
 800374a:	4618      	mov	r0, r3
 800374c:	371c      	adds	r7, #28
 800374e:	46bd      	mov	sp, r7
 8003750:	bd90      	pop	{r4, r7, pc}
 8003752:	bf00      	nop
 8003754:	c0000001 	.word	0xc0000001
 8003758:	6ed9eba2 	.word	0x6ed9eba2

0800375c <svpwm_compute_T012_q31>:

// --- T0,T1,T2 と相デューティ生成（半キャリア正規化, Q31） ---
static inline void svpwm_compute_T012_q31(int32_t v_alpha, int32_t v_beta,
		uint8_t sector, int32_t *T0_q31, int32_t *T1_q31, int32_t *T2_q31,
		int32_t *Da_q31, int32_t *Db_q31, int32_t *Dc_q31)
{
 800375c:	b590      	push	{r4, r7, lr}
 800375e:	b09b      	sub	sp, #108	@ 0x6c
 8003760:	af00      	add	r7, sp, #0
 8003762:	60f8      	str	r0, [r7, #12]
 8003764:	60b9      	str	r1, [r7, #8]
 8003766:	603b      	str	r3, [r7, #0]
 8003768:	4613      	mov	r3, r2
 800376a:	71fb      	strb	r3, [r7, #7]
	// 逆Clarke（相対値でOK）
	int32_t va = v_alpha;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	65bb      	str	r3, [r7, #88]	@ 0x58
	int32_t vb = q31_add_sat(q31_mul(-(Q31_HALF), v_alpha),
 8003770:	68f9      	ldr	r1, [r7, #12]
 8003772:	4862      	ldr	r0, [pc, #392]	@ (80038fc <svpwm_compute_T012_q31+0x1a0>)
 8003774:	f7ff fc62 	bl	800303c <q31_mul>
 8003778:	4604      	mov	r4, r0
 800377a:	68b9      	ldr	r1, [r7, #8]
 800377c:	4860      	ldr	r0, [pc, #384]	@ (8003900 <svpwm_compute_T012_q31+0x1a4>)
 800377e:	f7ff fc5d 	bl	800303c <q31_mul>
 8003782:	4603      	mov	r3, r0
 8003784:	4619      	mov	r1, r3
 8003786:	4620      	mov	r0, r4
 8003788:	f7ff fca0 	bl	80030cc <q31_add_sat>
 800378c:	6578      	str	r0, [r7, #84]	@ 0x54
			q31_mul(Q31_SQRT3_OVER_2, v_beta));
	int32_t vc = q31_sub_sat(q31_mul(-(Q31_HALF), v_alpha),
 800378e:	68f9      	ldr	r1, [r7, #12]
 8003790:	485a      	ldr	r0, [pc, #360]	@ (80038fc <svpwm_compute_T012_q31+0x1a0>)
 8003792:	f7ff fc53 	bl	800303c <q31_mul>
 8003796:	4604      	mov	r4, r0
 8003798:	68b9      	ldr	r1, [r7, #8]
 800379a:	4859      	ldr	r0, [pc, #356]	@ (8003900 <svpwm_compute_T012_q31+0x1a4>)
 800379c:	f7ff fc4e 	bl	800303c <q31_mul>
 80037a0:	4603      	mov	r3, r0
 80037a2:	4619      	mov	r1, r3
 80037a4:	4620      	mov	r0, r4
 80037a6:	f7ff fcc6 	bl	8003136 <q31_sub_sat>
 80037aa:	6538      	str	r0, [r7, #80]	@ 0x50
			q31_mul(Q31_SQRT3_OVER_2, v_beta));

	// 最小値で平行移動 → [0, ...]
	int32_t min_ab = (va < vb) ? va : vb;
 80037ac:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80037ae:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80037b0:	4293      	cmp	r3, r2
 80037b2:	bfa8      	it	ge
 80037b4:	4613      	movge	r3, r2
 80037b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
	int32_t min_all = (min_ab < vc) ? min_ab : vc;
 80037b8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80037ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80037bc:	4293      	cmp	r3, r2
 80037be:	bfa8      	it	ge
 80037c0:	4613      	movge	r3, r2
 80037c2:	64bb      	str	r3, [r7, #72]	@ 0x48
	int32_t da = q31_sub_sat(va, min_all);
 80037c4:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80037c6:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80037c8:	f7ff fcb5 	bl	8003136 <q31_sub_sat>
 80037cc:	6478      	str	r0, [r7, #68]	@ 0x44
	int32_t db = q31_sub_sat(vb, min_all);
 80037ce:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80037d0:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 80037d2:	f7ff fcb0 	bl	8003136 <q31_sub_sat>
 80037d6:	6438      	str	r0, [r7, #64]	@ 0x40
	int32_t dc = q31_sub_sat(vc, min_all);
 80037d8:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80037da:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 80037dc:	f7ff fcab 	bl	8003136 <q31_sub_sat>
 80037e0:	63f8      	str	r0, [r7, #60]	@ 0x3c

	int32_t sum = q31_add_sat(q31_add_sat(da, db), dc); // = T1+T2
 80037e2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80037e4:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80037e6:	f7ff fc71 	bl	80030cc <q31_add_sat>
 80037ea:	4603      	mov	r3, r0
 80037ec:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80037ee:	4618      	mov	r0, r3
 80037f0:	f7ff fc6c 	bl	80030cc <q31_add_sat>
 80037f4:	63b8      	str	r0, [r7, #56]	@ 0x38
	if (sum > Q31_ONE)
		sum = Q31_ONE; // クリップ

	int32_t offset = q31_mul(q31_sub_sat(Q31_ONE, sum), Q31_HALF);
 80037f6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80037f8:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 80037fc:	f7ff fc9b 	bl	8003136 <q31_sub_sat>
 8003800:	4603      	mov	r3, r0
 8003802:	f06f 4140 	mvn.w	r1, #3221225472	@ 0xc0000000
 8003806:	4618      	mov	r0, r3
 8003808:	f7ff fc18 	bl	800303c <q31_mul>
 800380c:	6378      	str	r0, [r7, #52]	@ 0x34

	int32_t Da = q31_add_sat(da, offset);
 800380e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003810:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8003812:	f7ff fc5b 	bl	80030cc <q31_add_sat>
 8003816:	6338      	str	r0, [r7, #48]	@ 0x30
	int32_t Db = q31_add_sat(db, offset);
 8003818:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800381a:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800381c:	f7ff fc56 	bl	80030cc <q31_add_sat>
 8003820:	62f8      	str	r0, [r7, #44]	@ 0x2c
	int32_t Dc = q31_add_sat(dc, offset);
 8003822:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003824:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8003826:	f7ff fc51 	bl	80030cc <q31_add_sat>
 800382a:	62b8      	str	r0, [r7, #40]	@ 0x28

	// 並び替えで T1/T2 を取得
	int32_t Dmax = Da, Dmid = Db, Dmin = Dc;
 800382c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800382e:	667b      	str	r3, [r7, #100]	@ 0x64
 8003830:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003832:	663b      	str	r3, [r7, #96]	@ 0x60
 8003834:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003836:	65fb      	str	r3, [r7, #92]	@ 0x5c
	if (Dmax < Dmid)
 8003838:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800383a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800383c:	429a      	cmp	r2, r3
 800383e:	da05      	bge.n	800384c <svpwm_compute_T012_q31+0xf0>
	{
		int32_t t = Dmax;
 8003840:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003842:	627b      	str	r3, [r7, #36]	@ 0x24
		Dmax = Dmid;
 8003844:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003846:	667b      	str	r3, [r7, #100]	@ 0x64
		Dmid = t;
 8003848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800384a:	663b      	str	r3, [r7, #96]	@ 0x60
	}
	if (Dmid < Dmin)
 800384c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800384e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003850:	429a      	cmp	r2, r3
 8003852:	da05      	bge.n	8003860 <svpwm_compute_T012_q31+0x104>
	{
		int32_t t = Dmid;
 8003854:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003856:	623b      	str	r3, [r7, #32]
		Dmid = Dmin;
 8003858:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800385a:	663b      	str	r3, [r7, #96]	@ 0x60
		Dmin = t;
 800385c:	6a3b      	ldr	r3, [r7, #32]
 800385e:	65fb      	str	r3, [r7, #92]	@ 0x5c
	}
	if (Dmax < Dmid)
 8003860:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003862:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003864:	429a      	cmp	r2, r3
 8003866:	da05      	bge.n	8003874 <svpwm_compute_T012_q31+0x118>
	{
		int32_t t = Dmax;
 8003868:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800386a:	61fb      	str	r3, [r7, #28]
		Dmax = Dmid;
 800386c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800386e:	667b      	str	r3, [r7, #100]	@ 0x64
		Dmid = t;
 8003870:	69fb      	ldr	r3, [r7, #28]
 8003872:	663b      	str	r3, [r7, #96]	@ 0x60
	}

	int32_t T1 = q31_sub_sat(Dmid, Dmin);
 8003874:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8003876:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8003878:	f7ff fc5d 	bl	8003136 <q31_sub_sat>
 800387c:	61b8      	str	r0, [r7, #24]
	int32_t T2 = q31_sub_sat(Dmax, Dmid);
 800387e:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8003880:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8003882:	f7ff fc58 	bl	8003136 <q31_sub_sat>
 8003886:	6178      	str	r0, [r7, #20]
	int32_t T0 = q31_sub_sat(Q31_ONE, q31_add_sat(T1, T2));
 8003888:	6979      	ldr	r1, [r7, #20]
 800388a:	69b8      	ldr	r0, [r7, #24]
 800388c:	f7ff fc1e 	bl	80030cc <q31_add_sat>
 8003890:	4603      	mov	r3, r0
 8003892:	4619      	mov	r1, r3
 8003894:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 8003898:	f7ff fc4d 	bl	8003136 <q31_sub_sat>
 800389c:	6138      	str	r0, [r7, #16]

	if (T0_q31)
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d002      	beq.n	80038aa <svpwm_compute_T012_q31+0x14e>
		*T0_q31 = T0;
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	693a      	ldr	r2, [r7, #16]
 80038a8:	601a      	str	r2, [r3, #0]
	if (T1_q31)
 80038aa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d002      	beq.n	80038b6 <svpwm_compute_T012_q31+0x15a>
		*T1_q31 = T1;
 80038b0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80038b2:	69ba      	ldr	r2, [r7, #24]
 80038b4:	601a      	str	r2, [r3, #0]
	if (T2_q31)
 80038b6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d002      	beq.n	80038c2 <svpwm_compute_T012_q31+0x166>
		*T2_q31 = T2;
 80038bc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80038be:	697a      	ldr	r2, [r7, #20]
 80038c0:	601a      	str	r2, [r3, #0]
	if (Da_q31)
 80038c2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d003      	beq.n	80038d2 <svpwm_compute_T012_q31+0x176>
		*Da_q31 = Da;
 80038ca:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80038ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80038d0:	601a      	str	r2, [r3, #0]
	if (Db_q31)
 80038d2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d003      	beq.n	80038e2 <svpwm_compute_T012_q31+0x186>
		*Db_q31 = Db;
 80038da:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80038de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80038e0:	601a      	str	r2, [r3, #0]
	if (Dc_q31)
 80038e2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d003      	beq.n	80038f2 <svpwm_compute_T012_q31+0x196>
		*Dc_q31 = Dc;
 80038ea:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80038ee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80038f0:	601a      	str	r2, [r3, #0]
}
 80038f2:	bf00      	nop
 80038f4:	376c      	adds	r7, #108	@ 0x6c
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd90      	pop	{r4, r7, pc}
 80038fa:	bf00      	nop
 80038fc:	c0000001 	.word	0xc0000001
 8003900:	6ed9eba2 	.word	0x6ed9eba2

08003904 <FOC_Init>:

void FOC_Init(FOC_t *foc)
{
 8003904:	b480      	push	{r7}
 8003906:	b083      	sub	sp, #12
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
	foc->Id_ref_q31 = Q31_FROM_FLOAT(0.0f);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2200      	movs	r2, #0
 8003910:	601a      	str	r2, [r3, #0]
	foc->Iq_ref_q31 = Q31_FROM_FLOAT(0.0f);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2200      	movs	r2, #0
 8003916:	605a      	str	r2, [r3, #4]

	foc->Kp_d_q31 = Q31_FROM_FLOAT(0.1f);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	4a10      	ldr	r2, [pc, #64]	@ (800395c <FOC_Init+0x58>)
 800391c:	609a      	str	r2, [r3, #8]
	foc->Ki_d_q31 = Q31_FROM_FLOAT(0.01f);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	4a0f      	ldr	r2, [pc, #60]	@ (8003960 <FOC_Init+0x5c>)
 8003922:	60da      	str	r2, [r3, #12]
	foc->Kp_q_q31 = Q31_FROM_FLOAT(0.1f);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	4a0d      	ldr	r2, [pc, #52]	@ (800395c <FOC_Init+0x58>)
 8003928:	611a      	str	r2, [r3, #16]
	foc->Ki_q_q31 = Q31_FROM_FLOAT(0.01f);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	4a0c      	ldr	r2, [pc, #48]	@ (8003960 <FOC_Init+0x5c>)
 800392e:	615a      	str	r2, [r3, #20]

	foc->Id_i_q31 = 0;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2200      	movs	r2, #0
 8003934:	619a      	str	r2, [r3, #24]
	foc->Iq_i_q31 = 0;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2200      	movs	r2, #0
 800393a:	61da      	str	r2, [r3, #28]

	foc->Vbus_q31 = Q31_FROM_FLOAT(24.0f);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8003942:	621a      	str	r2, [r3, #32]
	foc->v_alpha_q31 = 0;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2200      	movs	r2, #0
 8003948:	625a      	str	r2, [r3, #36]	@ 0x24
	foc->v_beta_q31 = 0;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2200      	movs	r2, #0
 800394e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003950:	bf00      	nop
 8003952:	370c      	adds	r7, #12
 8003954:	46bd      	mov	sp, r7
 8003956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395a:	4770      	bx	lr
 800395c:	0cccccd0 	.word	0x0cccccd0
 8003960:	0147ae14 	.word	0x0147ae14

08003964 <FOC_CurrentLoopStep>:

void FOC_CurrentLoopStep(FOC_t *foc, int32_t i_a_q31, int32_t i_b_q31,
		int32_t i_c_q31, int32_t theta_q31)
{
 8003964:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003968:	b0ba      	sub	sp, #232	@ 0xe8
 800396a:	af02      	add	r7, sp, #8
 800396c:	66f8      	str	r0, [r7, #108]	@ 0x6c
 800396e:	66b9      	str	r1, [r7, #104]	@ 0x68
 8003970:	667a      	str	r2, [r7, #100]	@ 0x64
 8003972:	663b      	str	r3, [r7, #96]	@ 0x60
	int32_t vd;
	int32_t vq;
	int32_t i_alpha = i_a_q31;
 8003974:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003976:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
	int32_t two_ib = q31_add_sat(i_b_q31, i_b_q31);
 800397a:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800397c:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 800397e:	f7ff fba5 	bl	80030cc <q31_add_sat>
 8003982:	f8c7 00d8 	str.w	r0, [r7, #216]	@ 0xd8
	int32_t sum = q31_add_sat(i_a_q31, two_ib);
 8003986:	f8d7 10d8 	ldr.w	r1, [r7, #216]	@ 0xd8
 800398a:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 800398c:	f7ff fb9e 	bl	80030cc <q31_add_sat>
 8003990:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
	int32_t i_beta = q31_mul(sum, Q31_INV_SQRT3);
 8003994:	49c9      	ldr	r1, [pc, #804]	@ (8003cbc <FOC_CurrentLoopStep+0x358>)
 8003996:	f8d7 00d4 	ldr.w	r0, [r7, #212]	@ 0xd4
 800399a:	f7ff fb4f 	bl	800303c <q31_mul>
 800399e:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0

	int32_t s, c;
	sincos_q31(theta_q31, &s, &c);
 80039a2:	f107 0274 	add.w	r2, r7, #116	@ 0x74
 80039a6:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 80039aa:	4619      	mov	r1, r3
 80039ac:	f8d7 0100 	ldr.w	r0, [r7, #256]	@ 0x100
 80039b0:	f7fd fefe 	bl	80017b0 <sincos_q31>

	// Park
	int32_t d1 = q31_mul(c, i_alpha);
 80039b4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80039b6:	f8d7 10dc 	ldr.w	r1, [r7, #220]	@ 0xdc
 80039ba:	4618      	mov	r0, r3
 80039bc:	f7ff fb3e 	bl	800303c <q31_mul>
 80039c0:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
	int32_t d2 = q31_mul(s, i_beta);
 80039c4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80039c6:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 80039ca:	4618      	mov	r0, r3
 80039cc:	f7ff fb36 	bl	800303c <q31_mul>
 80039d0:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
	int32_t id = q31_add_sat(d1, d2);
 80039d4:	f8d7 10c8 	ldr.w	r1, [r7, #200]	@ 0xc8
 80039d8:	f8d7 00cc 	ldr.w	r0, [r7, #204]	@ 0xcc
 80039dc:	f7ff fb76 	bl	80030cc <q31_add_sat>
 80039e0:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

	int32_t q1 = q31_mul(-s, i_alpha);
 80039e4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80039e6:	425b      	negs	r3, r3
 80039e8:	f8d7 10dc 	ldr.w	r1, [r7, #220]	@ 0xdc
 80039ec:	4618      	mov	r0, r3
 80039ee:	f7ff fb25 	bl	800303c <q31_mul>
 80039f2:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0
	int32_t q2 = q31_mul(c, i_beta);
 80039f6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80039f8:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 80039fc:	4618      	mov	r0, r3
 80039fe:	f7ff fb1d 	bl	800303c <q31_mul>
 8003a02:	f8c7 00bc 	str.w	r0, [r7, #188]	@ 0xbc
	int32_t iq = q31_add_sat(q1, q2);
 8003a06:	f8d7 10bc 	ldr.w	r1, [r7, #188]	@ 0xbc
 8003a0a:	f8d7 00c0 	ldr.w	r0, [r7, #192]	@ 0xc0
 8003a0e:	f7ff fb5d 	bl	80030cc <q31_add_sat>
 8003a12:	f8c7 00b8 	str.w	r0, [r7, #184]	@ 0xb8
               static pid_q16_16_t pid_d, pid_q;
               static softstart_t  ss;
               static int          inited = 0;
               static int32_t      u_d_prev = 0, u_q_prev = 0;

               if (!inited)
 8003a16:	4baa      	ldr	r3, [pc, #680]	@ (8003cc0 <FOC_CurrentLoopStep+0x35c>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d135      	bne.n	8003a8a <FOC_CurrentLoopStep+0x126>
               {
                       pid_q16_16_init(&pid_d);
 8003a1e:	48a9      	ldr	r0, [pc, #676]	@ (8003cc4 <FOC_CurrentLoopStep+0x360>)
 8003a20:	f7ff fcf1 	bl	8003406 <pid_q16_16_init>
                       pid_q16_16_init(&pid_q);
 8003a24:	48a8      	ldr	r0, [pc, #672]	@ (8003cc8 <FOC_CurrentLoopStep+0x364>)
 8003a26:	f7ff fcee 	bl	8003406 <pid_q16_16_init>
                       pid_d.kp = (3<<16); pid_d.ki = (40<<16); pid_d.kd = 0;
 8003a2a:	4aa6      	ldr	r2, [pc, #664]	@ (8003cc4 <FOC_CurrentLoopStep+0x360>)
 8003a2c:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8003a30:	6013      	str	r3, [r2, #0]
 8003a32:	4aa4      	ldr	r2, [pc, #656]	@ (8003cc4 <FOC_CurrentLoopStep+0x360>)
 8003a34:	f44f 1320 	mov.w	r3, #2621440	@ 0x280000
 8003a38:	6053      	str	r3, [r2, #4]
 8003a3a:	4aa2      	ldr	r2, [pc, #648]	@ (8003cc4 <FOC_CurrentLoopStep+0x360>)
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	6093      	str	r3, [r2, #8]
                       pid_q.kp = (3<<16); pid_q.ki = (40<<16); pid_q.kd = 0;
 8003a40:	4aa1      	ldr	r2, [pc, #644]	@ (8003cc8 <FOC_CurrentLoopStep+0x364>)
 8003a42:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8003a46:	6013      	str	r3, [r2, #0]
 8003a48:	4a9f      	ldr	r2, [pc, #636]	@ (8003cc8 <FOC_CurrentLoopStep+0x364>)
 8003a4a:	f44f 1320 	mov.w	r3, #2621440	@ 0x280000
 8003a4e:	6053      	str	r3, [r2, #4]
 8003a50:	4a9d      	ldr	r2, [pc, #628]	@ (8003cc8 <FOC_CurrentLoopStep+0x364>)
 8003a52:	2300      	movs	r3, #0
 8003a54:	6093      	str	r3, [r2, #8]
                       pid_d.out_min = -(1<<16); pid_d.out_max = (1<<16);
 8003a56:	4a9b      	ldr	r2, [pc, #620]	@ (8003cc4 <FOC_CurrentLoopStep+0x360>)
 8003a58:	4b9c      	ldr	r3, [pc, #624]	@ (8003ccc <FOC_CurrentLoopStep+0x368>)
 8003a5a:	60d3      	str	r3, [r2, #12]
 8003a5c:	4a99      	ldr	r2, [pc, #612]	@ (8003cc4 <FOC_CurrentLoopStep+0x360>)
 8003a5e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003a62:	6113      	str	r3, [r2, #16]
                       pid_q.out_min = -(1<<16); pid_q.out_max = (1<<16);
 8003a64:	4a98      	ldr	r2, [pc, #608]	@ (8003cc8 <FOC_CurrentLoopStep+0x364>)
 8003a66:	4b99      	ldr	r3, [pc, #612]	@ (8003ccc <FOC_CurrentLoopStep+0x368>)
 8003a68:	60d3      	str	r3, [r2, #12]
 8003a6a:	4a97      	ldr	r2, [pc, #604]	@ (8003cc8 <FOC_CurrentLoopStep+0x364>)
 8003a6c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003a70:	6113      	str	r3, [r2, #16]
                       softstart_init(&ss, (int32_t)(0.3 * 65536)); /* 0.3s */
 8003a72:	f644 41cc 	movw	r1, #19660	@ 0x4ccc
 8003a76:	4896      	ldr	r0, [pc, #600]	@ (8003cd0 <FOC_CurrentLoopStep+0x36c>)
 8003a78:	f7ff fd9c 	bl	80035b4 <softstart_init>
                       softstart_enable(&ss, 1);
 8003a7c:	2101      	movs	r1, #1
 8003a7e:	4894      	ldr	r0, [pc, #592]	@ (8003cd0 <FOC_CurrentLoopStep+0x36c>)
 8003a80:	f7ff fdb7 	bl	80035f2 <softstart_enable>
                       inited = 1;
 8003a84:	4a8e      	ldr	r2, [pc, #568]	@ (8003cc0 <FOC_CurrentLoopStep+0x35c>)
 8003a86:	2301      	movs	r3, #1
 8003a88:	6013      	str	r3, [r2, #0]
               }

               /* Id/Iq 実測と参照を Q16.16[A] へ変換 */
               int32_t id_A_q16     = (int32_t)(( (int64_t)id >> 15) * I_MAX_A_Q16 >> 16);
 8003a8a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003a8e:	13db      	asrs	r3, r3, #15
 8003a90:	17da      	asrs	r2, r3, #31
 8003a92:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003a94:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003a96:	4b8f      	ldr	r3, [pc, #572]	@ (8003cd4 <FOC_CurrentLoopStep+0x370>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	17da      	asrs	r2, r3, #31
 8003a9c:	653b      	str	r3, [r7, #80]	@ 0x50
 8003a9e:	657a      	str	r2, [r7, #84]	@ 0x54
 8003aa0:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 8003aa4:	460b      	mov	r3, r1
 8003aa6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8003aa8:	fb02 f203 	mul.w	r2, r2, r3
 8003aac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003aae:	e9c7 0116 	strd	r0, r1, [r7, #88]	@ 0x58
 8003ab2:	4601      	mov	r1, r0
 8003ab4:	fb01 f303 	mul.w	r3, r1, r3
 8003ab8:	4413      	add	r3, r2
 8003aba:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003abc:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8003abe:	fba2 4501 	umull	r4, r5, r2, r1
 8003ac2:	442b      	add	r3, r5
 8003ac4:	461d      	mov	r5, r3
 8003ac6:	f04f 0200 	mov.w	r2, #0
 8003aca:	f04f 0300 	mov.w	r3, #0
 8003ace:	0c22      	lsrs	r2, r4, #16
 8003ad0:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
 8003ad4:	142b      	asrs	r3, r5, #16
 8003ad6:	4613      	mov	r3, r2
 8003ad8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
               int32_t iq_A_q16     = (int32_t)(( (int64_t)iq >> 15) * I_MAX_A_Q16 >> 16);
 8003adc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003ae0:	13db      	asrs	r3, r3, #15
 8003ae2:	17da      	asrs	r2, r3, #31
 8003ae4:	633b      	str	r3, [r7, #48]	@ 0x30
 8003ae6:	637a      	str	r2, [r7, #52]	@ 0x34
 8003ae8:	4b7a      	ldr	r3, [pc, #488]	@ (8003cd4 <FOC_CurrentLoopStep+0x370>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	17da      	asrs	r2, r3, #31
 8003aee:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003af0:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003af2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8003af6:	460b      	mov	r3, r1
 8003af8:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8003afc:	4622      	mov	r2, r4
 8003afe:	fb02 f203 	mul.w	r2, r2, r3
 8003b02:	e9c7 4512 	strd	r4, r5, [r7, #72]	@ 0x48
 8003b06:	462b      	mov	r3, r5
 8003b08:	4604      	mov	r4, r0
 8003b0a:	460d      	mov	r5, r1
 8003b0c:	4621      	mov	r1, r4
 8003b0e:	fb01 f303 	mul.w	r3, r1, r3
 8003b12:	4413      	add	r3, r2
 8003b14:	4622      	mov	r2, r4
 8003b16:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8003b18:	fba2 8901 	umull	r8, r9, r2, r1
 8003b1c:	444b      	add	r3, r9
 8003b1e:	4699      	mov	r9, r3
 8003b20:	f04f 0200 	mov.w	r2, #0
 8003b24:	f04f 0300 	mov.w	r3, #0
 8003b28:	ea4f 4218 	mov.w	r2, r8, lsr #16
 8003b2c:	ea42 4209 	orr.w	r2, r2, r9, lsl #16
 8003b30:	ea4f 4329 	mov.w	r3, r9, asr #16
 8003b34:	4613      	mov	r3, r2
 8003b36:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
               int32_t Id_ref_A_q16 = (int32_t)(( (int64_t)foc->Id_ref_q31 >> 15) * I_MAX_A_Q16 >> 16);
 8003b3a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	13db      	asrs	r3, r3, #15
 8003b40:	17da      	asrs	r2, r3, #31
 8003b42:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003b44:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003b46:	4b63      	ldr	r3, [pc, #396]	@ (8003cd4 <FOC_CurrentLoopStep+0x370>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	17da      	asrs	r2, r3, #31
 8003b4c:	623b      	str	r3, [r7, #32]
 8003b4e:	627a      	str	r2, [r7, #36]	@ 0x24
 8003b50:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 8003b54:	462b      	mov	r3, r5
 8003b56:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003b5a:	4642      	mov	r2, r8
 8003b5c:	fb02 f203 	mul.w	r2, r2, r3
 8003b60:	464b      	mov	r3, r9
 8003b62:	4621      	mov	r1, r4
 8003b64:	fb01 f303 	mul.w	r3, r1, r3
 8003b68:	4413      	add	r3, r2
 8003b6a:	4622      	mov	r2, r4
 8003b6c:	4641      	mov	r1, r8
 8003b6e:	fba2 ab01 	umull	sl, fp, r2, r1
 8003b72:	445b      	add	r3, fp
 8003b74:	469b      	mov	fp, r3
 8003b76:	f04f 0200 	mov.w	r2, #0
 8003b7a:	f04f 0300 	mov.w	r3, #0
 8003b7e:	ea4f 421a 	mov.w	r2, sl, lsr #16
 8003b82:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
 8003b86:	ea4f 432b 	mov.w	r3, fp, asr #16
 8003b8a:	4613      	mov	r3, r2
 8003b8c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
               int32_t Iq_ref_A_q16 = (int32_t)(( (int64_t)foc->Iq_ref_q31 >> 15) * I_MAX_A_Q16 >> 16);
 8003b90:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	13db      	asrs	r3, r3, #15
 8003b96:	17da      	asrs	r2, r3, #31
 8003b98:	61bb      	str	r3, [r7, #24]
 8003b9a:	61fa      	str	r2, [r7, #28]
 8003b9c:	4b4d      	ldr	r3, [pc, #308]	@ (8003cd4 <FOC_CurrentLoopStep+0x370>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	17da      	asrs	r2, r3, #31
 8003ba2:	613b      	str	r3, [r7, #16]
 8003ba4:	617a      	str	r2, [r7, #20]
 8003ba6:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8003baa:	462b      	mov	r3, r5
 8003bac:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8003bb0:	4642      	mov	r2, r8
 8003bb2:	fb02 f203 	mul.w	r2, r2, r3
 8003bb6:	464b      	mov	r3, r9
 8003bb8:	4621      	mov	r1, r4
 8003bba:	fb01 f303 	mul.w	r3, r1, r3
 8003bbe:	4413      	add	r3, r2
 8003bc0:	4622      	mov	r2, r4
 8003bc2:	4641      	mov	r1, r8
 8003bc4:	fba2 1201 	umull	r1, r2, r2, r1
 8003bc8:	647a      	str	r2, [r7, #68]	@ 0x44
 8003bca:	460a      	mov	r2, r1
 8003bcc:	643a      	str	r2, [r7, #64]	@ 0x40
 8003bce:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003bd0:	4413      	add	r3, r2
 8003bd2:	647b      	str	r3, [r7, #68]	@ 0x44
 8003bd4:	f04f 0200 	mov.w	r2, #0
 8003bd8:	f04f 0300 	mov.w	r3, #0
 8003bdc:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 8003be0:	4621      	mov	r1, r4
 8003be2:	0c0a      	lsrs	r2, r1, #16
 8003be4:	4629      	mov	r1, r5
 8003be6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003bea:	4629      	mov	r1, r5
 8003bec:	140b      	asrs	r3, r1, #16
 8003bee:	4613      	mov	r3, r2
 8003bf0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

               /* ソフトスタートで Iq_ref を段階的に上げる */
               int32_t ss_gain = softstart_step(&ss, DT_Q16);
 8003bf4:	4b38      	ldr	r3, [pc, #224]	@ (8003cd8 <FOC_CurrentLoopStep+0x374>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4619      	mov	r1, r3
 8003bfa:	4835      	ldr	r0, [pc, #212]	@ (8003cd0 <FOC_CurrentLoopStep+0x36c>)
 8003bfc:	f7ff fd0e 	bl	800361c <softstart_step>
 8003c00:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4
               Iq_ref_A_q16 = (int32_t)(( (int64_t)Iq_ref_A_q16 * ss_gain) >> 16);
 8003c04:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003c08:	17da      	asrs	r2, r3, #31
 8003c0a:	60bb      	str	r3, [r7, #8]
 8003c0c:	60fa      	str	r2, [r7, #12]
 8003c0e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003c12:	17da      	asrs	r2, r3, #31
 8003c14:	603b      	str	r3, [r7, #0]
 8003c16:	607a      	str	r2, [r7, #4]
 8003c18:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003c1c:	462b      	mov	r3, r5
 8003c1e:	e9d7 8900 	ldrd	r8, r9, [r7]
 8003c22:	4642      	mov	r2, r8
 8003c24:	fb02 f203 	mul.w	r2, r2, r3
 8003c28:	464b      	mov	r3, r9
 8003c2a:	4621      	mov	r1, r4
 8003c2c:	fb01 f303 	mul.w	r3, r1, r3
 8003c30:	4413      	add	r3, r2
 8003c32:	4622      	mov	r2, r4
 8003c34:	4641      	mov	r1, r8
 8003c36:	fba2 1201 	umull	r1, r2, r2, r1
 8003c3a:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003c3c:	460a      	mov	r2, r1
 8003c3e:	63ba      	str	r2, [r7, #56]	@ 0x38
 8003c40:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003c42:	4413      	add	r3, r2
 8003c44:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003c46:	f04f 0200 	mov.w	r2, #0
 8003c4a:	f04f 0300 	mov.w	r3, #0
 8003c4e:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 8003c52:	4621      	mov	r1, r4
 8003c54:	0c0a      	lsrs	r2, r1, #16
 8003c56:	4629      	mov	r1, r5
 8003c58:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003c5c:	4629      	mov	r1, r5
 8003c5e:	140b      	asrs	r3, r1, #16
 8003c60:	4613      	mov	r3, r2
 8003c62:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

               /* PID 実行（出力は正規化電圧[-1..1]の Q16.16）*/
               int32_t u_d_q16 = pid_q16_16_step(&pid_d, Id_ref_A_q16, id_A_q16, DT_Q16);
 8003c66:	4b1c      	ldr	r3, [pc, #112]	@ (8003cd8 <FOC_CurrentLoopStep+0x374>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003c6e:	f8d7 10ac 	ldr.w	r1, [r7, #172]	@ 0xac
 8003c72:	4814      	ldr	r0, [pc, #80]	@ (8003cc4 <FOC_CurrentLoopStep+0x360>)
 8003c74:	f7ff fbd7 	bl	8003426 <pid_q16_16_step>
 8003c78:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0
               int32_t u_q_q16 = pid_q16_16_step(&pid_q, Iq_ref_A_q16, iq_A_q16, DT_Q16);
 8003c7c:	4b16      	ldr	r3, [pc, #88]	@ (8003cd8 <FOC_CurrentLoopStep+0x374>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003c84:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 8003c88:	480f      	ldr	r0, [pc, #60]	@ (8003cc8 <FOC_CurrentLoopStep+0x364>)
 8003c8a:	f7ff fbcc 	bl	8003426 <pid_q16_16_step>
 8003c8e:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c

               /* スルーレート制限 */
               u_d_q16 = q16_16_slew_step(u_d_prev, u_d_q16, SLEW_UP_Q16, SLEW_DN_Q16, DT_Q16);
 8003c92:	4b12      	ldr	r3, [pc, #72]	@ (8003cdc <FOC_CurrentLoopStep+0x378>)
 8003c94:	6818      	ldr	r0, [r3, #0]
 8003c96:	4b12      	ldr	r3, [pc, #72]	@ (8003ce0 <FOC_CurrentLoopStep+0x37c>)
 8003c98:	681a      	ldr	r2, [r3, #0]
 8003c9a:	4b12      	ldr	r3, [pc, #72]	@ (8003ce4 <FOC_CurrentLoopStep+0x380>)
 8003c9c:	6819      	ldr	r1, [r3, #0]
 8003c9e:	4b0e      	ldr	r3, [pc, #56]	@ (8003cd8 <FOC_CurrentLoopStep+0x374>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	9300      	str	r3, [sp, #0]
 8003ca4:	460b      	mov	r3, r1
 8003ca6:	f8d7 10a0 	ldr.w	r1, [r7, #160]	@ 0xa0
 8003caa:	f7ff fc44 	bl	8003536 <q16_16_slew_step>
 8003cae:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0
               u_q_q16 = q16_16_slew_step(u_q_prev, u_q_q16, SLEW_UP_Q16, SLEW_DN_Q16, DT_Q16);
 8003cb2:	4b0d      	ldr	r3, [pc, #52]	@ (8003ce8 <FOC_CurrentLoopStep+0x384>)
 8003cb4:	6818      	ldr	r0, [r3, #0]
 8003cb6:	4b0a      	ldr	r3, [pc, #40]	@ (8003ce0 <FOC_CurrentLoopStep+0x37c>)
 8003cb8:	681a      	ldr	r2, [r3, #0]
 8003cba:	e017      	b.n	8003cec <FOC_CurrentLoopStep+0x388>
 8003cbc:	49e69d16 	.word	0x49e69d16
 8003cc0:	200002f4 	.word	0x200002f4
 8003cc4:	200002f8 	.word	0x200002f8
 8003cc8:	20000314 	.word	0x20000314
 8003ccc:	ffff0000 	.word	0xffff0000
 8003cd0:	20000330 	.word	0x20000330
 8003cd4:	08006b90 	.word	0x08006b90
 8003cd8:	08006b94 	.word	0x08006b94
 8003cdc:	2000033c 	.word	0x2000033c
 8003ce0:	08006b98 	.word	0x08006b98
 8003ce4:	08006b9c 	.word	0x08006b9c
 8003ce8:	20000340 	.word	0x20000340
 8003cec:	4b31      	ldr	r3, [pc, #196]	@ (8003db4 <FOC_CurrentLoopStep+0x450>)
 8003cee:	6819      	ldr	r1, [r3, #0]
 8003cf0:	4b31      	ldr	r3, [pc, #196]	@ (8003db8 <FOC_CurrentLoopStep+0x454>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	9300      	str	r3, [sp, #0]
 8003cf6:	460b      	mov	r3, r1
 8003cf8:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 8003cfc:	f7ff fc1b 	bl	8003536 <q16_16_slew_step>
 8003d00:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
               u_d_prev = u_d_q16; u_q_prev = u_q_q16;
 8003d04:	4a2d      	ldr	r2, [pc, #180]	@ (8003dbc <FOC_CurrentLoopStep+0x458>)
 8003d06:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003d0a:	6013      	str	r3, [r2, #0]
 8003d0c:	4a2c      	ldr	r2, [pc, #176]	@ (8003dc0 <FOC_CurrentLoopStep+0x45c>)
 8003d0e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003d12:	6013      	str	r3, [r2, #0]

               /* Q31 へ戻す（-1..1） */
               vd = (int32_t)(( (int64_t)u_d_q16 ) << 15);
 8003d14:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003d18:	03db      	lsls	r3, r3, #15
 8003d1a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
               vq = (int32_t)(( (int64_t)u_q_q16 ) << 15);
 8003d1e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003d22:	03db      	lsls	r3, r3, #15
 8003d24:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
               /* ↓（そのまま下の逆Parkへ連続） */
               /* fallthrough */
       }

	// 逆Park
	int32_t a1 = q31_mul(c, vd);
 8003d28:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003d2a:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f7ff f984 	bl	800303c <q31_mul>
 8003d34:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90
	int32_t a2 = q31_mul(-s, vq);
 8003d38:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003d3a:	425b      	negs	r3, r3
 8003d3c:	f8d7 1094 	ldr.w	r1, [r7, #148]	@ 0x94
 8003d40:	4618      	mov	r0, r3
 8003d42:	f7ff f97b 	bl	800303c <q31_mul>
 8003d46:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
	int32_t v_alpha = q31_add_sat(a1, a2);
 8003d4a:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 8003d4e:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 8003d52:	f7ff f9bb 	bl	80030cc <q31_add_sat>
 8003d56:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88

	int32_t b1 = q31_mul(s, vd);
 8003d5a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003d5c:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 8003d60:	4618      	mov	r0, r3
 8003d62:	f7ff f96b 	bl	800303c <q31_mul>
 8003d66:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
	int32_t b2 = q31_mul(c, vq);
 8003d6a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003d6c:	f8d7 1094 	ldr.w	r1, [r7, #148]	@ 0x94
 8003d70:	4618      	mov	r0, r3
 8003d72:	f7ff f963 	bl	800303c <q31_mul>
 8003d76:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
	int32_t v_beta = q31_add_sat(b1, b2);
 8003d7a:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 8003d7e:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8003d82:	f7ff f9a3 	bl	80030cc <q31_add_sat>
 8003d86:	67f8      	str	r0, [r7, #124]	@ 0x7c

	foc->v_alpha_q31 = v_alpha;
 8003d88:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003d8a:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8003d8e:	625a      	str	r2, [r3, #36]	@ 0x24
	foc->v_beta_q31 = v_beta;
 8003d90:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003d92:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8003d94:	629a      	str	r2, [r3, #40]	@ 0x28

	// （任意）ここでセクタを参照できる
	volatile uint8_t sector = svm_sector_from_alphabeta_q31(v_alpha, v_beta);
 8003d96:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003d98:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8003d9c:	f7ff fc6c 	bl	8003678 <svm_sector_from_alphabeta_q31>
 8003da0:	4603      	mov	r3, r0
 8003da2:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73
	(void) sector;
 8003da6:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
}
 8003daa:	bf00      	nop
 8003dac:	37e0      	adds	r7, #224	@ 0xe0
 8003dae:	46bd      	mov	sp, r7
 8003db0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003db4:	08006b9c 	.word	0x08006b9c
 8003db8:	08006b94 	.word	0x08006b94
 8003dbc:	2000033c 	.word	0x2000033c
 8003dc0:	20000340 	.word	0x20000340

08003dc4 <FOC_AlphaBetaToSVPWM>:

void FOC_AlphaBetaToSVPWM(FOC_t *foc, uint16_t *ccr1, uint16_t *ccr2,
		uint16_t *ccr3, uint16_t arr)
{
 8003dc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003dc8:	b0ab      	sub	sp, #172	@ 0xac
 8003dca:	af06      	add	r7, sp, #24
 8003dcc:	6578      	str	r0, [r7, #84]	@ 0x54
 8003dce:	6539      	str	r1, [r7, #80]	@ 0x50
 8003dd0:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003dd2:	64bb      	str	r3, [r7, #72]	@ 0x48
	// vαβ から T0,T1,T2 と相デューティを生成（半キャリア正規化）
	uint8_t sector = svm_sector_from_alphabeta_q31(foc->v_alpha_q31,
 8003dd4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003dd6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003dd8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003dda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ddc:	4619      	mov	r1, r3
 8003dde:	4610      	mov	r0, r2
 8003de0:	f7ff fc4a 	bl	8003678 <svm_sector_from_alphabeta_q31>
 8003de4:	4603      	mov	r3, r0
 8003de6:	f887 308b 	strb.w	r3, [r7, #139]	@ 0x8b
			foc->v_beta_q31);

	int32_t T0, T1, T2, Da, Db, Dc; // Q31
	svpwm_compute_T012_q31(foc->v_alpha_q31, foc->v_beta_q31, sector, &T0, &T1,
 8003dea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003dec:	6a5e      	ldr	r6, [r3, #36]	@ 0x24
 8003dee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003df0:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8003df2:	f107 0170 	add.w	r1, r7, #112	@ 0x70
 8003df6:	f897 208b 	ldrb.w	r2, [r7, #139]	@ 0x8b
 8003dfa:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8003dfe:	9304      	str	r3, [sp, #16]
 8003e00:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8003e04:	9303      	str	r3, [sp, #12]
 8003e06:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003e0a:	9302      	str	r3, [sp, #8]
 8003e0c:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8003e10:	9301      	str	r3, [sp, #4]
 8003e12:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8003e16:	9300      	str	r3, [sp, #0]
 8003e18:	460b      	mov	r3, r1
 8003e1a:	4601      	mov	r1, r0
 8003e1c:	4630      	mov	r0, r6
 8003e1e:	f7ff fc9d 	bl	800375c <svpwm_compute_T012_q31>
			&T2, &Da, &Db, &Dc);

	// デューティを [0..ARR] へマップ
	uint16_t d1 = (uint16_t) ((((int64_t) Da) * arr) >> 31);
 8003e22:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003e24:	17da      	asrs	r2, r3, #31
 8003e26:	643b      	str	r3, [r7, #64]	@ 0x40
 8003e28:	647a      	str	r2, [r7, #68]	@ 0x44
 8003e2a:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	@ 0xb8
 8003e2e:	2200      	movs	r2, #0
 8003e30:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003e32:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003e34:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8003e38:	460b      	mov	r3, r1
 8003e3a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003e3c:	fb02 f203 	mul.w	r2, r2, r3
 8003e40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e42:	e9c7 0110 	strd	r0, r1, [r7, #64]	@ 0x40
 8003e46:	4601      	mov	r1, r0
 8003e48:	fb01 f303 	mul.w	r3, r1, r3
 8003e4c:	4413      	add	r3, r2
 8003e4e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003e50:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003e52:	fba2 4501 	umull	r4, r5, r2, r1
 8003e56:	442b      	add	r3, r5
 8003e58:	461d      	mov	r5, r3
 8003e5a:	f04f 0200 	mov.w	r2, #0
 8003e5e:	f04f 0300 	mov.w	r3, #0
 8003e62:	0fe2      	lsrs	r2, r4, #31
 8003e64:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
 8003e68:	17eb      	asrs	r3, r5, #31
 8003e6a:	4613      	mov	r3, r2
 8003e6c:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
	uint16_t d2 = (uint16_t) ((((int64_t) Db) * arr) >> 31);
 8003e70:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003e72:	17da      	asrs	r2, r3, #31
 8003e74:	623b      	str	r3, [r7, #32]
 8003e76:	627a      	str	r2, [r7, #36]	@ 0x24
 8003e78:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	@ 0xb8
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	633b      	str	r3, [r7, #48]	@ 0x30
 8003e80:	637a      	str	r2, [r7, #52]	@ 0x34
 8003e82:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003e86:	460b      	mov	r3, r1
 8003e88:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003e8c:	4622      	mov	r2, r4
 8003e8e:	fb02 f203 	mul.w	r2, r2, r3
 8003e92:	e9c7 450c 	strd	r4, r5, [r7, #48]	@ 0x30
 8003e96:	462b      	mov	r3, r5
 8003e98:	4604      	mov	r4, r0
 8003e9a:	460d      	mov	r5, r1
 8003e9c:	4621      	mov	r1, r4
 8003e9e:	fb01 f303 	mul.w	r3, r1, r3
 8003ea2:	4413      	add	r3, r2
 8003ea4:	4622      	mov	r2, r4
 8003ea6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003ea8:	fba2 8901 	umull	r8, r9, r2, r1
 8003eac:	444b      	add	r3, r9
 8003eae:	4699      	mov	r9, r3
 8003eb0:	f04f 0200 	mov.w	r2, #0
 8003eb4:	f04f 0300 	mov.w	r3, #0
 8003eb8:	ea4f 72d8 	mov.w	r2, r8, lsr #31
 8003ebc:	ea42 0249 	orr.w	r2, r2, r9, lsl #1
 8003ec0:	ea4f 73e9 	mov.w	r3, r9, asr #31
 8003ec4:	4613      	mov	r3, r2
 8003ec6:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
	uint16_t d3 = (uint16_t) ((((int64_t) Dc) * arr) >> 31);
 8003eca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003ecc:	17da      	asrs	r2, r3, #31
 8003ece:	61bb      	str	r3, [r7, #24]
 8003ed0:	61fa      	str	r2, [r7, #28]
 8003ed2:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	@ 0xb8
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	613b      	str	r3, [r7, #16]
 8003eda:	617a      	str	r2, [r7, #20]
 8003edc:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8003ee0:	462b      	mov	r3, r5
 8003ee2:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8003ee6:	4642      	mov	r2, r8
 8003ee8:	fb02 f203 	mul.w	r2, r2, r3
 8003eec:	464b      	mov	r3, r9
 8003eee:	4621      	mov	r1, r4
 8003ef0:	fb01 f303 	mul.w	r3, r1, r3
 8003ef4:	4413      	add	r3, r2
 8003ef6:	4622      	mov	r2, r4
 8003ef8:	4641      	mov	r1, r8
 8003efa:	fba2 1201 	umull	r1, r2, r2, r1
 8003efe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003f00:	460a      	mov	r2, r1
 8003f02:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003f04:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003f06:	4413      	add	r3, r2
 8003f08:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003f0a:	f04f 0200 	mov.w	r2, #0
 8003f0e:	f04f 0300 	mov.w	r3, #0
 8003f12:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 8003f16:	4621      	mov	r1, r4
 8003f18:	0fca      	lsrs	r2, r1, #31
 8003f1a:	4629      	mov	r1, r5
 8003f1c:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8003f20:	4629      	mov	r1, r5
 8003f22:	17cb      	asrs	r3, r1, #31
 8003f24:	4613      	mov	r3, r2
 8003f26:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84

	*ccr1 = d1;
 8003f2a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003f2c:	f8b7 2088 	ldrh.w	r2, [r7, #136]	@ 0x88
 8003f30:	801a      	strh	r2, [r3, #0]
	*ccr2 = d2;
 8003f32:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003f34:	f8b7 2086 	ldrh.w	r2, [r7, #134]	@ 0x86
 8003f38:	801a      	strh	r2, [r3, #0]
	*ccr3 = d3;
 8003f3a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003f3c:	f8b7 2084 	ldrh.w	r2, [r7, #132]	@ 0x84
 8003f40:	801a      	strh	r2, [r3, #0]

	// --- CCR4（サンプルマーカ）自動更新 ---
	// 半キャリア: T0/2, T1, T2, T0/2 → 長いアクティブベクトル中央に配置
	int32_t Tmid_center = 0;
 8003f42:	2300      	movs	r3, #0
 8003f44:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
	if (T1 >= T2)
 8003f48:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003f4a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003f4c:	429a      	cmp	r2, r3
 8003f4e:	db14      	blt.n	8003f7a <FOC_AlphaBetaToSVPWM+0x1b6>
	{
		Tmid_center = q31_add_sat(q31_mul(T0, Q31_HALF), q31_mul(T1, Q31_HALF));
 8003f50:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003f52:	f06f 4140 	mvn.w	r1, #3221225472	@ 0xc0000000
 8003f56:	4618      	mov	r0, r3
 8003f58:	f7ff f870 	bl	800303c <q31_mul>
 8003f5c:	4604      	mov	r4, r0
 8003f5e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003f60:	f06f 4140 	mvn.w	r1, #3221225472	@ 0xc0000000
 8003f64:	4618      	mov	r0, r3
 8003f66:	f7ff f869 	bl	800303c <q31_mul>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	4619      	mov	r1, r3
 8003f6e:	4620      	mov	r0, r4
 8003f70:	f7ff f8ac 	bl	80030cc <q31_add_sat>
 8003f74:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
 8003f78:	e01b      	b.n	8003fb2 <FOC_AlphaBetaToSVPWM+0x1ee>
	}
	else
	{
		int32_t t0h = q31_mul(T0, Q31_HALF);
 8003f7a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003f7c:	f06f 4140 	mvn.w	r1, #3221225472	@ 0xc0000000
 8003f80:	4618      	mov	r0, r3
 8003f82:	f7ff f85b 	bl	800303c <q31_mul>
 8003f86:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
		int32_t t2h = q31_mul(T2, Q31_HALF);
 8003f8a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003f8c:	f06f 4140 	mvn.w	r1, #3221225472	@ 0xc0000000
 8003f90:	4618      	mov	r0, r3
 8003f92:	f7ff f853 	bl	800303c <q31_mul>
 8003f96:	67f8      	str	r0, [r7, #124]	@ 0x7c
		Tmid_center = q31_add_sat(q31_add_sat(t0h, T1), t2h);
 8003f98:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003f9a:	4619      	mov	r1, r3
 8003f9c:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8003fa0:	f7ff f894 	bl	80030cc <q31_add_sat>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003fa8:	4618      	mov	r0, r3
 8003faa:	f7ff f88f 	bl	80030cc <q31_add_sat>
 8003fae:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
	}

	// セーフティマージン（例：2%）
	int32_t margin = Q31_MARGIN_2PCT;
 8003fb2:	4b1b      	ldr	r3, [pc, #108]	@ (8004020 <FOC_AlphaBetaToSVPWM+0x25c>)
 8003fb4:	67bb      	str	r3, [r7, #120]	@ 0x78
	// 必要なら Tmid_center にマージン調整を加える（ここでは中心不変）

	uint16_t c4 = (uint16_t) ((((int64_t) Tmid_center) * arr) >> 31);
 8003fb6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003fba:	17da      	asrs	r2, r3, #31
 8003fbc:	60bb      	str	r3, [r7, #8]
 8003fbe:	60fa      	str	r2, [r7, #12]
 8003fc0:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	@ 0xb8
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	603b      	str	r3, [r7, #0]
 8003fc8:	607a      	str	r2, [r7, #4]
 8003fca:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003fce:	462b      	mov	r3, r5
 8003fd0:	e9d7 8900 	ldrd	r8, r9, [r7]
 8003fd4:	4642      	mov	r2, r8
 8003fd6:	fb02 f203 	mul.w	r2, r2, r3
 8003fda:	464b      	mov	r3, r9
 8003fdc:	4621      	mov	r1, r4
 8003fde:	fb01 f303 	mul.w	r3, r1, r3
 8003fe2:	4413      	add	r3, r2
 8003fe4:	4622      	mov	r2, r4
 8003fe6:	4641      	mov	r1, r8
 8003fe8:	fba2 ab01 	umull	sl, fp, r2, r1
 8003fec:	445b      	add	r3, fp
 8003fee:	469b      	mov	fp, r3
 8003ff0:	f04f 0200 	mov.w	r2, #0
 8003ff4:	f04f 0300 	mov.w	r3, #0
 8003ff8:	ea4f 72da 	mov.w	r2, sl, lsr #31
 8003ffc:	ea42 024b 	orr.w	r2, r2, fp, lsl #1
 8004000:	ea4f 73eb 	mov.w	r3, fp, asr #31
 8004004:	4613      	mov	r3, r2
 8004006:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
	FW_SetSampleMarker(c4);
 800400a:	f8b7 3076 	ldrh.w	r3, [r7, #118]	@ 0x76
 800400e:	4618      	mov	r0, r3
 8004010:	f7fe ff58 	bl	8002ec4 <FW_SetSampleMarker>

	(void)margin;
}
 8004014:	bf00      	nop
 8004016:	3794      	adds	r7, #148	@ 0x94
 8004018:	46bd      	mov	sp, r7
 800401a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800401e:	bf00      	nop
 8004020:	028f5c29 	.word	0x028f5c29

08004024 <main>:
#include "app.h"

extern volatile uint8_t count_flag;

int main(void)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	af00      	add	r7, sp, #0
	FW_InitClocksAndGPIO();
 8004028:	f7fe fd1e 	bl	8002a68 <FW_InitClocksAndGPIO>
	FW_TIM1_InitPWM();
 800402c:	f7fe fdf6 	bl	8002c1c <FW_TIM1_InitPWM>
	FW_TIM2_Init();
 8004030:	f7fe fe8a 	bl	8002d48 <FW_TIM2_Init>
	FW_TIM3_InitBridge();
 8004034:	f7fe fea0 	bl	8002d78 <FW_TIM3_InitBridge>
	FW_TIM7_Init();
 8004038:	f7fe fed0 	bl	8002ddc <FW_TIM7_Init>

	APP_Init();
 800403c:	f7fd fd38 	bl	8001ab0 <APP_Init>

	// サンプル位相：周期中央
	FW_SetSampleMarker((uint16_t) (TIM1_ARR / 2));
 8004040:	f240 70cf 	movw	r0, #1999	@ 0x7cf
 8004044:	f7fe ff3e 	bl	8002ec4 <FW_SetSampleMarker>

	FW_StartAll();
 8004048:	f7fe feec 	bl	8002e24 <FW_StartAll>

	while (1)
	{
		if(count_flag == 1)
 800404c:	4b05      	ldr	r3, [pc, #20]	@ (8004064 <main+0x40>)
 800404e:	781b      	ldrb	r3, [r3, #0]
 8004050:	b2db      	uxtb	r3, r3
 8004052:	2b01      	cmp	r3, #1
 8004054:	d1fa      	bne.n	800404c <main+0x28>
		{
			count_flag = 0;
 8004056:	4b03      	ldr	r3, [pc, #12]	@ (8004064 <main+0x40>)
 8004058:	2200      	movs	r2, #0
 800405a:	701a      	strb	r2, [r3, #0]
			APP_Step();
 800405c:	f7fd fdf6 	bl	8001c4c <APP_Step>
		if(count_flag == 1)
 8004060:	e7f4      	b.n	800404c <main+0x28>
 8004062:	bf00      	nop
 8004064:	200002d2 	.word	0x200002d2

08004068 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004068:	b480      	push	{r7}
 800406a:	af00      	add	r7, sp, #0
  return 1;
 800406c:	2301      	movs	r3, #1
}
 800406e:	4618      	mov	r0, r3
 8004070:	46bd      	mov	sp, r7
 8004072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004076:	4770      	bx	lr

08004078 <_kill>:

int _kill(int pid, int sig)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b082      	sub	sp, #8
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
 8004080:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004082:	f000 fe8d 	bl	8004da0 <__errno>
 8004086:	4603      	mov	r3, r0
 8004088:	2216      	movs	r2, #22
 800408a:	601a      	str	r2, [r3, #0]
  return -1;
 800408c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004090:	4618      	mov	r0, r3
 8004092:	3708      	adds	r7, #8
 8004094:	46bd      	mov	sp, r7
 8004096:	bd80      	pop	{r7, pc}

08004098 <_exit>:

void _exit (int status)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b082      	sub	sp, #8
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80040a0:	f04f 31ff 	mov.w	r1, #4294967295
 80040a4:	6878      	ldr	r0, [r7, #4]
 80040a6:	f7ff ffe7 	bl	8004078 <_kill>
  while (1) {}    /* Make sure we hang here */
 80040aa:	bf00      	nop
 80040ac:	e7fd      	b.n	80040aa <_exit+0x12>

080040ae <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80040ae:	b580      	push	{r7, lr}
 80040b0:	b086      	sub	sp, #24
 80040b2:	af00      	add	r7, sp, #0
 80040b4:	60f8      	str	r0, [r7, #12]
 80040b6:	60b9      	str	r1, [r7, #8]
 80040b8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80040ba:	2300      	movs	r3, #0
 80040bc:	617b      	str	r3, [r7, #20]
 80040be:	e00a      	b.n	80040d6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80040c0:	f3af 8000 	nop.w
 80040c4:	4601      	mov	r1, r0
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	1c5a      	adds	r2, r3, #1
 80040ca:	60ba      	str	r2, [r7, #8]
 80040cc:	b2ca      	uxtb	r2, r1
 80040ce:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80040d0:	697b      	ldr	r3, [r7, #20]
 80040d2:	3301      	adds	r3, #1
 80040d4:	617b      	str	r3, [r7, #20]
 80040d6:	697a      	ldr	r2, [r7, #20]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	429a      	cmp	r2, r3
 80040dc:	dbf0      	blt.n	80040c0 <_read+0x12>
  }

  return len;
 80040de:	687b      	ldr	r3, [r7, #4]
}
 80040e0:	4618      	mov	r0, r3
 80040e2:	3718      	adds	r7, #24
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd80      	pop	{r7, pc}

080040e8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b086      	sub	sp, #24
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	60f8      	str	r0, [r7, #12]
 80040f0:	60b9      	str	r1, [r7, #8]
 80040f2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80040f4:	2300      	movs	r3, #0
 80040f6:	617b      	str	r3, [r7, #20]
 80040f8:	e009      	b.n	800410e <_write+0x26>
  {
    __io_putchar(*ptr++);
 80040fa:	68bb      	ldr	r3, [r7, #8]
 80040fc:	1c5a      	adds	r2, r3, #1
 80040fe:	60ba      	str	r2, [r7, #8]
 8004100:	781b      	ldrb	r3, [r3, #0]
 8004102:	4618      	mov	r0, r3
 8004104:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004108:	697b      	ldr	r3, [r7, #20]
 800410a:	3301      	adds	r3, #1
 800410c:	617b      	str	r3, [r7, #20]
 800410e:	697a      	ldr	r2, [r7, #20]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	429a      	cmp	r2, r3
 8004114:	dbf1      	blt.n	80040fa <_write+0x12>
  }
  return len;
 8004116:	687b      	ldr	r3, [r7, #4]
}
 8004118:	4618      	mov	r0, r3
 800411a:	3718      	adds	r7, #24
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}

08004120 <_close>:

int _close(int file)
{
 8004120:	b480      	push	{r7}
 8004122:	b083      	sub	sp, #12
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004128:	f04f 33ff 	mov.w	r3, #4294967295
}
 800412c:	4618      	mov	r0, r3
 800412e:	370c      	adds	r7, #12
 8004130:	46bd      	mov	sp, r7
 8004132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004136:	4770      	bx	lr

08004138 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004138:	b480      	push	{r7}
 800413a:	b083      	sub	sp, #12
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
 8004140:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004148:	605a      	str	r2, [r3, #4]
  return 0;
 800414a:	2300      	movs	r3, #0
}
 800414c:	4618      	mov	r0, r3
 800414e:	370c      	adds	r7, #12
 8004150:	46bd      	mov	sp, r7
 8004152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004156:	4770      	bx	lr

08004158 <_isatty>:

int _isatty(int file)
{
 8004158:	b480      	push	{r7}
 800415a:	b083      	sub	sp, #12
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004160:	2301      	movs	r3, #1
}
 8004162:	4618      	mov	r0, r3
 8004164:	370c      	adds	r7, #12
 8004166:	46bd      	mov	sp, r7
 8004168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416c:	4770      	bx	lr

0800416e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800416e:	b480      	push	{r7}
 8004170:	b085      	sub	sp, #20
 8004172:	af00      	add	r7, sp, #0
 8004174:	60f8      	str	r0, [r7, #12]
 8004176:	60b9      	str	r1, [r7, #8]
 8004178:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800417a:	2300      	movs	r3, #0
}
 800417c:	4618      	mov	r0, r3
 800417e:	3714      	adds	r7, #20
 8004180:	46bd      	mov	sp, r7
 8004182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004186:	4770      	bx	lr

08004188 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b086      	sub	sp, #24
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004190:	4a14      	ldr	r2, [pc, #80]	@ (80041e4 <_sbrk+0x5c>)
 8004192:	4b15      	ldr	r3, [pc, #84]	@ (80041e8 <_sbrk+0x60>)
 8004194:	1ad3      	subs	r3, r2, r3
 8004196:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800419c:	4b13      	ldr	r3, [pc, #76]	@ (80041ec <_sbrk+0x64>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d102      	bne.n	80041aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80041a4:	4b11      	ldr	r3, [pc, #68]	@ (80041ec <_sbrk+0x64>)
 80041a6:	4a12      	ldr	r2, [pc, #72]	@ (80041f0 <_sbrk+0x68>)
 80041a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80041aa:	4b10      	ldr	r3, [pc, #64]	@ (80041ec <_sbrk+0x64>)
 80041ac:	681a      	ldr	r2, [r3, #0]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	4413      	add	r3, r2
 80041b2:	693a      	ldr	r2, [r7, #16]
 80041b4:	429a      	cmp	r2, r3
 80041b6:	d207      	bcs.n	80041c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80041b8:	f000 fdf2 	bl	8004da0 <__errno>
 80041bc:	4603      	mov	r3, r0
 80041be:	220c      	movs	r2, #12
 80041c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80041c2:	f04f 33ff 	mov.w	r3, #4294967295
 80041c6:	e009      	b.n	80041dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80041c8:	4b08      	ldr	r3, [pc, #32]	@ (80041ec <_sbrk+0x64>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80041ce:	4b07      	ldr	r3, [pc, #28]	@ (80041ec <_sbrk+0x64>)
 80041d0:	681a      	ldr	r2, [r3, #0]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	4413      	add	r3, r2
 80041d6:	4a05      	ldr	r2, [pc, #20]	@ (80041ec <_sbrk+0x64>)
 80041d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80041da:	68fb      	ldr	r3, [r7, #12]
}
 80041dc:	4618      	mov	r0, r3
 80041de:	3718      	adds	r7, #24
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd80      	pop	{r7, pc}
 80041e4:	20020000 	.word	0x20020000
 80041e8:	00000400 	.word	0x00000400
 80041ec:	20000344 	.word	0x20000344
 80041f0:	20000498 	.word	0x20000498

080041f4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80041f4:	480d      	ldr	r0, [pc, #52]	@ (800422c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80041f6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80041f8:	f7fc febc 	bl	8000f74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80041fc:	480c      	ldr	r0, [pc, #48]	@ (8004230 <LoopForever+0x6>)
  ldr r1, =_edata
 80041fe:	490d      	ldr	r1, [pc, #52]	@ (8004234 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004200:	4a0d      	ldr	r2, [pc, #52]	@ (8004238 <LoopForever+0xe>)
  movs r3, #0
 8004202:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004204:	e002      	b.n	800420c <LoopCopyDataInit>

08004206 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004206:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004208:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800420a:	3304      	adds	r3, #4

0800420c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800420c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800420e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004210:	d3f9      	bcc.n	8004206 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004212:	4a0a      	ldr	r2, [pc, #40]	@ (800423c <LoopForever+0x12>)
  ldr r4, =_ebss
 8004214:	4c0a      	ldr	r4, [pc, #40]	@ (8004240 <LoopForever+0x16>)
  movs r3, #0
 8004216:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004218:	e001      	b.n	800421e <LoopFillZerobss>

0800421a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800421a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800421c:	3204      	adds	r2, #4

0800421e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800421e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004220:	d3fb      	bcc.n	800421a <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8004222:	f000 fdc3 	bl	8004dac <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 8004226:	f7ff fefd 	bl	8004024 <main>

0800422a <LoopForever>:

LoopForever:
  b LoopForever
 800422a:	e7fe      	b.n	800422a <LoopForever>
  ldr   r0, =_estack
 800422c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004230:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004234:	200001cc 	.word	0x200001cc
  ldr r2, =_sidata
 8004238:	08006f24 	.word	0x08006f24
  ldr r2, =_sbss
 800423c:	200001cc 	.word	0x200001cc
  ldr r4, =_ebss
 8004240:	20000494 	.word	0x20000494

08004244 <CAN1_RX0_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004244:	e7fe      	b.n	8004244 <CAN1_RX0_IRQHandler>

08004246 <__cvt>:
 8004246:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800424a:	ec57 6b10 	vmov	r6, r7, d0
 800424e:	2f00      	cmp	r7, #0
 8004250:	460c      	mov	r4, r1
 8004252:	4619      	mov	r1, r3
 8004254:	463b      	mov	r3, r7
 8004256:	bfbb      	ittet	lt
 8004258:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800425c:	461f      	movlt	r7, r3
 800425e:	2300      	movge	r3, #0
 8004260:	232d      	movlt	r3, #45	@ 0x2d
 8004262:	700b      	strb	r3, [r1, #0]
 8004264:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004266:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800426a:	4691      	mov	r9, r2
 800426c:	f023 0820 	bic.w	r8, r3, #32
 8004270:	bfbc      	itt	lt
 8004272:	4632      	movlt	r2, r6
 8004274:	4616      	movlt	r6, r2
 8004276:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800427a:	d005      	beq.n	8004288 <__cvt+0x42>
 800427c:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8004280:	d100      	bne.n	8004284 <__cvt+0x3e>
 8004282:	3401      	adds	r4, #1
 8004284:	2102      	movs	r1, #2
 8004286:	e000      	b.n	800428a <__cvt+0x44>
 8004288:	2103      	movs	r1, #3
 800428a:	ab03      	add	r3, sp, #12
 800428c:	9301      	str	r3, [sp, #4]
 800428e:	ab02      	add	r3, sp, #8
 8004290:	9300      	str	r3, [sp, #0]
 8004292:	ec47 6b10 	vmov	d0, r6, r7
 8004296:	4653      	mov	r3, sl
 8004298:	4622      	mov	r2, r4
 800429a:	f000 fe39 	bl	8004f10 <_dtoa_r>
 800429e:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80042a2:	4605      	mov	r5, r0
 80042a4:	d119      	bne.n	80042da <__cvt+0x94>
 80042a6:	f019 0f01 	tst.w	r9, #1
 80042aa:	d00e      	beq.n	80042ca <__cvt+0x84>
 80042ac:	eb00 0904 	add.w	r9, r0, r4
 80042b0:	2200      	movs	r2, #0
 80042b2:	2300      	movs	r3, #0
 80042b4:	4630      	mov	r0, r6
 80042b6:	4639      	mov	r1, r7
 80042b8:	f7fc fc06 	bl	8000ac8 <__aeabi_dcmpeq>
 80042bc:	b108      	cbz	r0, 80042c2 <__cvt+0x7c>
 80042be:	f8cd 900c 	str.w	r9, [sp, #12]
 80042c2:	2230      	movs	r2, #48	@ 0x30
 80042c4:	9b03      	ldr	r3, [sp, #12]
 80042c6:	454b      	cmp	r3, r9
 80042c8:	d31e      	bcc.n	8004308 <__cvt+0xc2>
 80042ca:	9b03      	ldr	r3, [sp, #12]
 80042cc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80042ce:	1b5b      	subs	r3, r3, r5
 80042d0:	4628      	mov	r0, r5
 80042d2:	6013      	str	r3, [r2, #0]
 80042d4:	b004      	add	sp, #16
 80042d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042da:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80042de:	eb00 0904 	add.w	r9, r0, r4
 80042e2:	d1e5      	bne.n	80042b0 <__cvt+0x6a>
 80042e4:	7803      	ldrb	r3, [r0, #0]
 80042e6:	2b30      	cmp	r3, #48	@ 0x30
 80042e8:	d10a      	bne.n	8004300 <__cvt+0xba>
 80042ea:	2200      	movs	r2, #0
 80042ec:	2300      	movs	r3, #0
 80042ee:	4630      	mov	r0, r6
 80042f0:	4639      	mov	r1, r7
 80042f2:	f7fc fbe9 	bl	8000ac8 <__aeabi_dcmpeq>
 80042f6:	b918      	cbnz	r0, 8004300 <__cvt+0xba>
 80042f8:	f1c4 0401 	rsb	r4, r4, #1
 80042fc:	f8ca 4000 	str.w	r4, [sl]
 8004300:	f8da 3000 	ldr.w	r3, [sl]
 8004304:	4499      	add	r9, r3
 8004306:	e7d3      	b.n	80042b0 <__cvt+0x6a>
 8004308:	1c59      	adds	r1, r3, #1
 800430a:	9103      	str	r1, [sp, #12]
 800430c:	701a      	strb	r2, [r3, #0]
 800430e:	e7d9      	b.n	80042c4 <__cvt+0x7e>

08004310 <__exponent>:
 8004310:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004312:	2900      	cmp	r1, #0
 8004314:	bfba      	itte	lt
 8004316:	4249      	neglt	r1, r1
 8004318:	232d      	movlt	r3, #45	@ 0x2d
 800431a:	232b      	movge	r3, #43	@ 0x2b
 800431c:	2909      	cmp	r1, #9
 800431e:	7002      	strb	r2, [r0, #0]
 8004320:	7043      	strb	r3, [r0, #1]
 8004322:	dd29      	ble.n	8004378 <__exponent+0x68>
 8004324:	f10d 0307 	add.w	r3, sp, #7
 8004328:	461d      	mov	r5, r3
 800432a:	270a      	movs	r7, #10
 800432c:	461a      	mov	r2, r3
 800432e:	fbb1 f6f7 	udiv	r6, r1, r7
 8004332:	fb07 1416 	mls	r4, r7, r6, r1
 8004336:	3430      	adds	r4, #48	@ 0x30
 8004338:	f802 4c01 	strb.w	r4, [r2, #-1]
 800433c:	460c      	mov	r4, r1
 800433e:	2c63      	cmp	r4, #99	@ 0x63
 8004340:	f103 33ff 	add.w	r3, r3, #4294967295
 8004344:	4631      	mov	r1, r6
 8004346:	dcf1      	bgt.n	800432c <__exponent+0x1c>
 8004348:	3130      	adds	r1, #48	@ 0x30
 800434a:	1e94      	subs	r4, r2, #2
 800434c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004350:	1c41      	adds	r1, r0, #1
 8004352:	4623      	mov	r3, r4
 8004354:	42ab      	cmp	r3, r5
 8004356:	d30a      	bcc.n	800436e <__exponent+0x5e>
 8004358:	f10d 0309 	add.w	r3, sp, #9
 800435c:	1a9b      	subs	r3, r3, r2
 800435e:	42ac      	cmp	r4, r5
 8004360:	bf88      	it	hi
 8004362:	2300      	movhi	r3, #0
 8004364:	3302      	adds	r3, #2
 8004366:	4403      	add	r3, r0
 8004368:	1a18      	subs	r0, r3, r0
 800436a:	b003      	add	sp, #12
 800436c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800436e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004372:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004376:	e7ed      	b.n	8004354 <__exponent+0x44>
 8004378:	2330      	movs	r3, #48	@ 0x30
 800437a:	3130      	adds	r1, #48	@ 0x30
 800437c:	7083      	strb	r3, [r0, #2]
 800437e:	70c1      	strb	r1, [r0, #3]
 8004380:	1d03      	adds	r3, r0, #4
 8004382:	e7f1      	b.n	8004368 <__exponent+0x58>

08004384 <_printf_float>:
 8004384:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004388:	b08d      	sub	sp, #52	@ 0x34
 800438a:	460c      	mov	r4, r1
 800438c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8004390:	4616      	mov	r6, r2
 8004392:	461f      	mov	r7, r3
 8004394:	4605      	mov	r5, r0
 8004396:	f000 fcb9 	bl	8004d0c <_localeconv_r>
 800439a:	6803      	ldr	r3, [r0, #0]
 800439c:	9304      	str	r3, [sp, #16]
 800439e:	4618      	mov	r0, r3
 80043a0:	f7fb ff66 	bl	8000270 <strlen>
 80043a4:	2300      	movs	r3, #0
 80043a6:	930a      	str	r3, [sp, #40]	@ 0x28
 80043a8:	f8d8 3000 	ldr.w	r3, [r8]
 80043ac:	9005      	str	r0, [sp, #20]
 80043ae:	3307      	adds	r3, #7
 80043b0:	f023 0307 	bic.w	r3, r3, #7
 80043b4:	f103 0208 	add.w	r2, r3, #8
 80043b8:	f894 a018 	ldrb.w	sl, [r4, #24]
 80043bc:	f8d4 b000 	ldr.w	fp, [r4]
 80043c0:	f8c8 2000 	str.w	r2, [r8]
 80043c4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80043c8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80043cc:	9307      	str	r3, [sp, #28]
 80043ce:	f8cd 8018 	str.w	r8, [sp, #24]
 80043d2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80043d6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80043da:	4b9c      	ldr	r3, [pc, #624]	@ (800464c <_printf_float+0x2c8>)
 80043dc:	f04f 32ff 	mov.w	r2, #4294967295
 80043e0:	f7fc fba4 	bl	8000b2c <__aeabi_dcmpun>
 80043e4:	bb70      	cbnz	r0, 8004444 <_printf_float+0xc0>
 80043e6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80043ea:	4b98      	ldr	r3, [pc, #608]	@ (800464c <_printf_float+0x2c8>)
 80043ec:	f04f 32ff 	mov.w	r2, #4294967295
 80043f0:	f7fc fb7e 	bl	8000af0 <__aeabi_dcmple>
 80043f4:	bb30      	cbnz	r0, 8004444 <_printf_float+0xc0>
 80043f6:	2200      	movs	r2, #0
 80043f8:	2300      	movs	r3, #0
 80043fa:	4640      	mov	r0, r8
 80043fc:	4649      	mov	r1, r9
 80043fe:	f7fc fb6d 	bl	8000adc <__aeabi_dcmplt>
 8004402:	b110      	cbz	r0, 800440a <_printf_float+0x86>
 8004404:	232d      	movs	r3, #45	@ 0x2d
 8004406:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800440a:	4a91      	ldr	r2, [pc, #580]	@ (8004650 <_printf_float+0x2cc>)
 800440c:	4b91      	ldr	r3, [pc, #580]	@ (8004654 <_printf_float+0x2d0>)
 800440e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8004412:	bf8c      	ite	hi
 8004414:	4690      	movhi	r8, r2
 8004416:	4698      	movls	r8, r3
 8004418:	2303      	movs	r3, #3
 800441a:	6123      	str	r3, [r4, #16]
 800441c:	f02b 0304 	bic.w	r3, fp, #4
 8004420:	6023      	str	r3, [r4, #0]
 8004422:	f04f 0900 	mov.w	r9, #0
 8004426:	9700      	str	r7, [sp, #0]
 8004428:	4633      	mov	r3, r6
 800442a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800442c:	4621      	mov	r1, r4
 800442e:	4628      	mov	r0, r5
 8004430:	f000 f9d2 	bl	80047d8 <_printf_common>
 8004434:	3001      	adds	r0, #1
 8004436:	f040 808d 	bne.w	8004554 <_printf_float+0x1d0>
 800443a:	f04f 30ff 	mov.w	r0, #4294967295
 800443e:	b00d      	add	sp, #52	@ 0x34
 8004440:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004444:	4642      	mov	r2, r8
 8004446:	464b      	mov	r3, r9
 8004448:	4640      	mov	r0, r8
 800444a:	4649      	mov	r1, r9
 800444c:	f7fc fb6e 	bl	8000b2c <__aeabi_dcmpun>
 8004450:	b140      	cbz	r0, 8004464 <_printf_float+0xe0>
 8004452:	464b      	mov	r3, r9
 8004454:	2b00      	cmp	r3, #0
 8004456:	bfbc      	itt	lt
 8004458:	232d      	movlt	r3, #45	@ 0x2d
 800445a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800445e:	4a7e      	ldr	r2, [pc, #504]	@ (8004658 <_printf_float+0x2d4>)
 8004460:	4b7e      	ldr	r3, [pc, #504]	@ (800465c <_printf_float+0x2d8>)
 8004462:	e7d4      	b.n	800440e <_printf_float+0x8a>
 8004464:	6863      	ldr	r3, [r4, #4]
 8004466:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800446a:	9206      	str	r2, [sp, #24]
 800446c:	1c5a      	adds	r2, r3, #1
 800446e:	d13b      	bne.n	80044e8 <_printf_float+0x164>
 8004470:	2306      	movs	r3, #6
 8004472:	6063      	str	r3, [r4, #4]
 8004474:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8004478:	2300      	movs	r3, #0
 800447a:	6022      	str	r2, [r4, #0]
 800447c:	9303      	str	r3, [sp, #12]
 800447e:	ab0a      	add	r3, sp, #40	@ 0x28
 8004480:	e9cd a301 	strd	sl, r3, [sp, #4]
 8004484:	ab09      	add	r3, sp, #36	@ 0x24
 8004486:	9300      	str	r3, [sp, #0]
 8004488:	6861      	ldr	r1, [r4, #4]
 800448a:	ec49 8b10 	vmov	d0, r8, r9
 800448e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8004492:	4628      	mov	r0, r5
 8004494:	f7ff fed7 	bl	8004246 <__cvt>
 8004498:	9b06      	ldr	r3, [sp, #24]
 800449a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800449c:	2b47      	cmp	r3, #71	@ 0x47
 800449e:	4680      	mov	r8, r0
 80044a0:	d129      	bne.n	80044f6 <_printf_float+0x172>
 80044a2:	1cc8      	adds	r0, r1, #3
 80044a4:	db02      	blt.n	80044ac <_printf_float+0x128>
 80044a6:	6863      	ldr	r3, [r4, #4]
 80044a8:	4299      	cmp	r1, r3
 80044aa:	dd41      	ble.n	8004530 <_printf_float+0x1ac>
 80044ac:	f1aa 0a02 	sub.w	sl, sl, #2
 80044b0:	fa5f fa8a 	uxtb.w	sl, sl
 80044b4:	3901      	subs	r1, #1
 80044b6:	4652      	mov	r2, sl
 80044b8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80044bc:	9109      	str	r1, [sp, #36]	@ 0x24
 80044be:	f7ff ff27 	bl	8004310 <__exponent>
 80044c2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80044c4:	1813      	adds	r3, r2, r0
 80044c6:	2a01      	cmp	r2, #1
 80044c8:	4681      	mov	r9, r0
 80044ca:	6123      	str	r3, [r4, #16]
 80044cc:	dc02      	bgt.n	80044d4 <_printf_float+0x150>
 80044ce:	6822      	ldr	r2, [r4, #0]
 80044d0:	07d2      	lsls	r2, r2, #31
 80044d2:	d501      	bpl.n	80044d8 <_printf_float+0x154>
 80044d4:	3301      	adds	r3, #1
 80044d6:	6123      	str	r3, [r4, #16]
 80044d8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d0a2      	beq.n	8004426 <_printf_float+0xa2>
 80044e0:	232d      	movs	r3, #45	@ 0x2d
 80044e2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80044e6:	e79e      	b.n	8004426 <_printf_float+0xa2>
 80044e8:	9a06      	ldr	r2, [sp, #24]
 80044ea:	2a47      	cmp	r2, #71	@ 0x47
 80044ec:	d1c2      	bne.n	8004474 <_printf_float+0xf0>
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d1c0      	bne.n	8004474 <_printf_float+0xf0>
 80044f2:	2301      	movs	r3, #1
 80044f4:	e7bd      	b.n	8004472 <_printf_float+0xee>
 80044f6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80044fa:	d9db      	bls.n	80044b4 <_printf_float+0x130>
 80044fc:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8004500:	d118      	bne.n	8004534 <_printf_float+0x1b0>
 8004502:	2900      	cmp	r1, #0
 8004504:	6863      	ldr	r3, [r4, #4]
 8004506:	dd0b      	ble.n	8004520 <_printf_float+0x19c>
 8004508:	6121      	str	r1, [r4, #16]
 800450a:	b913      	cbnz	r3, 8004512 <_printf_float+0x18e>
 800450c:	6822      	ldr	r2, [r4, #0]
 800450e:	07d0      	lsls	r0, r2, #31
 8004510:	d502      	bpl.n	8004518 <_printf_float+0x194>
 8004512:	3301      	adds	r3, #1
 8004514:	440b      	add	r3, r1
 8004516:	6123      	str	r3, [r4, #16]
 8004518:	65a1      	str	r1, [r4, #88]	@ 0x58
 800451a:	f04f 0900 	mov.w	r9, #0
 800451e:	e7db      	b.n	80044d8 <_printf_float+0x154>
 8004520:	b913      	cbnz	r3, 8004528 <_printf_float+0x1a4>
 8004522:	6822      	ldr	r2, [r4, #0]
 8004524:	07d2      	lsls	r2, r2, #31
 8004526:	d501      	bpl.n	800452c <_printf_float+0x1a8>
 8004528:	3302      	adds	r3, #2
 800452a:	e7f4      	b.n	8004516 <_printf_float+0x192>
 800452c:	2301      	movs	r3, #1
 800452e:	e7f2      	b.n	8004516 <_printf_float+0x192>
 8004530:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8004534:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004536:	4299      	cmp	r1, r3
 8004538:	db05      	blt.n	8004546 <_printf_float+0x1c2>
 800453a:	6823      	ldr	r3, [r4, #0]
 800453c:	6121      	str	r1, [r4, #16]
 800453e:	07d8      	lsls	r0, r3, #31
 8004540:	d5ea      	bpl.n	8004518 <_printf_float+0x194>
 8004542:	1c4b      	adds	r3, r1, #1
 8004544:	e7e7      	b.n	8004516 <_printf_float+0x192>
 8004546:	2900      	cmp	r1, #0
 8004548:	bfd4      	ite	le
 800454a:	f1c1 0202 	rsble	r2, r1, #2
 800454e:	2201      	movgt	r2, #1
 8004550:	4413      	add	r3, r2
 8004552:	e7e0      	b.n	8004516 <_printf_float+0x192>
 8004554:	6823      	ldr	r3, [r4, #0]
 8004556:	055a      	lsls	r2, r3, #21
 8004558:	d407      	bmi.n	800456a <_printf_float+0x1e6>
 800455a:	6923      	ldr	r3, [r4, #16]
 800455c:	4642      	mov	r2, r8
 800455e:	4631      	mov	r1, r6
 8004560:	4628      	mov	r0, r5
 8004562:	47b8      	blx	r7
 8004564:	3001      	adds	r0, #1
 8004566:	d12b      	bne.n	80045c0 <_printf_float+0x23c>
 8004568:	e767      	b.n	800443a <_printf_float+0xb6>
 800456a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800456e:	f240 80dd 	bls.w	800472c <_printf_float+0x3a8>
 8004572:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004576:	2200      	movs	r2, #0
 8004578:	2300      	movs	r3, #0
 800457a:	f7fc faa5 	bl	8000ac8 <__aeabi_dcmpeq>
 800457e:	2800      	cmp	r0, #0
 8004580:	d033      	beq.n	80045ea <_printf_float+0x266>
 8004582:	4a37      	ldr	r2, [pc, #220]	@ (8004660 <_printf_float+0x2dc>)
 8004584:	2301      	movs	r3, #1
 8004586:	4631      	mov	r1, r6
 8004588:	4628      	mov	r0, r5
 800458a:	47b8      	blx	r7
 800458c:	3001      	adds	r0, #1
 800458e:	f43f af54 	beq.w	800443a <_printf_float+0xb6>
 8004592:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8004596:	4543      	cmp	r3, r8
 8004598:	db02      	blt.n	80045a0 <_printf_float+0x21c>
 800459a:	6823      	ldr	r3, [r4, #0]
 800459c:	07d8      	lsls	r0, r3, #31
 800459e:	d50f      	bpl.n	80045c0 <_printf_float+0x23c>
 80045a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80045a4:	4631      	mov	r1, r6
 80045a6:	4628      	mov	r0, r5
 80045a8:	47b8      	blx	r7
 80045aa:	3001      	adds	r0, #1
 80045ac:	f43f af45 	beq.w	800443a <_printf_float+0xb6>
 80045b0:	f04f 0900 	mov.w	r9, #0
 80045b4:	f108 38ff 	add.w	r8, r8, #4294967295
 80045b8:	f104 0a1a 	add.w	sl, r4, #26
 80045bc:	45c8      	cmp	r8, r9
 80045be:	dc09      	bgt.n	80045d4 <_printf_float+0x250>
 80045c0:	6823      	ldr	r3, [r4, #0]
 80045c2:	079b      	lsls	r3, r3, #30
 80045c4:	f100 8103 	bmi.w	80047ce <_printf_float+0x44a>
 80045c8:	68e0      	ldr	r0, [r4, #12]
 80045ca:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80045cc:	4298      	cmp	r0, r3
 80045ce:	bfb8      	it	lt
 80045d0:	4618      	movlt	r0, r3
 80045d2:	e734      	b.n	800443e <_printf_float+0xba>
 80045d4:	2301      	movs	r3, #1
 80045d6:	4652      	mov	r2, sl
 80045d8:	4631      	mov	r1, r6
 80045da:	4628      	mov	r0, r5
 80045dc:	47b8      	blx	r7
 80045de:	3001      	adds	r0, #1
 80045e0:	f43f af2b 	beq.w	800443a <_printf_float+0xb6>
 80045e4:	f109 0901 	add.w	r9, r9, #1
 80045e8:	e7e8      	b.n	80045bc <_printf_float+0x238>
 80045ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	dc39      	bgt.n	8004664 <_printf_float+0x2e0>
 80045f0:	4a1b      	ldr	r2, [pc, #108]	@ (8004660 <_printf_float+0x2dc>)
 80045f2:	2301      	movs	r3, #1
 80045f4:	4631      	mov	r1, r6
 80045f6:	4628      	mov	r0, r5
 80045f8:	47b8      	blx	r7
 80045fa:	3001      	adds	r0, #1
 80045fc:	f43f af1d 	beq.w	800443a <_printf_float+0xb6>
 8004600:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8004604:	ea59 0303 	orrs.w	r3, r9, r3
 8004608:	d102      	bne.n	8004610 <_printf_float+0x28c>
 800460a:	6823      	ldr	r3, [r4, #0]
 800460c:	07d9      	lsls	r1, r3, #31
 800460e:	d5d7      	bpl.n	80045c0 <_printf_float+0x23c>
 8004610:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004614:	4631      	mov	r1, r6
 8004616:	4628      	mov	r0, r5
 8004618:	47b8      	blx	r7
 800461a:	3001      	adds	r0, #1
 800461c:	f43f af0d 	beq.w	800443a <_printf_float+0xb6>
 8004620:	f04f 0a00 	mov.w	sl, #0
 8004624:	f104 0b1a 	add.w	fp, r4, #26
 8004628:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800462a:	425b      	negs	r3, r3
 800462c:	4553      	cmp	r3, sl
 800462e:	dc01      	bgt.n	8004634 <_printf_float+0x2b0>
 8004630:	464b      	mov	r3, r9
 8004632:	e793      	b.n	800455c <_printf_float+0x1d8>
 8004634:	2301      	movs	r3, #1
 8004636:	465a      	mov	r2, fp
 8004638:	4631      	mov	r1, r6
 800463a:	4628      	mov	r0, r5
 800463c:	47b8      	blx	r7
 800463e:	3001      	adds	r0, #1
 8004640:	f43f aefb 	beq.w	800443a <_printf_float+0xb6>
 8004644:	f10a 0a01 	add.w	sl, sl, #1
 8004648:	e7ee      	b.n	8004628 <_printf_float+0x2a4>
 800464a:	bf00      	nop
 800464c:	7fefffff 	.word	0x7fefffff
 8004650:	08006ba4 	.word	0x08006ba4
 8004654:	08006ba0 	.word	0x08006ba0
 8004658:	08006bac 	.word	0x08006bac
 800465c:	08006ba8 	.word	0x08006ba8
 8004660:	08006bb0 	.word	0x08006bb0
 8004664:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004666:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800466a:	4553      	cmp	r3, sl
 800466c:	bfa8      	it	ge
 800466e:	4653      	movge	r3, sl
 8004670:	2b00      	cmp	r3, #0
 8004672:	4699      	mov	r9, r3
 8004674:	dc36      	bgt.n	80046e4 <_printf_float+0x360>
 8004676:	f04f 0b00 	mov.w	fp, #0
 800467a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800467e:	f104 021a 	add.w	r2, r4, #26
 8004682:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004684:	9306      	str	r3, [sp, #24]
 8004686:	eba3 0309 	sub.w	r3, r3, r9
 800468a:	455b      	cmp	r3, fp
 800468c:	dc31      	bgt.n	80046f2 <_printf_float+0x36e>
 800468e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004690:	459a      	cmp	sl, r3
 8004692:	dc3a      	bgt.n	800470a <_printf_float+0x386>
 8004694:	6823      	ldr	r3, [r4, #0]
 8004696:	07da      	lsls	r2, r3, #31
 8004698:	d437      	bmi.n	800470a <_printf_float+0x386>
 800469a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800469c:	ebaa 0903 	sub.w	r9, sl, r3
 80046a0:	9b06      	ldr	r3, [sp, #24]
 80046a2:	ebaa 0303 	sub.w	r3, sl, r3
 80046a6:	4599      	cmp	r9, r3
 80046a8:	bfa8      	it	ge
 80046aa:	4699      	movge	r9, r3
 80046ac:	f1b9 0f00 	cmp.w	r9, #0
 80046b0:	dc33      	bgt.n	800471a <_printf_float+0x396>
 80046b2:	f04f 0800 	mov.w	r8, #0
 80046b6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80046ba:	f104 0b1a 	add.w	fp, r4, #26
 80046be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80046c0:	ebaa 0303 	sub.w	r3, sl, r3
 80046c4:	eba3 0309 	sub.w	r3, r3, r9
 80046c8:	4543      	cmp	r3, r8
 80046ca:	f77f af79 	ble.w	80045c0 <_printf_float+0x23c>
 80046ce:	2301      	movs	r3, #1
 80046d0:	465a      	mov	r2, fp
 80046d2:	4631      	mov	r1, r6
 80046d4:	4628      	mov	r0, r5
 80046d6:	47b8      	blx	r7
 80046d8:	3001      	adds	r0, #1
 80046da:	f43f aeae 	beq.w	800443a <_printf_float+0xb6>
 80046de:	f108 0801 	add.w	r8, r8, #1
 80046e2:	e7ec      	b.n	80046be <_printf_float+0x33a>
 80046e4:	4642      	mov	r2, r8
 80046e6:	4631      	mov	r1, r6
 80046e8:	4628      	mov	r0, r5
 80046ea:	47b8      	blx	r7
 80046ec:	3001      	adds	r0, #1
 80046ee:	d1c2      	bne.n	8004676 <_printf_float+0x2f2>
 80046f0:	e6a3      	b.n	800443a <_printf_float+0xb6>
 80046f2:	2301      	movs	r3, #1
 80046f4:	4631      	mov	r1, r6
 80046f6:	4628      	mov	r0, r5
 80046f8:	9206      	str	r2, [sp, #24]
 80046fa:	47b8      	blx	r7
 80046fc:	3001      	adds	r0, #1
 80046fe:	f43f ae9c 	beq.w	800443a <_printf_float+0xb6>
 8004702:	9a06      	ldr	r2, [sp, #24]
 8004704:	f10b 0b01 	add.w	fp, fp, #1
 8004708:	e7bb      	b.n	8004682 <_printf_float+0x2fe>
 800470a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800470e:	4631      	mov	r1, r6
 8004710:	4628      	mov	r0, r5
 8004712:	47b8      	blx	r7
 8004714:	3001      	adds	r0, #1
 8004716:	d1c0      	bne.n	800469a <_printf_float+0x316>
 8004718:	e68f      	b.n	800443a <_printf_float+0xb6>
 800471a:	9a06      	ldr	r2, [sp, #24]
 800471c:	464b      	mov	r3, r9
 800471e:	4442      	add	r2, r8
 8004720:	4631      	mov	r1, r6
 8004722:	4628      	mov	r0, r5
 8004724:	47b8      	blx	r7
 8004726:	3001      	adds	r0, #1
 8004728:	d1c3      	bne.n	80046b2 <_printf_float+0x32e>
 800472a:	e686      	b.n	800443a <_printf_float+0xb6>
 800472c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004730:	f1ba 0f01 	cmp.w	sl, #1
 8004734:	dc01      	bgt.n	800473a <_printf_float+0x3b6>
 8004736:	07db      	lsls	r3, r3, #31
 8004738:	d536      	bpl.n	80047a8 <_printf_float+0x424>
 800473a:	2301      	movs	r3, #1
 800473c:	4642      	mov	r2, r8
 800473e:	4631      	mov	r1, r6
 8004740:	4628      	mov	r0, r5
 8004742:	47b8      	blx	r7
 8004744:	3001      	adds	r0, #1
 8004746:	f43f ae78 	beq.w	800443a <_printf_float+0xb6>
 800474a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800474e:	4631      	mov	r1, r6
 8004750:	4628      	mov	r0, r5
 8004752:	47b8      	blx	r7
 8004754:	3001      	adds	r0, #1
 8004756:	f43f ae70 	beq.w	800443a <_printf_float+0xb6>
 800475a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800475e:	2200      	movs	r2, #0
 8004760:	2300      	movs	r3, #0
 8004762:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004766:	f7fc f9af 	bl	8000ac8 <__aeabi_dcmpeq>
 800476a:	b9c0      	cbnz	r0, 800479e <_printf_float+0x41a>
 800476c:	4653      	mov	r3, sl
 800476e:	f108 0201 	add.w	r2, r8, #1
 8004772:	4631      	mov	r1, r6
 8004774:	4628      	mov	r0, r5
 8004776:	47b8      	blx	r7
 8004778:	3001      	adds	r0, #1
 800477a:	d10c      	bne.n	8004796 <_printf_float+0x412>
 800477c:	e65d      	b.n	800443a <_printf_float+0xb6>
 800477e:	2301      	movs	r3, #1
 8004780:	465a      	mov	r2, fp
 8004782:	4631      	mov	r1, r6
 8004784:	4628      	mov	r0, r5
 8004786:	47b8      	blx	r7
 8004788:	3001      	adds	r0, #1
 800478a:	f43f ae56 	beq.w	800443a <_printf_float+0xb6>
 800478e:	f108 0801 	add.w	r8, r8, #1
 8004792:	45d0      	cmp	r8, sl
 8004794:	dbf3      	blt.n	800477e <_printf_float+0x3fa>
 8004796:	464b      	mov	r3, r9
 8004798:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800479c:	e6df      	b.n	800455e <_printf_float+0x1da>
 800479e:	f04f 0800 	mov.w	r8, #0
 80047a2:	f104 0b1a 	add.w	fp, r4, #26
 80047a6:	e7f4      	b.n	8004792 <_printf_float+0x40e>
 80047a8:	2301      	movs	r3, #1
 80047aa:	4642      	mov	r2, r8
 80047ac:	e7e1      	b.n	8004772 <_printf_float+0x3ee>
 80047ae:	2301      	movs	r3, #1
 80047b0:	464a      	mov	r2, r9
 80047b2:	4631      	mov	r1, r6
 80047b4:	4628      	mov	r0, r5
 80047b6:	47b8      	blx	r7
 80047b8:	3001      	adds	r0, #1
 80047ba:	f43f ae3e 	beq.w	800443a <_printf_float+0xb6>
 80047be:	f108 0801 	add.w	r8, r8, #1
 80047c2:	68e3      	ldr	r3, [r4, #12]
 80047c4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80047c6:	1a5b      	subs	r3, r3, r1
 80047c8:	4543      	cmp	r3, r8
 80047ca:	dcf0      	bgt.n	80047ae <_printf_float+0x42a>
 80047cc:	e6fc      	b.n	80045c8 <_printf_float+0x244>
 80047ce:	f04f 0800 	mov.w	r8, #0
 80047d2:	f104 0919 	add.w	r9, r4, #25
 80047d6:	e7f4      	b.n	80047c2 <_printf_float+0x43e>

080047d8 <_printf_common>:
 80047d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80047dc:	4616      	mov	r6, r2
 80047de:	4698      	mov	r8, r3
 80047e0:	688a      	ldr	r2, [r1, #8]
 80047e2:	690b      	ldr	r3, [r1, #16]
 80047e4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80047e8:	4293      	cmp	r3, r2
 80047ea:	bfb8      	it	lt
 80047ec:	4613      	movlt	r3, r2
 80047ee:	6033      	str	r3, [r6, #0]
 80047f0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80047f4:	4607      	mov	r7, r0
 80047f6:	460c      	mov	r4, r1
 80047f8:	b10a      	cbz	r2, 80047fe <_printf_common+0x26>
 80047fa:	3301      	adds	r3, #1
 80047fc:	6033      	str	r3, [r6, #0]
 80047fe:	6823      	ldr	r3, [r4, #0]
 8004800:	0699      	lsls	r1, r3, #26
 8004802:	bf42      	ittt	mi
 8004804:	6833      	ldrmi	r3, [r6, #0]
 8004806:	3302      	addmi	r3, #2
 8004808:	6033      	strmi	r3, [r6, #0]
 800480a:	6825      	ldr	r5, [r4, #0]
 800480c:	f015 0506 	ands.w	r5, r5, #6
 8004810:	d106      	bne.n	8004820 <_printf_common+0x48>
 8004812:	f104 0a19 	add.w	sl, r4, #25
 8004816:	68e3      	ldr	r3, [r4, #12]
 8004818:	6832      	ldr	r2, [r6, #0]
 800481a:	1a9b      	subs	r3, r3, r2
 800481c:	42ab      	cmp	r3, r5
 800481e:	dc26      	bgt.n	800486e <_printf_common+0x96>
 8004820:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004824:	6822      	ldr	r2, [r4, #0]
 8004826:	3b00      	subs	r3, #0
 8004828:	bf18      	it	ne
 800482a:	2301      	movne	r3, #1
 800482c:	0692      	lsls	r2, r2, #26
 800482e:	d42b      	bmi.n	8004888 <_printf_common+0xb0>
 8004830:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004834:	4641      	mov	r1, r8
 8004836:	4638      	mov	r0, r7
 8004838:	47c8      	blx	r9
 800483a:	3001      	adds	r0, #1
 800483c:	d01e      	beq.n	800487c <_printf_common+0xa4>
 800483e:	6823      	ldr	r3, [r4, #0]
 8004840:	6922      	ldr	r2, [r4, #16]
 8004842:	f003 0306 	and.w	r3, r3, #6
 8004846:	2b04      	cmp	r3, #4
 8004848:	bf02      	ittt	eq
 800484a:	68e5      	ldreq	r5, [r4, #12]
 800484c:	6833      	ldreq	r3, [r6, #0]
 800484e:	1aed      	subeq	r5, r5, r3
 8004850:	68a3      	ldr	r3, [r4, #8]
 8004852:	bf0c      	ite	eq
 8004854:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004858:	2500      	movne	r5, #0
 800485a:	4293      	cmp	r3, r2
 800485c:	bfc4      	itt	gt
 800485e:	1a9b      	subgt	r3, r3, r2
 8004860:	18ed      	addgt	r5, r5, r3
 8004862:	2600      	movs	r6, #0
 8004864:	341a      	adds	r4, #26
 8004866:	42b5      	cmp	r5, r6
 8004868:	d11a      	bne.n	80048a0 <_printf_common+0xc8>
 800486a:	2000      	movs	r0, #0
 800486c:	e008      	b.n	8004880 <_printf_common+0xa8>
 800486e:	2301      	movs	r3, #1
 8004870:	4652      	mov	r2, sl
 8004872:	4641      	mov	r1, r8
 8004874:	4638      	mov	r0, r7
 8004876:	47c8      	blx	r9
 8004878:	3001      	adds	r0, #1
 800487a:	d103      	bne.n	8004884 <_printf_common+0xac>
 800487c:	f04f 30ff 	mov.w	r0, #4294967295
 8004880:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004884:	3501      	adds	r5, #1
 8004886:	e7c6      	b.n	8004816 <_printf_common+0x3e>
 8004888:	18e1      	adds	r1, r4, r3
 800488a:	1c5a      	adds	r2, r3, #1
 800488c:	2030      	movs	r0, #48	@ 0x30
 800488e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004892:	4422      	add	r2, r4
 8004894:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004898:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800489c:	3302      	adds	r3, #2
 800489e:	e7c7      	b.n	8004830 <_printf_common+0x58>
 80048a0:	2301      	movs	r3, #1
 80048a2:	4622      	mov	r2, r4
 80048a4:	4641      	mov	r1, r8
 80048a6:	4638      	mov	r0, r7
 80048a8:	47c8      	blx	r9
 80048aa:	3001      	adds	r0, #1
 80048ac:	d0e6      	beq.n	800487c <_printf_common+0xa4>
 80048ae:	3601      	adds	r6, #1
 80048b0:	e7d9      	b.n	8004866 <_printf_common+0x8e>
	...

080048b4 <_printf_i>:
 80048b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80048b8:	7e0f      	ldrb	r7, [r1, #24]
 80048ba:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80048bc:	2f78      	cmp	r7, #120	@ 0x78
 80048be:	4691      	mov	r9, r2
 80048c0:	4680      	mov	r8, r0
 80048c2:	460c      	mov	r4, r1
 80048c4:	469a      	mov	sl, r3
 80048c6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80048ca:	d807      	bhi.n	80048dc <_printf_i+0x28>
 80048cc:	2f62      	cmp	r7, #98	@ 0x62
 80048ce:	d80a      	bhi.n	80048e6 <_printf_i+0x32>
 80048d0:	2f00      	cmp	r7, #0
 80048d2:	f000 80d1 	beq.w	8004a78 <_printf_i+0x1c4>
 80048d6:	2f58      	cmp	r7, #88	@ 0x58
 80048d8:	f000 80b8 	beq.w	8004a4c <_printf_i+0x198>
 80048dc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80048e0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80048e4:	e03a      	b.n	800495c <_printf_i+0xa8>
 80048e6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80048ea:	2b15      	cmp	r3, #21
 80048ec:	d8f6      	bhi.n	80048dc <_printf_i+0x28>
 80048ee:	a101      	add	r1, pc, #4	@ (adr r1, 80048f4 <_printf_i+0x40>)
 80048f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80048f4:	0800494d 	.word	0x0800494d
 80048f8:	08004961 	.word	0x08004961
 80048fc:	080048dd 	.word	0x080048dd
 8004900:	080048dd 	.word	0x080048dd
 8004904:	080048dd 	.word	0x080048dd
 8004908:	080048dd 	.word	0x080048dd
 800490c:	08004961 	.word	0x08004961
 8004910:	080048dd 	.word	0x080048dd
 8004914:	080048dd 	.word	0x080048dd
 8004918:	080048dd 	.word	0x080048dd
 800491c:	080048dd 	.word	0x080048dd
 8004920:	08004a5f 	.word	0x08004a5f
 8004924:	0800498b 	.word	0x0800498b
 8004928:	08004a19 	.word	0x08004a19
 800492c:	080048dd 	.word	0x080048dd
 8004930:	080048dd 	.word	0x080048dd
 8004934:	08004a81 	.word	0x08004a81
 8004938:	080048dd 	.word	0x080048dd
 800493c:	0800498b 	.word	0x0800498b
 8004940:	080048dd 	.word	0x080048dd
 8004944:	080048dd 	.word	0x080048dd
 8004948:	08004a21 	.word	0x08004a21
 800494c:	6833      	ldr	r3, [r6, #0]
 800494e:	1d1a      	adds	r2, r3, #4
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	6032      	str	r2, [r6, #0]
 8004954:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004958:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800495c:	2301      	movs	r3, #1
 800495e:	e09c      	b.n	8004a9a <_printf_i+0x1e6>
 8004960:	6833      	ldr	r3, [r6, #0]
 8004962:	6820      	ldr	r0, [r4, #0]
 8004964:	1d19      	adds	r1, r3, #4
 8004966:	6031      	str	r1, [r6, #0]
 8004968:	0606      	lsls	r6, r0, #24
 800496a:	d501      	bpl.n	8004970 <_printf_i+0xbc>
 800496c:	681d      	ldr	r5, [r3, #0]
 800496e:	e003      	b.n	8004978 <_printf_i+0xc4>
 8004970:	0645      	lsls	r5, r0, #25
 8004972:	d5fb      	bpl.n	800496c <_printf_i+0xb8>
 8004974:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004978:	2d00      	cmp	r5, #0
 800497a:	da03      	bge.n	8004984 <_printf_i+0xd0>
 800497c:	232d      	movs	r3, #45	@ 0x2d
 800497e:	426d      	negs	r5, r5
 8004980:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004984:	4858      	ldr	r0, [pc, #352]	@ (8004ae8 <_printf_i+0x234>)
 8004986:	230a      	movs	r3, #10
 8004988:	e011      	b.n	80049ae <_printf_i+0xfa>
 800498a:	6821      	ldr	r1, [r4, #0]
 800498c:	6833      	ldr	r3, [r6, #0]
 800498e:	0608      	lsls	r0, r1, #24
 8004990:	f853 5b04 	ldr.w	r5, [r3], #4
 8004994:	d402      	bmi.n	800499c <_printf_i+0xe8>
 8004996:	0649      	lsls	r1, r1, #25
 8004998:	bf48      	it	mi
 800499a:	b2ad      	uxthmi	r5, r5
 800499c:	2f6f      	cmp	r7, #111	@ 0x6f
 800499e:	4852      	ldr	r0, [pc, #328]	@ (8004ae8 <_printf_i+0x234>)
 80049a0:	6033      	str	r3, [r6, #0]
 80049a2:	bf14      	ite	ne
 80049a4:	230a      	movne	r3, #10
 80049a6:	2308      	moveq	r3, #8
 80049a8:	2100      	movs	r1, #0
 80049aa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80049ae:	6866      	ldr	r6, [r4, #4]
 80049b0:	60a6      	str	r6, [r4, #8]
 80049b2:	2e00      	cmp	r6, #0
 80049b4:	db05      	blt.n	80049c2 <_printf_i+0x10e>
 80049b6:	6821      	ldr	r1, [r4, #0]
 80049b8:	432e      	orrs	r6, r5
 80049ba:	f021 0104 	bic.w	r1, r1, #4
 80049be:	6021      	str	r1, [r4, #0]
 80049c0:	d04b      	beq.n	8004a5a <_printf_i+0x1a6>
 80049c2:	4616      	mov	r6, r2
 80049c4:	fbb5 f1f3 	udiv	r1, r5, r3
 80049c8:	fb03 5711 	mls	r7, r3, r1, r5
 80049cc:	5dc7      	ldrb	r7, [r0, r7]
 80049ce:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80049d2:	462f      	mov	r7, r5
 80049d4:	42bb      	cmp	r3, r7
 80049d6:	460d      	mov	r5, r1
 80049d8:	d9f4      	bls.n	80049c4 <_printf_i+0x110>
 80049da:	2b08      	cmp	r3, #8
 80049dc:	d10b      	bne.n	80049f6 <_printf_i+0x142>
 80049de:	6823      	ldr	r3, [r4, #0]
 80049e0:	07df      	lsls	r7, r3, #31
 80049e2:	d508      	bpl.n	80049f6 <_printf_i+0x142>
 80049e4:	6923      	ldr	r3, [r4, #16]
 80049e6:	6861      	ldr	r1, [r4, #4]
 80049e8:	4299      	cmp	r1, r3
 80049ea:	bfde      	ittt	le
 80049ec:	2330      	movle	r3, #48	@ 0x30
 80049ee:	f806 3c01 	strble.w	r3, [r6, #-1]
 80049f2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80049f6:	1b92      	subs	r2, r2, r6
 80049f8:	6122      	str	r2, [r4, #16]
 80049fa:	f8cd a000 	str.w	sl, [sp]
 80049fe:	464b      	mov	r3, r9
 8004a00:	aa03      	add	r2, sp, #12
 8004a02:	4621      	mov	r1, r4
 8004a04:	4640      	mov	r0, r8
 8004a06:	f7ff fee7 	bl	80047d8 <_printf_common>
 8004a0a:	3001      	adds	r0, #1
 8004a0c:	d14a      	bne.n	8004aa4 <_printf_i+0x1f0>
 8004a0e:	f04f 30ff 	mov.w	r0, #4294967295
 8004a12:	b004      	add	sp, #16
 8004a14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a18:	6823      	ldr	r3, [r4, #0]
 8004a1a:	f043 0320 	orr.w	r3, r3, #32
 8004a1e:	6023      	str	r3, [r4, #0]
 8004a20:	4832      	ldr	r0, [pc, #200]	@ (8004aec <_printf_i+0x238>)
 8004a22:	2778      	movs	r7, #120	@ 0x78
 8004a24:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004a28:	6823      	ldr	r3, [r4, #0]
 8004a2a:	6831      	ldr	r1, [r6, #0]
 8004a2c:	061f      	lsls	r7, r3, #24
 8004a2e:	f851 5b04 	ldr.w	r5, [r1], #4
 8004a32:	d402      	bmi.n	8004a3a <_printf_i+0x186>
 8004a34:	065f      	lsls	r7, r3, #25
 8004a36:	bf48      	it	mi
 8004a38:	b2ad      	uxthmi	r5, r5
 8004a3a:	6031      	str	r1, [r6, #0]
 8004a3c:	07d9      	lsls	r1, r3, #31
 8004a3e:	bf44      	itt	mi
 8004a40:	f043 0320 	orrmi.w	r3, r3, #32
 8004a44:	6023      	strmi	r3, [r4, #0]
 8004a46:	b11d      	cbz	r5, 8004a50 <_printf_i+0x19c>
 8004a48:	2310      	movs	r3, #16
 8004a4a:	e7ad      	b.n	80049a8 <_printf_i+0xf4>
 8004a4c:	4826      	ldr	r0, [pc, #152]	@ (8004ae8 <_printf_i+0x234>)
 8004a4e:	e7e9      	b.n	8004a24 <_printf_i+0x170>
 8004a50:	6823      	ldr	r3, [r4, #0]
 8004a52:	f023 0320 	bic.w	r3, r3, #32
 8004a56:	6023      	str	r3, [r4, #0]
 8004a58:	e7f6      	b.n	8004a48 <_printf_i+0x194>
 8004a5a:	4616      	mov	r6, r2
 8004a5c:	e7bd      	b.n	80049da <_printf_i+0x126>
 8004a5e:	6833      	ldr	r3, [r6, #0]
 8004a60:	6825      	ldr	r5, [r4, #0]
 8004a62:	6961      	ldr	r1, [r4, #20]
 8004a64:	1d18      	adds	r0, r3, #4
 8004a66:	6030      	str	r0, [r6, #0]
 8004a68:	062e      	lsls	r6, r5, #24
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	d501      	bpl.n	8004a72 <_printf_i+0x1be>
 8004a6e:	6019      	str	r1, [r3, #0]
 8004a70:	e002      	b.n	8004a78 <_printf_i+0x1c4>
 8004a72:	0668      	lsls	r0, r5, #25
 8004a74:	d5fb      	bpl.n	8004a6e <_printf_i+0x1ba>
 8004a76:	8019      	strh	r1, [r3, #0]
 8004a78:	2300      	movs	r3, #0
 8004a7a:	6123      	str	r3, [r4, #16]
 8004a7c:	4616      	mov	r6, r2
 8004a7e:	e7bc      	b.n	80049fa <_printf_i+0x146>
 8004a80:	6833      	ldr	r3, [r6, #0]
 8004a82:	1d1a      	adds	r2, r3, #4
 8004a84:	6032      	str	r2, [r6, #0]
 8004a86:	681e      	ldr	r6, [r3, #0]
 8004a88:	6862      	ldr	r2, [r4, #4]
 8004a8a:	2100      	movs	r1, #0
 8004a8c:	4630      	mov	r0, r6
 8004a8e:	f7fb fb9f 	bl	80001d0 <memchr>
 8004a92:	b108      	cbz	r0, 8004a98 <_printf_i+0x1e4>
 8004a94:	1b80      	subs	r0, r0, r6
 8004a96:	6060      	str	r0, [r4, #4]
 8004a98:	6863      	ldr	r3, [r4, #4]
 8004a9a:	6123      	str	r3, [r4, #16]
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004aa2:	e7aa      	b.n	80049fa <_printf_i+0x146>
 8004aa4:	6923      	ldr	r3, [r4, #16]
 8004aa6:	4632      	mov	r2, r6
 8004aa8:	4649      	mov	r1, r9
 8004aaa:	4640      	mov	r0, r8
 8004aac:	47d0      	blx	sl
 8004aae:	3001      	adds	r0, #1
 8004ab0:	d0ad      	beq.n	8004a0e <_printf_i+0x15a>
 8004ab2:	6823      	ldr	r3, [r4, #0]
 8004ab4:	079b      	lsls	r3, r3, #30
 8004ab6:	d413      	bmi.n	8004ae0 <_printf_i+0x22c>
 8004ab8:	68e0      	ldr	r0, [r4, #12]
 8004aba:	9b03      	ldr	r3, [sp, #12]
 8004abc:	4298      	cmp	r0, r3
 8004abe:	bfb8      	it	lt
 8004ac0:	4618      	movlt	r0, r3
 8004ac2:	e7a6      	b.n	8004a12 <_printf_i+0x15e>
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	4632      	mov	r2, r6
 8004ac8:	4649      	mov	r1, r9
 8004aca:	4640      	mov	r0, r8
 8004acc:	47d0      	blx	sl
 8004ace:	3001      	adds	r0, #1
 8004ad0:	d09d      	beq.n	8004a0e <_printf_i+0x15a>
 8004ad2:	3501      	adds	r5, #1
 8004ad4:	68e3      	ldr	r3, [r4, #12]
 8004ad6:	9903      	ldr	r1, [sp, #12]
 8004ad8:	1a5b      	subs	r3, r3, r1
 8004ada:	42ab      	cmp	r3, r5
 8004adc:	dcf2      	bgt.n	8004ac4 <_printf_i+0x210>
 8004ade:	e7eb      	b.n	8004ab8 <_printf_i+0x204>
 8004ae0:	2500      	movs	r5, #0
 8004ae2:	f104 0619 	add.w	r6, r4, #25
 8004ae6:	e7f5      	b.n	8004ad4 <_printf_i+0x220>
 8004ae8:	08006bb2 	.word	0x08006bb2
 8004aec:	08006bc3 	.word	0x08006bc3

08004af0 <std>:
 8004af0:	2300      	movs	r3, #0
 8004af2:	b510      	push	{r4, lr}
 8004af4:	4604      	mov	r4, r0
 8004af6:	e9c0 3300 	strd	r3, r3, [r0]
 8004afa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004afe:	6083      	str	r3, [r0, #8]
 8004b00:	8181      	strh	r1, [r0, #12]
 8004b02:	6643      	str	r3, [r0, #100]	@ 0x64
 8004b04:	81c2      	strh	r2, [r0, #14]
 8004b06:	6183      	str	r3, [r0, #24]
 8004b08:	4619      	mov	r1, r3
 8004b0a:	2208      	movs	r2, #8
 8004b0c:	305c      	adds	r0, #92	@ 0x5c
 8004b0e:	f000 f8f4 	bl	8004cfa <memset>
 8004b12:	4b0d      	ldr	r3, [pc, #52]	@ (8004b48 <std+0x58>)
 8004b14:	6263      	str	r3, [r4, #36]	@ 0x24
 8004b16:	4b0d      	ldr	r3, [pc, #52]	@ (8004b4c <std+0x5c>)
 8004b18:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004b1a:	4b0d      	ldr	r3, [pc, #52]	@ (8004b50 <std+0x60>)
 8004b1c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004b1e:	4b0d      	ldr	r3, [pc, #52]	@ (8004b54 <std+0x64>)
 8004b20:	6323      	str	r3, [r4, #48]	@ 0x30
 8004b22:	4b0d      	ldr	r3, [pc, #52]	@ (8004b58 <std+0x68>)
 8004b24:	6224      	str	r4, [r4, #32]
 8004b26:	429c      	cmp	r4, r3
 8004b28:	d006      	beq.n	8004b38 <std+0x48>
 8004b2a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004b2e:	4294      	cmp	r4, r2
 8004b30:	d002      	beq.n	8004b38 <std+0x48>
 8004b32:	33d0      	adds	r3, #208	@ 0xd0
 8004b34:	429c      	cmp	r4, r3
 8004b36:	d105      	bne.n	8004b44 <std+0x54>
 8004b38:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004b3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b40:	f000 b958 	b.w	8004df4 <__retarget_lock_init_recursive>
 8004b44:	bd10      	pop	{r4, pc}
 8004b46:	bf00      	nop
 8004b48:	08004c75 	.word	0x08004c75
 8004b4c:	08004c97 	.word	0x08004c97
 8004b50:	08004ccf 	.word	0x08004ccf
 8004b54:	08004cf3 	.word	0x08004cf3
 8004b58:	20000348 	.word	0x20000348

08004b5c <stdio_exit_handler>:
 8004b5c:	4a02      	ldr	r2, [pc, #8]	@ (8004b68 <stdio_exit_handler+0xc>)
 8004b5e:	4903      	ldr	r1, [pc, #12]	@ (8004b6c <stdio_exit_handler+0x10>)
 8004b60:	4803      	ldr	r0, [pc, #12]	@ (8004b70 <stdio_exit_handler+0x14>)
 8004b62:	f000 b869 	b.w	8004c38 <_fwalk_sglue>
 8004b66:	bf00      	nop
 8004b68:	20000004 	.word	0x20000004
 8004b6c:	080064ad 	.word	0x080064ad
 8004b70:	20000014 	.word	0x20000014

08004b74 <cleanup_stdio>:
 8004b74:	6841      	ldr	r1, [r0, #4]
 8004b76:	4b0c      	ldr	r3, [pc, #48]	@ (8004ba8 <cleanup_stdio+0x34>)
 8004b78:	4299      	cmp	r1, r3
 8004b7a:	b510      	push	{r4, lr}
 8004b7c:	4604      	mov	r4, r0
 8004b7e:	d001      	beq.n	8004b84 <cleanup_stdio+0x10>
 8004b80:	f001 fc94 	bl	80064ac <_fflush_r>
 8004b84:	68a1      	ldr	r1, [r4, #8]
 8004b86:	4b09      	ldr	r3, [pc, #36]	@ (8004bac <cleanup_stdio+0x38>)
 8004b88:	4299      	cmp	r1, r3
 8004b8a:	d002      	beq.n	8004b92 <cleanup_stdio+0x1e>
 8004b8c:	4620      	mov	r0, r4
 8004b8e:	f001 fc8d 	bl	80064ac <_fflush_r>
 8004b92:	68e1      	ldr	r1, [r4, #12]
 8004b94:	4b06      	ldr	r3, [pc, #24]	@ (8004bb0 <cleanup_stdio+0x3c>)
 8004b96:	4299      	cmp	r1, r3
 8004b98:	d004      	beq.n	8004ba4 <cleanup_stdio+0x30>
 8004b9a:	4620      	mov	r0, r4
 8004b9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ba0:	f001 bc84 	b.w	80064ac <_fflush_r>
 8004ba4:	bd10      	pop	{r4, pc}
 8004ba6:	bf00      	nop
 8004ba8:	20000348 	.word	0x20000348
 8004bac:	200003b0 	.word	0x200003b0
 8004bb0:	20000418 	.word	0x20000418

08004bb4 <global_stdio_init.part.0>:
 8004bb4:	b510      	push	{r4, lr}
 8004bb6:	4b0b      	ldr	r3, [pc, #44]	@ (8004be4 <global_stdio_init.part.0+0x30>)
 8004bb8:	4c0b      	ldr	r4, [pc, #44]	@ (8004be8 <global_stdio_init.part.0+0x34>)
 8004bba:	4a0c      	ldr	r2, [pc, #48]	@ (8004bec <global_stdio_init.part.0+0x38>)
 8004bbc:	601a      	str	r2, [r3, #0]
 8004bbe:	4620      	mov	r0, r4
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	2104      	movs	r1, #4
 8004bc4:	f7ff ff94 	bl	8004af0 <std>
 8004bc8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004bcc:	2201      	movs	r2, #1
 8004bce:	2109      	movs	r1, #9
 8004bd0:	f7ff ff8e 	bl	8004af0 <std>
 8004bd4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004bd8:	2202      	movs	r2, #2
 8004bda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004bde:	2112      	movs	r1, #18
 8004be0:	f7ff bf86 	b.w	8004af0 <std>
 8004be4:	20000480 	.word	0x20000480
 8004be8:	20000348 	.word	0x20000348
 8004bec:	08004b5d 	.word	0x08004b5d

08004bf0 <__sfp_lock_acquire>:
 8004bf0:	4801      	ldr	r0, [pc, #4]	@ (8004bf8 <__sfp_lock_acquire+0x8>)
 8004bf2:	f000 b900 	b.w	8004df6 <__retarget_lock_acquire_recursive>
 8004bf6:	bf00      	nop
 8004bf8:	20000489 	.word	0x20000489

08004bfc <__sfp_lock_release>:
 8004bfc:	4801      	ldr	r0, [pc, #4]	@ (8004c04 <__sfp_lock_release+0x8>)
 8004bfe:	f000 b8fb 	b.w	8004df8 <__retarget_lock_release_recursive>
 8004c02:	bf00      	nop
 8004c04:	20000489 	.word	0x20000489

08004c08 <__sinit>:
 8004c08:	b510      	push	{r4, lr}
 8004c0a:	4604      	mov	r4, r0
 8004c0c:	f7ff fff0 	bl	8004bf0 <__sfp_lock_acquire>
 8004c10:	6a23      	ldr	r3, [r4, #32]
 8004c12:	b11b      	cbz	r3, 8004c1c <__sinit+0x14>
 8004c14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c18:	f7ff bff0 	b.w	8004bfc <__sfp_lock_release>
 8004c1c:	4b04      	ldr	r3, [pc, #16]	@ (8004c30 <__sinit+0x28>)
 8004c1e:	6223      	str	r3, [r4, #32]
 8004c20:	4b04      	ldr	r3, [pc, #16]	@ (8004c34 <__sinit+0x2c>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d1f5      	bne.n	8004c14 <__sinit+0xc>
 8004c28:	f7ff ffc4 	bl	8004bb4 <global_stdio_init.part.0>
 8004c2c:	e7f2      	b.n	8004c14 <__sinit+0xc>
 8004c2e:	bf00      	nop
 8004c30:	08004b75 	.word	0x08004b75
 8004c34:	20000480 	.word	0x20000480

08004c38 <_fwalk_sglue>:
 8004c38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004c3c:	4607      	mov	r7, r0
 8004c3e:	4688      	mov	r8, r1
 8004c40:	4614      	mov	r4, r2
 8004c42:	2600      	movs	r6, #0
 8004c44:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004c48:	f1b9 0901 	subs.w	r9, r9, #1
 8004c4c:	d505      	bpl.n	8004c5a <_fwalk_sglue+0x22>
 8004c4e:	6824      	ldr	r4, [r4, #0]
 8004c50:	2c00      	cmp	r4, #0
 8004c52:	d1f7      	bne.n	8004c44 <_fwalk_sglue+0xc>
 8004c54:	4630      	mov	r0, r6
 8004c56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004c5a:	89ab      	ldrh	r3, [r5, #12]
 8004c5c:	2b01      	cmp	r3, #1
 8004c5e:	d907      	bls.n	8004c70 <_fwalk_sglue+0x38>
 8004c60:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004c64:	3301      	adds	r3, #1
 8004c66:	d003      	beq.n	8004c70 <_fwalk_sglue+0x38>
 8004c68:	4629      	mov	r1, r5
 8004c6a:	4638      	mov	r0, r7
 8004c6c:	47c0      	blx	r8
 8004c6e:	4306      	orrs	r6, r0
 8004c70:	3568      	adds	r5, #104	@ 0x68
 8004c72:	e7e9      	b.n	8004c48 <_fwalk_sglue+0x10>

08004c74 <__sread>:
 8004c74:	b510      	push	{r4, lr}
 8004c76:	460c      	mov	r4, r1
 8004c78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c7c:	f000 f86c 	bl	8004d58 <_read_r>
 8004c80:	2800      	cmp	r0, #0
 8004c82:	bfab      	itete	ge
 8004c84:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004c86:	89a3      	ldrhlt	r3, [r4, #12]
 8004c88:	181b      	addge	r3, r3, r0
 8004c8a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004c8e:	bfac      	ite	ge
 8004c90:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004c92:	81a3      	strhlt	r3, [r4, #12]
 8004c94:	bd10      	pop	{r4, pc}

08004c96 <__swrite>:
 8004c96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c9a:	461f      	mov	r7, r3
 8004c9c:	898b      	ldrh	r3, [r1, #12]
 8004c9e:	05db      	lsls	r3, r3, #23
 8004ca0:	4605      	mov	r5, r0
 8004ca2:	460c      	mov	r4, r1
 8004ca4:	4616      	mov	r6, r2
 8004ca6:	d505      	bpl.n	8004cb4 <__swrite+0x1e>
 8004ca8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004cac:	2302      	movs	r3, #2
 8004cae:	2200      	movs	r2, #0
 8004cb0:	f000 f840 	bl	8004d34 <_lseek_r>
 8004cb4:	89a3      	ldrh	r3, [r4, #12]
 8004cb6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004cba:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004cbe:	81a3      	strh	r3, [r4, #12]
 8004cc0:	4632      	mov	r2, r6
 8004cc2:	463b      	mov	r3, r7
 8004cc4:	4628      	mov	r0, r5
 8004cc6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004cca:	f000 b857 	b.w	8004d7c <_write_r>

08004cce <__sseek>:
 8004cce:	b510      	push	{r4, lr}
 8004cd0:	460c      	mov	r4, r1
 8004cd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004cd6:	f000 f82d 	bl	8004d34 <_lseek_r>
 8004cda:	1c43      	adds	r3, r0, #1
 8004cdc:	89a3      	ldrh	r3, [r4, #12]
 8004cde:	bf15      	itete	ne
 8004ce0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004ce2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004ce6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004cea:	81a3      	strheq	r3, [r4, #12]
 8004cec:	bf18      	it	ne
 8004cee:	81a3      	strhne	r3, [r4, #12]
 8004cf0:	bd10      	pop	{r4, pc}

08004cf2 <__sclose>:
 8004cf2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004cf6:	f000 b80d 	b.w	8004d14 <_close_r>

08004cfa <memset>:
 8004cfa:	4402      	add	r2, r0
 8004cfc:	4603      	mov	r3, r0
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d100      	bne.n	8004d04 <memset+0xa>
 8004d02:	4770      	bx	lr
 8004d04:	f803 1b01 	strb.w	r1, [r3], #1
 8004d08:	e7f9      	b.n	8004cfe <memset+0x4>
	...

08004d0c <_localeconv_r>:
 8004d0c:	4800      	ldr	r0, [pc, #0]	@ (8004d10 <_localeconv_r+0x4>)
 8004d0e:	4770      	bx	lr
 8004d10:	20000150 	.word	0x20000150

08004d14 <_close_r>:
 8004d14:	b538      	push	{r3, r4, r5, lr}
 8004d16:	4d06      	ldr	r5, [pc, #24]	@ (8004d30 <_close_r+0x1c>)
 8004d18:	2300      	movs	r3, #0
 8004d1a:	4604      	mov	r4, r0
 8004d1c:	4608      	mov	r0, r1
 8004d1e:	602b      	str	r3, [r5, #0]
 8004d20:	f7ff f9fe 	bl	8004120 <_close>
 8004d24:	1c43      	adds	r3, r0, #1
 8004d26:	d102      	bne.n	8004d2e <_close_r+0x1a>
 8004d28:	682b      	ldr	r3, [r5, #0]
 8004d2a:	b103      	cbz	r3, 8004d2e <_close_r+0x1a>
 8004d2c:	6023      	str	r3, [r4, #0]
 8004d2e:	bd38      	pop	{r3, r4, r5, pc}
 8004d30:	20000484 	.word	0x20000484

08004d34 <_lseek_r>:
 8004d34:	b538      	push	{r3, r4, r5, lr}
 8004d36:	4d07      	ldr	r5, [pc, #28]	@ (8004d54 <_lseek_r+0x20>)
 8004d38:	4604      	mov	r4, r0
 8004d3a:	4608      	mov	r0, r1
 8004d3c:	4611      	mov	r1, r2
 8004d3e:	2200      	movs	r2, #0
 8004d40:	602a      	str	r2, [r5, #0]
 8004d42:	461a      	mov	r2, r3
 8004d44:	f7ff fa13 	bl	800416e <_lseek>
 8004d48:	1c43      	adds	r3, r0, #1
 8004d4a:	d102      	bne.n	8004d52 <_lseek_r+0x1e>
 8004d4c:	682b      	ldr	r3, [r5, #0]
 8004d4e:	b103      	cbz	r3, 8004d52 <_lseek_r+0x1e>
 8004d50:	6023      	str	r3, [r4, #0]
 8004d52:	bd38      	pop	{r3, r4, r5, pc}
 8004d54:	20000484 	.word	0x20000484

08004d58 <_read_r>:
 8004d58:	b538      	push	{r3, r4, r5, lr}
 8004d5a:	4d07      	ldr	r5, [pc, #28]	@ (8004d78 <_read_r+0x20>)
 8004d5c:	4604      	mov	r4, r0
 8004d5e:	4608      	mov	r0, r1
 8004d60:	4611      	mov	r1, r2
 8004d62:	2200      	movs	r2, #0
 8004d64:	602a      	str	r2, [r5, #0]
 8004d66:	461a      	mov	r2, r3
 8004d68:	f7ff f9a1 	bl	80040ae <_read>
 8004d6c:	1c43      	adds	r3, r0, #1
 8004d6e:	d102      	bne.n	8004d76 <_read_r+0x1e>
 8004d70:	682b      	ldr	r3, [r5, #0]
 8004d72:	b103      	cbz	r3, 8004d76 <_read_r+0x1e>
 8004d74:	6023      	str	r3, [r4, #0]
 8004d76:	bd38      	pop	{r3, r4, r5, pc}
 8004d78:	20000484 	.word	0x20000484

08004d7c <_write_r>:
 8004d7c:	b538      	push	{r3, r4, r5, lr}
 8004d7e:	4d07      	ldr	r5, [pc, #28]	@ (8004d9c <_write_r+0x20>)
 8004d80:	4604      	mov	r4, r0
 8004d82:	4608      	mov	r0, r1
 8004d84:	4611      	mov	r1, r2
 8004d86:	2200      	movs	r2, #0
 8004d88:	602a      	str	r2, [r5, #0]
 8004d8a:	461a      	mov	r2, r3
 8004d8c:	f7ff f9ac 	bl	80040e8 <_write>
 8004d90:	1c43      	adds	r3, r0, #1
 8004d92:	d102      	bne.n	8004d9a <_write_r+0x1e>
 8004d94:	682b      	ldr	r3, [r5, #0]
 8004d96:	b103      	cbz	r3, 8004d9a <_write_r+0x1e>
 8004d98:	6023      	str	r3, [r4, #0]
 8004d9a:	bd38      	pop	{r3, r4, r5, pc}
 8004d9c:	20000484 	.word	0x20000484

08004da0 <__errno>:
 8004da0:	4b01      	ldr	r3, [pc, #4]	@ (8004da8 <__errno+0x8>)
 8004da2:	6818      	ldr	r0, [r3, #0]
 8004da4:	4770      	bx	lr
 8004da6:	bf00      	nop
 8004da8:	20000010 	.word	0x20000010

08004dac <__libc_init_array>:
 8004dac:	b570      	push	{r4, r5, r6, lr}
 8004dae:	4d0d      	ldr	r5, [pc, #52]	@ (8004de4 <__libc_init_array+0x38>)
 8004db0:	4c0d      	ldr	r4, [pc, #52]	@ (8004de8 <__libc_init_array+0x3c>)
 8004db2:	1b64      	subs	r4, r4, r5
 8004db4:	10a4      	asrs	r4, r4, #2
 8004db6:	2600      	movs	r6, #0
 8004db8:	42a6      	cmp	r6, r4
 8004dba:	d109      	bne.n	8004dd0 <__libc_init_array+0x24>
 8004dbc:	4d0b      	ldr	r5, [pc, #44]	@ (8004dec <__libc_init_array+0x40>)
 8004dbe:	4c0c      	ldr	r4, [pc, #48]	@ (8004df0 <__libc_init_array+0x44>)
 8004dc0:	f001 fec2 	bl	8006b48 <_init>
 8004dc4:	1b64      	subs	r4, r4, r5
 8004dc6:	10a4      	asrs	r4, r4, #2
 8004dc8:	2600      	movs	r6, #0
 8004dca:	42a6      	cmp	r6, r4
 8004dcc:	d105      	bne.n	8004dda <__libc_init_array+0x2e>
 8004dce:	bd70      	pop	{r4, r5, r6, pc}
 8004dd0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004dd4:	4798      	blx	r3
 8004dd6:	3601      	adds	r6, #1
 8004dd8:	e7ee      	b.n	8004db8 <__libc_init_array+0xc>
 8004dda:	f855 3b04 	ldr.w	r3, [r5], #4
 8004dde:	4798      	blx	r3
 8004de0:	3601      	adds	r6, #1
 8004de2:	e7f2      	b.n	8004dca <__libc_init_array+0x1e>
 8004de4:	08006f1c 	.word	0x08006f1c
 8004de8:	08006f1c 	.word	0x08006f1c
 8004dec:	08006f1c 	.word	0x08006f1c
 8004df0:	08006f20 	.word	0x08006f20

08004df4 <__retarget_lock_init_recursive>:
 8004df4:	4770      	bx	lr

08004df6 <__retarget_lock_acquire_recursive>:
 8004df6:	4770      	bx	lr

08004df8 <__retarget_lock_release_recursive>:
 8004df8:	4770      	bx	lr

08004dfa <quorem>:
 8004dfa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004dfe:	6903      	ldr	r3, [r0, #16]
 8004e00:	690c      	ldr	r4, [r1, #16]
 8004e02:	42a3      	cmp	r3, r4
 8004e04:	4607      	mov	r7, r0
 8004e06:	db7e      	blt.n	8004f06 <quorem+0x10c>
 8004e08:	3c01      	subs	r4, #1
 8004e0a:	f101 0814 	add.w	r8, r1, #20
 8004e0e:	00a3      	lsls	r3, r4, #2
 8004e10:	f100 0514 	add.w	r5, r0, #20
 8004e14:	9300      	str	r3, [sp, #0]
 8004e16:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004e1a:	9301      	str	r3, [sp, #4]
 8004e1c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004e20:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004e24:	3301      	adds	r3, #1
 8004e26:	429a      	cmp	r2, r3
 8004e28:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004e2c:	fbb2 f6f3 	udiv	r6, r2, r3
 8004e30:	d32e      	bcc.n	8004e90 <quorem+0x96>
 8004e32:	f04f 0a00 	mov.w	sl, #0
 8004e36:	46c4      	mov	ip, r8
 8004e38:	46ae      	mov	lr, r5
 8004e3a:	46d3      	mov	fp, sl
 8004e3c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004e40:	b298      	uxth	r0, r3
 8004e42:	fb06 a000 	mla	r0, r6, r0, sl
 8004e46:	0c02      	lsrs	r2, r0, #16
 8004e48:	0c1b      	lsrs	r3, r3, #16
 8004e4a:	fb06 2303 	mla	r3, r6, r3, r2
 8004e4e:	f8de 2000 	ldr.w	r2, [lr]
 8004e52:	b280      	uxth	r0, r0
 8004e54:	b292      	uxth	r2, r2
 8004e56:	1a12      	subs	r2, r2, r0
 8004e58:	445a      	add	r2, fp
 8004e5a:	f8de 0000 	ldr.w	r0, [lr]
 8004e5e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004e62:	b29b      	uxth	r3, r3
 8004e64:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8004e68:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8004e6c:	b292      	uxth	r2, r2
 8004e6e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8004e72:	45e1      	cmp	r9, ip
 8004e74:	f84e 2b04 	str.w	r2, [lr], #4
 8004e78:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8004e7c:	d2de      	bcs.n	8004e3c <quorem+0x42>
 8004e7e:	9b00      	ldr	r3, [sp, #0]
 8004e80:	58eb      	ldr	r3, [r5, r3]
 8004e82:	b92b      	cbnz	r3, 8004e90 <quorem+0x96>
 8004e84:	9b01      	ldr	r3, [sp, #4]
 8004e86:	3b04      	subs	r3, #4
 8004e88:	429d      	cmp	r5, r3
 8004e8a:	461a      	mov	r2, r3
 8004e8c:	d32f      	bcc.n	8004eee <quorem+0xf4>
 8004e8e:	613c      	str	r4, [r7, #16]
 8004e90:	4638      	mov	r0, r7
 8004e92:	f001 f97f 	bl	8006194 <__mcmp>
 8004e96:	2800      	cmp	r0, #0
 8004e98:	db25      	blt.n	8004ee6 <quorem+0xec>
 8004e9a:	4629      	mov	r1, r5
 8004e9c:	2000      	movs	r0, #0
 8004e9e:	f858 2b04 	ldr.w	r2, [r8], #4
 8004ea2:	f8d1 c000 	ldr.w	ip, [r1]
 8004ea6:	fa1f fe82 	uxth.w	lr, r2
 8004eaa:	fa1f f38c 	uxth.w	r3, ip
 8004eae:	eba3 030e 	sub.w	r3, r3, lr
 8004eb2:	4403      	add	r3, r0
 8004eb4:	0c12      	lsrs	r2, r2, #16
 8004eb6:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8004eba:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8004ebe:	b29b      	uxth	r3, r3
 8004ec0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004ec4:	45c1      	cmp	r9, r8
 8004ec6:	f841 3b04 	str.w	r3, [r1], #4
 8004eca:	ea4f 4022 	mov.w	r0, r2, asr #16
 8004ece:	d2e6      	bcs.n	8004e9e <quorem+0xa4>
 8004ed0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004ed4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004ed8:	b922      	cbnz	r2, 8004ee4 <quorem+0xea>
 8004eda:	3b04      	subs	r3, #4
 8004edc:	429d      	cmp	r5, r3
 8004ede:	461a      	mov	r2, r3
 8004ee0:	d30b      	bcc.n	8004efa <quorem+0x100>
 8004ee2:	613c      	str	r4, [r7, #16]
 8004ee4:	3601      	adds	r6, #1
 8004ee6:	4630      	mov	r0, r6
 8004ee8:	b003      	add	sp, #12
 8004eea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004eee:	6812      	ldr	r2, [r2, #0]
 8004ef0:	3b04      	subs	r3, #4
 8004ef2:	2a00      	cmp	r2, #0
 8004ef4:	d1cb      	bne.n	8004e8e <quorem+0x94>
 8004ef6:	3c01      	subs	r4, #1
 8004ef8:	e7c6      	b.n	8004e88 <quorem+0x8e>
 8004efa:	6812      	ldr	r2, [r2, #0]
 8004efc:	3b04      	subs	r3, #4
 8004efe:	2a00      	cmp	r2, #0
 8004f00:	d1ef      	bne.n	8004ee2 <quorem+0xe8>
 8004f02:	3c01      	subs	r4, #1
 8004f04:	e7ea      	b.n	8004edc <quorem+0xe2>
 8004f06:	2000      	movs	r0, #0
 8004f08:	e7ee      	b.n	8004ee8 <quorem+0xee>
 8004f0a:	0000      	movs	r0, r0
 8004f0c:	0000      	movs	r0, r0
	...

08004f10 <_dtoa_r>:
 8004f10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f14:	69c7      	ldr	r7, [r0, #28]
 8004f16:	b097      	sub	sp, #92	@ 0x5c
 8004f18:	ed8d 0b04 	vstr	d0, [sp, #16]
 8004f1c:	ec55 4b10 	vmov	r4, r5, d0
 8004f20:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8004f22:	9107      	str	r1, [sp, #28]
 8004f24:	4681      	mov	r9, r0
 8004f26:	920c      	str	r2, [sp, #48]	@ 0x30
 8004f28:	9311      	str	r3, [sp, #68]	@ 0x44
 8004f2a:	b97f      	cbnz	r7, 8004f4c <_dtoa_r+0x3c>
 8004f2c:	2010      	movs	r0, #16
 8004f2e:	f000 fe09 	bl	8005b44 <malloc>
 8004f32:	4602      	mov	r2, r0
 8004f34:	f8c9 001c 	str.w	r0, [r9, #28]
 8004f38:	b920      	cbnz	r0, 8004f44 <_dtoa_r+0x34>
 8004f3a:	4ba9      	ldr	r3, [pc, #676]	@ (80051e0 <_dtoa_r+0x2d0>)
 8004f3c:	21ef      	movs	r1, #239	@ 0xef
 8004f3e:	48a9      	ldr	r0, [pc, #676]	@ (80051e4 <_dtoa_r+0x2d4>)
 8004f40:	f001 fafa 	bl	8006538 <__assert_func>
 8004f44:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8004f48:	6007      	str	r7, [r0, #0]
 8004f4a:	60c7      	str	r7, [r0, #12]
 8004f4c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8004f50:	6819      	ldr	r1, [r3, #0]
 8004f52:	b159      	cbz	r1, 8004f6c <_dtoa_r+0x5c>
 8004f54:	685a      	ldr	r2, [r3, #4]
 8004f56:	604a      	str	r2, [r1, #4]
 8004f58:	2301      	movs	r3, #1
 8004f5a:	4093      	lsls	r3, r2
 8004f5c:	608b      	str	r3, [r1, #8]
 8004f5e:	4648      	mov	r0, r9
 8004f60:	f000 fee6 	bl	8005d30 <_Bfree>
 8004f64:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8004f68:	2200      	movs	r2, #0
 8004f6a:	601a      	str	r2, [r3, #0]
 8004f6c:	1e2b      	subs	r3, r5, #0
 8004f6e:	bfb9      	ittee	lt
 8004f70:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8004f74:	9305      	strlt	r3, [sp, #20]
 8004f76:	2300      	movge	r3, #0
 8004f78:	6033      	strge	r3, [r6, #0]
 8004f7a:	9f05      	ldr	r7, [sp, #20]
 8004f7c:	4b9a      	ldr	r3, [pc, #616]	@ (80051e8 <_dtoa_r+0x2d8>)
 8004f7e:	bfbc      	itt	lt
 8004f80:	2201      	movlt	r2, #1
 8004f82:	6032      	strlt	r2, [r6, #0]
 8004f84:	43bb      	bics	r3, r7
 8004f86:	d112      	bne.n	8004fae <_dtoa_r+0x9e>
 8004f88:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8004f8a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8004f8e:	6013      	str	r3, [r2, #0]
 8004f90:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8004f94:	4323      	orrs	r3, r4
 8004f96:	f000 855a 	beq.w	8005a4e <_dtoa_r+0xb3e>
 8004f9a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004f9c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 80051fc <_dtoa_r+0x2ec>
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	f000 855c 	beq.w	8005a5e <_dtoa_r+0xb4e>
 8004fa6:	f10a 0303 	add.w	r3, sl, #3
 8004faa:	f000 bd56 	b.w	8005a5a <_dtoa_r+0xb4a>
 8004fae:	ed9d 7b04 	vldr	d7, [sp, #16]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	ec51 0b17 	vmov	r0, r1, d7
 8004fb8:	2300      	movs	r3, #0
 8004fba:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8004fbe:	f7fb fd83 	bl	8000ac8 <__aeabi_dcmpeq>
 8004fc2:	4680      	mov	r8, r0
 8004fc4:	b158      	cbz	r0, 8004fde <_dtoa_r+0xce>
 8004fc6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8004fc8:	2301      	movs	r3, #1
 8004fca:	6013      	str	r3, [r2, #0]
 8004fcc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004fce:	b113      	cbz	r3, 8004fd6 <_dtoa_r+0xc6>
 8004fd0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8004fd2:	4b86      	ldr	r3, [pc, #536]	@ (80051ec <_dtoa_r+0x2dc>)
 8004fd4:	6013      	str	r3, [r2, #0]
 8004fd6:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8005200 <_dtoa_r+0x2f0>
 8004fda:	f000 bd40 	b.w	8005a5e <_dtoa_r+0xb4e>
 8004fde:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8004fe2:	aa14      	add	r2, sp, #80	@ 0x50
 8004fe4:	a915      	add	r1, sp, #84	@ 0x54
 8004fe6:	4648      	mov	r0, r9
 8004fe8:	f001 f984 	bl	80062f4 <__d2b>
 8004fec:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8004ff0:	9002      	str	r0, [sp, #8]
 8004ff2:	2e00      	cmp	r6, #0
 8004ff4:	d078      	beq.n	80050e8 <_dtoa_r+0x1d8>
 8004ff6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004ff8:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8004ffc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005000:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005004:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005008:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800500c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8005010:	4619      	mov	r1, r3
 8005012:	2200      	movs	r2, #0
 8005014:	4b76      	ldr	r3, [pc, #472]	@ (80051f0 <_dtoa_r+0x2e0>)
 8005016:	f7fb f937 	bl	8000288 <__aeabi_dsub>
 800501a:	a36b      	add	r3, pc, #428	@ (adr r3, 80051c8 <_dtoa_r+0x2b8>)
 800501c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005020:	f7fb faea 	bl	80005f8 <__aeabi_dmul>
 8005024:	a36a      	add	r3, pc, #424	@ (adr r3, 80051d0 <_dtoa_r+0x2c0>)
 8005026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800502a:	f7fb f92f 	bl	800028c <__adddf3>
 800502e:	4604      	mov	r4, r0
 8005030:	4630      	mov	r0, r6
 8005032:	460d      	mov	r5, r1
 8005034:	f7fb fa76 	bl	8000524 <__aeabi_i2d>
 8005038:	a367      	add	r3, pc, #412	@ (adr r3, 80051d8 <_dtoa_r+0x2c8>)
 800503a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800503e:	f7fb fadb 	bl	80005f8 <__aeabi_dmul>
 8005042:	4602      	mov	r2, r0
 8005044:	460b      	mov	r3, r1
 8005046:	4620      	mov	r0, r4
 8005048:	4629      	mov	r1, r5
 800504a:	f7fb f91f 	bl	800028c <__adddf3>
 800504e:	4604      	mov	r4, r0
 8005050:	460d      	mov	r5, r1
 8005052:	f7fb fd81 	bl	8000b58 <__aeabi_d2iz>
 8005056:	2200      	movs	r2, #0
 8005058:	4607      	mov	r7, r0
 800505a:	2300      	movs	r3, #0
 800505c:	4620      	mov	r0, r4
 800505e:	4629      	mov	r1, r5
 8005060:	f7fb fd3c 	bl	8000adc <__aeabi_dcmplt>
 8005064:	b140      	cbz	r0, 8005078 <_dtoa_r+0x168>
 8005066:	4638      	mov	r0, r7
 8005068:	f7fb fa5c 	bl	8000524 <__aeabi_i2d>
 800506c:	4622      	mov	r2, r4
 800506e:	462b      	mov	r3, r5
 8005070:	f7fb fd2a 	bl	8000ac8 <__aeabi_dcmpeq>
 8005074:	b900      	cbnz	r0, 8005078 <_dtoa_r+0x168>
 8005076:	3f01      	subs	r7, #1
 8005078:	2f16      	cmp	r7, #22
 800507a:	d852      	bhi.n	8005122 <_dtoa_r+0x212>
 800507c:	4b5d      	ldr	r3, [pc, #372]	@ (80051f4 <_dtoa_r+0x2e4>)
 800507e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005086:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800508a:	f7fb fd27 	bl	8000adc <__aeabi_dcmplt>
 800508e:	2800      	cmp	r0, #0
 8005090:	d049      	beq.n	8005126 <_dtoa_r+0x216>
 8005092:	3f01      	subs	r7, #1
 8005094:	2300      	movs	r3, #0
 8005096:	9310      	str	r3, [sp, #64]	@ 0x40
 8005098:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800509a:	1b9b      	subs	r3, r3, r6
 800509c:	1e5a      	subs	r2, r3, #1
 800509e:	bf45      	ittet	mi
 80050a0:	f1c3 0301 	rsbmi	r3, r3, #1
 80050a4:	9300      	strmi	r3, [sp, #0]
 80050a6:	2300      	movpl	r3, #0
 80050a8:	2300      	movmi	r3, #0
 80050aa:	9206      	str	r2, [sp, #24]
 80050ac:	bf54      	ite	pl
 80050ae:	9300      	strpl	r3, [sp, #0]
 80050b0:	9306      	strmi	r3, [sp, #24]
 80050b2:	2f00      	cmp	r7, #0
 80050b4:	db39      	blt.n	800512a <_dtoa_r+0x21a>
 80050b6:	9b06      	ldr	r3, [sp, #24]
 80050b8:	970d      	str	r7, [sp, #52]	@ 0x34
 80050ba:	443b      	add	r3, r7
 80050bc:	9306      	str	r3, [sp, #24]
 80050be:	2300      	movs	r3, #0
 80050c0:	9308      	str	r3, [sp, #32]
 80050c2:	9b07      	ldr	r3, [sp, #28]
 80050c4:	2b09      	cmp	r3, #9
 80050c6:	d863      	bhi.n	8005190 <_dtoa_r+0x280>
 80050c8:	2b05      	cmp	r3, #5
 80050ca:	bfc4      	itt	gt
 80050cc:	3b04      	subgt	r3, #4
 80050ce:	9307      	strgt	r3, [sp, #28]
 80050d0:	9b07      	ldr	r3, [sp, #28]
 80050d2:	f1a3 0302 	sub.w	r3, r3, #2
 80050d6:	bfcc      	ite	gt
 80050d8:	2400      	movgt	r4, #0
 80050da:	2401      	movle	r4, #1
 80050dc:	2b03      	cmp	r3, #3
 80050de:	d863      	bhi.n	80051a8 <_dtoa_r+0x298>
 80050e0:	e8df f003 	tbb	[pc, r3]
 80050e4:	2b375452 	.word	0x2b375452
 80050e8:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80050ec:	441e      	add	r6, r3
 80050ee:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80050f2:	2b20      	cmp	r3, #32
 80050f4:	bfc1      	itttt	gt
 80050f6:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80050fa:	409f      	lslgt	r7, r3
 80050fc:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8005100:	fa24 f303 	lsrgt.w	r3, r4, r3
 8005104:	bfd6      	itet	le
 8005106:	f1c3 0320 	rsble	r3, r3, #32
 800510a:	ea47 0003 	orrgt.w	r0, r7, r3
 800510e:	fa04 f003 	lslle.w	r0, r4, r3
 8005112:	f7fb f9f7 	bl	8000504 <__aeabi_ui2d>
 8005116:	2201      	movs	r2, #1
 8005118:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800511c:	3e01      	subs	r6, #1
 800511e:	9212      	str	r2, [sp, #72]	@ 0x48
 8005120:	e776      	b.n	8005010 <_dtoa_r+0x100>
 8005122:	2301      	movs	r3, #1
 8005124:	e7b7      	b.n	8005096 <_dtoa_r+0x186>
 8005126:	9010      	str	r0, [sp, #64]	@ 0x40
 8005128:	e7b6      	b.n	8005098 <_dtoa_r+0x188>
 800512a:	9b00      	ldr	r3, [sp, #0]
 800512c:	1bdb      	subs	r3, r3, r7
 800512e:	9300      	str	r3, [sp, #0]
 8005130:	427b      	negs	r3, r7
 8005132:	9308      	str	r3, [sp, #32]
 8005134:	2300      	movs	r3, #0
 8005136:	930d      	str	r3, [sp, #52]	@ 0x34
 8005138:	e7c3      	b.n	80050c2 <_dtoa_r+0x1b2>
 800513a:	2301      	movs	r3, #1
 800513c:	9309      	str	r3, [sp, #36]	@ 0x24
 800513e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005140:	eb07 0b03 	add.w	fp, r7, r3
 8005144:	f10b 0301 	add.w	r3, fp, #1
 8005148:	2b01      	cmp	r3, #1
 800514a:	9303      	str	r3, [sp, #12]
 800514c:	bfb8      	it	lt
 800514e:	2301      	movlt	r3, #1
 8005150:	e006      	b.n	8005160 <_dtoa_r+0x250>
 8005152:	2301      	movs	r3, #1
 8005154:	9309      	str	r3, [sp, #36]	@ 0x24
 8005156:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005158:	2b00      	cmp	r3, #0
 800515a:	dd28      	ble.n	80051ae <_dtoa_r+0x29e>
 800515c:	469b      	mov	fp, r3
 800515e:	9303      	str	r3, [sp, #12]
 8005160:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8005164:	2100      	movs	r1, #0
 8005166:	2204      	movs	r2, #4
 8005168:	f102 0514 	add.w	r5, r2, #20
 800516c:	429d      	cmp	r5, r3
 800516e:	d926      	bls.n	80051be <_dtoa_r+0x2ae>
 8005170:	6041      	str	r1, [r0, #4]
 8005172:	4648      	mov	r0, r9
 8005174:	f000 fd9c 	bl	8005cb0 <_Balloc>
 8005178:	4682      	mov	sl, r0
 800517a:	2800      	cmp	r0, #0
 800517c:	d142      	bne.n	8005204 <_dtoa_r+0x2f4>
 800517e:	4b1e      	ldr	r3, [pc, #120]	@ (80051f8 <_dtoa_r+0x2e8>)
 8005180:	4602      	mov	r2, r0
 8005182:	f240 11af 	movw	r1, #431	@ 0x1af
 8005186:	e6da      	b.n	8004f3e <_dtoa_r+0x2e>
 8005188:	2300      	movs	r3, #0
 800518a:	e7e3      	b.n	8005154 <_dtoa_r+0x244>
 800518c:	2300      	movs	r3, #0
 800518e:	e7d5      	b.n	800513c <_dtoa_r+0x22c>
 8005190:	2401      	movs	r4, #1
 8005192:	2300      	movs	r3, #0
 8005194:	9307      	str	r3, [sp, #28]
 8005196:	9409      	str	r4, [sp, #36]	@ 0x24
 8005198:	f04f 3bff 	mov.w	fp, #4294967295
 800519c:	2200      	movs	r2, #0
 800519e:	f8cd b00c 	str.w	fp, [sp, #12]
 80051a2:	2312      	movs	r3, #18
 80051a4:	920c      	str	r2, [sp, #48]	@ 0x30
 80051a6:	e7db      	b.n	8005160 <_dtoa_r+0x250>
 80051a8:	2301      	movs	r3, #1
 80051aa:	9309      	str	r3, [sp, #36]	@ 0x24
 80051ac:	e7f4      	b.n	8005198 <_dtoa_r+0x288>
 80051ae:	f04f 0b01 	mov.w	fp, #1
 80051b2:	f8cd b00c 	str.w	fp, [sp, #12]
 80051b6:	465b      	mov	r3, fp
 80051b8:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 80051bc:	e7d0      	b.n	8005160 <_dtoa_r+0x250>
 80051be:	3101      	adds	r1, #1
 80051c0:	0052      	lsls	r2, r2, #1
 80051c2:	e7d1      	b.n	8005168 <_dtoa_r+0x258>
 80051c4:	f3af 8000 	nop.w
 80051c8:	636f4361 	.word	0x636f4361
 80051cc:	3fd287a7 	.word	0x3fd287a7
 80051d0:	8b60c8b3 	.word	0x8b60c8b3
 80051d4:	3fc68a28 	.word	0x3fc68a28
 80051d8:	509f79fb 	.word	0x509f79fb
 80051dc:	3fd34413 	.word	0x3fd34413
 80051e0:	08006be1 	.word	0x08006be1
 80051e4:	08006bf8 	.word	0x08006bf8
 80051e8:	7ff00000 	.word	0x7ff00000
 80051ec:	08006bb1 	.word	0x08006bb1
 80051f0:	3ff80000 	.word	0x3ff80000
 80051f4:	08006d48 	.word	0x08006d48
 80051f8:	08006c50 	.word	0x08006c50
 80051fc:	08006bdd 	.word	0x08006bdd
 8005200:	08006bb0 	.word	0x08006bb0
 8005204:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005208:	6018      	str	r0, [r3, #0]
 800520a:	9b03      	ldr	r3, [sp, #12]
 800520c:	2b0e      	cmp	r3, #14
 800520e:	f200 80a1 	bhi.w	8005354 <_dtoa_r+0x444>
 8005212:	2c00      	cmp	r4, #0
 8005214:	f000 809e 	beq.w	8005354 <_dtoa_r+0x444>
 8005218:	2f00      	cmp	r7, #0
 800521a:	dd33      	ble.n	8005284 <_dtoa_r+0x374>
 800521c:	4b9c      	ldr	r3, [pc, #624]	@ (8005490 <_dtoa_r+0x580>)
 800521e:	f007 020f 	and.w	r2, r7, #15
 8005222:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005226:	ed93 7b00 	vldr	d7, [r3]
 800522a:	05f8      	lsls	r0, r7, #23
 800522c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8005230:	ea4f 1427 	mov.w	r4, r7, asr #4
 8005234:	d516      	bpl.n	8005264 <_dtoa_r+0x354>
 8005236:	4b97      	ldr	r3, [pc, #604]	@ (8005494 <_dtoa_r+0x584>)
 8005238:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800523c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005240:	f7fb fb04 	bl	800084c <__aeabi_ddiv>
 8005244:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005248:	f004 040f 	and.w	r4, r4, #15
 800524c:	2603      	movs	r6, #3
 800524e:	4d91      	ldr	r5, [pc, #580]	@ (8005494 <_dtoa_r+0x584>)
 8005250:	b954      	cbnz	r4, 8005268 <_dtoa_r+0x358>
 8005252:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8005256:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800525a:	f7fb faf7 	bl	800084c <__aeabi_ddiv>
 800525e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005262:	e028      	b.n	80052b6 <_dtoa_r+0x3a6>
 8005264:	2602      	movs	r6, #2
 8005266:	e7f2      	b.n	800524e <_dtoa_r+0x33e>
 8005268:	07e1      	lsls	r1, r4, #31
 800526a:	d508      	bpl.n	800527e <_dtoa_r+0x36e>
 800526c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8005270:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005274:	f7fb f9c0 	bl	80005f8 <__aeabi_dmul>
 8005278:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800527c:	3601      	adds	r6, #1
 800527e:	1064      	asrs	r4, r4, #1
 8005280:	3508      	adds	r5, #8
 8005282:	e7e5      	b.n	8005250 <_dtoa_r+0x340>
 8005284:	f000 80af 	beq.w	80053e6 <_dtoa_r+0x4d6>
 8005288:	427c      	negs	r4, r7
 800528a:	4b81      	ldr	r3, [pc, #516]	@ (8005490 <_dtoa_r+0x580>)
 800528c:	4d81      	ldr	r5, [pc, #516]	@ (8005494 <_dtoa_r+0x584>)
 800528e:	f004 020f 	and.w	r2, r4, #15
 8005292:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800529a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800529e:	f7fb f9ab 	bl	80005f8 <__aeabi_dmul>
 80052a2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80052a6:	1124      	asrs	r4, r4, #4
 80052a8:	2300      	movs	r3, #0
 80052aa:	2602      	movs	r6, #2
 80052ac:	2c00      	cmp	r4, #0
 80052ae:	f040 808f 	bne.w	80053d0 <_dtoa_r+0x4c0>
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d1d3      	bne.n	800525e <_dtoa_r+0x34e>
 80052b6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80052b8:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	f000 8094 	beq.w	80053ea <_dtoa_r+0x4da>
 80052c2:	4b75      	ldr	r3, [pc, #468]	@ (8005498 <_dtoa_r+0x588>)
 80052c4:	2200      	movs	r2, #0
 80052c6:	4620      	mov	r0, r4
 80052c8:	4629      	mov	r1, r5
 80052ca:	f7fb fc07 	bl	8000adc <__aeabi_dcmplt>
 80052ce:	2800      	cmp	r0, #0
 80052d0:	f000 808b 	beq.w	80053ea <_dtoa_r+0x4da>
 80052d4:	9b03      	ldr	r3, [sp, #12]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	f000 8087 	beq.w	80053ea <_dtoa_r+0x4da>
 80052dc:	f1bb 0f00 	cmp.w	fp, #0
 80052e0:	dd34      	ble.n	800534c <_dtoa_r+0x43c>
 80052e2:	4620      	mov	r0, r4
 80052e4:	4b6d      	ldr	r3, [pc, #436]	@ (800549c <_dtoa_r+0x58c>)
 80052e6:	2200      	movs	r2, #0
 80052e8:	4629      	mov	r1, r5
 80052ea:	f7fb f985 	bl	80005f8 <__aeabi_dmul>
 80052ee:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80052f2:	f107 38ff 	add.w	r8, r7, #4294967295
 80052f6:	3601      	adds	r6, #1
 80052f8:	465c      	mov	r4, fp
 80052fa:	4630      	mov	r0, r6
 80052fc:	f7fb f912 	bl	8000524 <__aeabi_i2d>
 8005300:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005304:	f7fb f978 	bl	80005f8 <__aeabi_dmul>
 8005308:	4b65      	ldr	r3, [pc, #404]	@ (80054a0 <_dtoa_r+0x590>)
 800530a:	2200      	movs	r2, #0
 800530c:	f7fa ffbe 	bl	800028c <__adddf3>
 8005310:	4605      	mov	r5, r0
 8005312:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8005316:	2c00      	cmp	r4, #0
 8005318:	d16a      	bne.n	80053f0 <_dtoa_r+0x4e0>
 800531a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800531e:	4b61      	ldr	r3, [pc, #388]	@ (80054a4 <_dtoa_r+0x594>)
 8005320:	2200      	movs	r2, #0
 8005322:	f7fa ffb1 	bl	8000288 <__aeabi_dsub>
 8005326:	4602      	mov	r2, r0
 8005328:	460b      	mov	r3, r1
 800532a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800532e:	462a      	mov	r2, r5
 8005330:	4633      	mov	r3, r6
 8005332:	f7fb fbf1 	bl	8000b18 <__aeabi_dcmpgt>
 8005336:	2800      	cmp	r0, #0
 8005338:	f040 8298 	bne.w	800586c <_dtoa_r+0x95c>
 800533c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005340:	462a      	mov	r2, r5
 8005342:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005346:	f7fb fbc9 	bl	8000adc <__aeabi_dcmplt>
 800534a:	bb38      	cbnz	r0, 800539c <_dtoa_r+0x48c>
 800534c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8005350:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005354:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8005356:	2b00      	cmp	r3, #0
 8005358:	f2c0 8157 	blt.w	800560a <_dtoa_r+0x6fa>
 800535c:	2f0e      	cmp	r7, #14
 800535e:	f300 8154 	bgt.w	800560a <_dtoa_r+0x6fa>
 8005362:	4b4b      	ldr	r3, [pc, #300]	@ (8005490 <_dtoa_r+0x580>)
 8005364:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005368:	ed93 7b00 	vldr	d7, [r3]
 800536c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800536e:	2b00      	cmp	r3, #0
 8005370:	ed8d 7b00 	vstr	d7, [sp]
 8005374:	f280 80e5 	bge.w	8005542 <_dtoa_r+0x632>
 8005378:	9b03      	ldr	r3, [sp, #12]
 800537a:	2b00      	cmp	r3, #0
 800537c:	f300 80e1 	bgt.w	8005542 <_dtoa_r+0x632>
 8005380:	d10c      	bne.n	800539c <_dtoa_r+0x48c>
 8005382:	4b48      	ldr	r3, [pc, #288]	@ (80054a4 <_dtoa_r+0x594>)
 8005384:	2200      	movs	r2, #0
 8005386:	ec51 0b17 	vmov	r0, r1, d7
 800538a:	f7fb f935 	bl	80005f8 <__aeabi_dmul>
 800538e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005392:	f7fb fbb7 	bl	8000b04 <__aeabi_dcmpge>
 8005396:	2800      	cmp	r0, #0
 8005398:	f000 8266 	beq.w	8005868 <_dtoa_r+0x958>
 800539c:	2400      	movs	r4, #0
 800539e:	4625      	mov	r5, r4
 80053a0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80053a2:	4656      	mov	r6, sl
 80053a4:	ea6f 0803 	mvn.w	r8, r3
 80053a8:	2700      	movs	r7, #0
 80053aa:	4621      	mov	r1, r4
 80053ac:	4648      	mov	r0, r9
 80053ae:	f000 fcbf 	bl	8005d30 <_Bfree>
 80053b2:	2d00      	cmp	r5, #0
 80053b4:	f000 80bd 	beq.w	8005532 <_dtoa_r+0x622>
 80053b8:	b12f      	cbz	r7, 80053c6 <_dtoa_r+0x4b6>
 80053ba:	42af      	cmp	r7, r5
 80053bc:	d003      	beq.n	80053c6 <_dtoa_r+0x4b6>
 80053be:	4639      	mov	r1, r7
 80053c0:	4648      	mov	r0, r9
 80053c2:	f000 fcb5 	bl	8005d30 <_Bfree>
 80053c6:	4629      	mov	r1, r5
 80053c8:	4648      	mov	r0, r9
 80053ca:	f000 fcb1 	bl	8005d30 <_Bfree>
 80053ce:	e0b0      	b.n	8005532 <_dtoa_r+0x622>
 80053d0:	07e2      	lsls	r2, r4, #31
 80053d2:	d505      	bpl.n	80053e0 <_dtoa_r+0x4d0>
 80053d4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80053d8:	f7fb f90e 	bl	80005f8 <__aeabi_dmul>
 80053dc:	3601      	adds	r6, #1
 80053de:	2301      	movs	r3, #1
 80053e0:	1064      	asrs	r4, r4, #1
 80053e2:	3508      	adds	r5, #8
 80053e4:	e762      	b.n	80052ac <_dtoa_r+0x39c>
 80053e6:	2602      	movs	r6, #2
 80053e8:	e765      	b.n	80052b6 <_dtoa_r+0x3a6>
 80053ea:	9c03      	ldr	r4, [sp, #12]
 80053ec:	46b8      	mov	r8, r7
 80053ee:	e784      	b.n	80052fa <_dtoa_r+0x3ea>
 80053f0:	4b27      	ldr	r3, [pc, #156]	@ (8005490 <_dtoa_r+0x580>)
 80053f2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80053f4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80053f8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80053fc:	4454      	add	r4, sl
 80053fe:	2900      	cmp	r1, #0
 8005400:	d054      	beq.n	80054ac <_dtoa_r+0x59c>
 8005402:	4929      	ldr	r1, [pc, #164]	@ (80054a8 <_dtoa_r+0x598>)
 8005404:	2000      	movs	r0, #0
 8005406:	f7fb fa21 	bl	800084c <__aeabi_ddiv>
 800540a:	4633      	mov	r3, r6
 800540c:	462a      	mov	r2, r5
 800540e:	f7fa ff3b 	bl	8000288 <__aeabi_dsub>
 8005412:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8005416:	4656      	mov	r6, sl
 8005418:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800541c:	f7fb fb9c 	bl	8000b58 <__aeabi_d2iz>
 8005420:	4605      	mov	r5, r0
 8005422:	f7fb f87f 	bl	8000524 <__aeabi_i2d>
 8005426:	4602      	mov	r2, r0
 8005428:	460b      	mov	r3, r1
 800542a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800542e:	f7fa ff2b 	bl	8000288 <__aeabi_dsub>
 8005432:	3530      	adds	r5, #48	@ 0x30
 8005434:	4602      	mov	r2, r0
 8005436:	460b      	mov	r3, r1
 8005438:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800543c:	f806 5b01 	strb.w	r5, [r6], #1
 8005440:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8005444:	f7fb fb4a 	bl	8000adc <__aeabi_dcmplt>
 8005448:	2800      	cmp	r0, #0
 800544a:	d172      	bne.n	8005532 <_dtoa_r+0x622>
 800544c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005450:	4911      	ldr	r1, [pc, #68]	@ (8005498 <_dtoa_r+0x588>)
 8005452:	2000      	movs	r0, #0
 8005454:	f7fa ff18 	bl	8000288 <__aeabi_dsub>
 8005458:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800545c:	f7fb fb3e 	bl	8000adc <__aeabi_dcmplt>
 8005460:	2800      	cmp	r0, #0
 8005462:	f040 80b4 	bne.w	80055ce <_dtoa_r+0x6be>
 8005466:	42a6      	cmp	r6, r4
 8005468:	f43f af70 	beq.w	800534c <_dtoa_r+0x43c>
 800546c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8005470:	4b0a      	ldr	r3, [pc, #40]	@ (800549c <_dtoa_r+0x58c>)
 8005472:	2200      	movs	r2, #0
 8005474:	f7fb f8c0 	bl	80005f8 <__aeabi_dmul>
 8005478:	4b08      	ldr	r3, [pc, #32]	@ (800549c <_dtoa_r+0x58c>)
 800547a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800547e:	2200      	movs	r2, #0
 8005480:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005484:	f7fb f8b8 	bl	80005f8 <__aeabi_dmul>
 8005488:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800548c:	e7c4      	b.n	8005418 <_dtoa_r+0x508>
 800548e:	bf00      	nop
 8005490:	08006d48 	.word	0x08006d48
 8005494:	08006d20 	.word	0x08006d20
 8005498:	3ff00000 	.word	0x3ff00000
 800549c:	40240000 	.word	0x40240000
 80054a0:	401c0000 	.word	0x401c0000
 80054a4:	40140000 	.word	0x40140000
 80054a8:	3fe00000 	.word	0x3fe00000
 80054ac:	4631      	mov	r1, r6
 80054ae:	4628      	mov	r0, r5
 80054b0:	f7fb f8a2 	bl	80005f8 <__aeabi_dmul>
 80054b4:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80054b8:	9413      	str	r4, [sp, #76]	@ 0x4c
 80054ba:	4656      	mov	r6, sl
 80054bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80054c0:	f7fb fb4a 	bl	8000b58 <__aeabi_d2iz>
 80054c4:	4605      	mov	r5, r0
 80054c6:	f7fb f82d 	bl	8000524 <__aeabi_i2d>
 80054ca:	4602      	mov	r2, r0
 80054cc:	460b      	mov	r3, r1
 80054ce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80054d2:	f7fa fed9 	bl	8000288 <__aeabi_dsub>
 80054d6:	3530      	adds	r5, #48	@ 0x30
 80054d8:	f806 5b01 	strb.w	r5, [r6], #1
 80054dc:	4602      	mov	r2, r0
 80054de:	460b      	mov	r3, r1
 80054e0:	42a6      	cmp	r6, r4
 80054e2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80054e6:	f04f 0200 	mov.w	r2, #0
 80054ea:	d124      	bne.n	8005536 <_dtoa_r+0x626>
 80054ec:	4baf      	ldr	r3, [pc, #700]	@ (80057ac <_dtoa_r+0x89c>)
 80054ee:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80054f2:	f7fa fecb 	bl	800028c <__adddf3>
 80054f6:	4602      	mov	r2, r0
 80054f8:	460b      	mov	r3, r1
 80054fa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80054fe:	f7fb fb0b 	bl	8000b18 <__aeabi_dcmpgt>
 8005502:	2800      	cmp	r0, #0
 8005504:	d163      	bne.n	80055ce <_dtoa_r+0x6be>
 8005506:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800550a:	49a8      	ldr	r1, [pc, #672]	@ (80057ac <_dtoa_r+0x89c>)
 800550c:	2000      	movs	r0, #0
 800550e:	f7fa febb 	bl	8000288 <__aeabi_dsub>
 8005512:	4602      	mov	r2, r0
 8005514:	460b      	mov	r3, r1
 8005516:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800551a:	f7fb fadf 	bl	8000adc <__aeabi_dcmplt>
 800551e:	2800      	cmp	r0, #0
 8005520:	f43f af14 	beq.w	800534c <_dtoa_r+0x43c>
 8005524:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8005526:	1e73      	subs	r3, r6, #1
 8005528:	9313      	str	r3, [sp, #76]	@ 0x4c
 800552a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800552e:	2b30      	cmp	r3, #48	@ 0x30
 8005530:	d0f8      	beq.n	8005524 <_dtoa_r+0x614>
 8005532:	4647      	mov	r7, r8
 8005534:	e03b      	b.n	80055ae <_dtoa_r+0x69e>
 8005536:	4b9e      	ldr	r3, [pc, #632]	@ (80057b0 <_dtoa_r+0x8a0>)
 8005538:	f7fb f85e 	bl	80005f8 <__aeabi_dmul>
 800553c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005540:	e7bc      	b.n	80054bc <_dtoa_r+0x5ac>
 8005542:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8005546:	4656      	mov	r6, sl
 8005548:	e9dd 2300 	ldrd	r2, r3, [sp]
 800554c:	4620      	mov	r0, r4
 800554e:	4629      	mov	r1, r5
 8005550:	f7fb f97c 	bl	800084c <__aeabi_ddiv>
 8005554:	f7fb fb00 	bl	8000b58 <__aeabi_d2iz>
 8005558:	4680      	mov	r8, r0
 800555a:	f7fa ffe3 	bl	8000524 <__aeabi_i2d>
 800555e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005562:	f7fb f849 	bl	80005f8 <__aeabi_dmul>
 8005566:	4602      	mov	r2, r0
 8005568:	460b      	mov	r3, r1
 800556a:	4620      	mov	r0, r4
 800556c:	4629      	mov	r1, r5
 800556e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8005572:	f7fa fe89 	bl	8000288 <__aeabi_dsub>
 8005576:	f806 4b01 	strb.w	r4, [r6], #1
 800557a:	9d03      	ldr	r5, [sp, #12]
 800557c:	eba6 040a 	sub.w	r4, r6, sl
 8005580:	42a5      	cmp	r5, r4
 8005582:	4602      	mov	r2, r0
 8005584:	460b      	mov	r3, r1
 8005586:	d133      	bne.n	80055f0 <_dtoa_r+0x6e0>
 8005588:	f7fa fe80 	bl	800028c <__adddf3>
 800558c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005590:	4604      	mov	r4, r0
 8005592:	460d      	mov	r5, r1
 8005594:	f7fb fac0 	bl	8000b18 <__aeabi_dcmpgt>
 8005598:	b9c0      	cbnz	r0, 80055cc <_dtoa_r+0x6bc>
 800559a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800559e:	4620      	mov	r0, r4
 80055a0:	4629      	mov	r1, r5
 80055a2:	f7fb fa91 	bl	8000ac8 <__aeabi_dcmpeq>
 80055a6:	b110      	cbz	r0, 80055ae <_dtoa_r+0x69e>
 80055a8:	f018 0f01 	tst.w	r8, #1
 80055ac:	d10e      	bne.n	80055cc <_dtoa_r+0x6bc>
 80055ae:	9902      	ldr	r1, [sp, #8]
 80055b0:	4648      	mov	r0, r9
 80055b2:	f000 fbbd 	bl	8005d30 <_Bfree>
 80055b6:	2300      	movs	r3, #0
 80055b8:	7033      	strb	r3, [r6, #0]
 80055ba:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80055bc:	3701      	adds	r7, #1
 80055be:	601f      	str	r7, [r3, #0]
 80055c0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	f000 824b 	beq.w	8005a5e <_dtoa_r+0xb4e>
 80055c8:	601e      	str	r6, [r3, #0]
 80055ca:	e248      	b.n	8005a5e <_dtoa_r+0xb4e>
 80055cc:	46b8      	mov	r8, r7
 80055ce:	4633      	mov	r3, r6
 80055d0:	461e      	mov	r6, r3
 80055d2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80055d6:	2a39      	cmp	r2, #57	@ 0x39
 80055d8:	d106      	bne.n	80055e8 <_dtoa_r+0x6d8>
 80055da:	459a      	cmp	sl, r3
 80055dc:	d1f8      	bne.n	80055d0 <_dtoa_r+0x6c0>
 80055de:	2230      	movs	r2, #48	@ 0x30
 80055e0:	f108 0801 	add.w	r8, r8, #1
 80055e4:	f88a 2000 	strb.w	r2, [sl]
 80055e8:	781a      	ldrb	r2, [r3, #0]
 80055ea:	3201      	adds	r2, #1
 80055ec:	701a      	strb	r2, [r3, #0]
 80055ee:	e7a0      	b.n	8005532 <_dtoa_r+0x622>
 80055f0:	4b6f      	ldr	r3, [pc, #444]	@ (80057b0 <_dtoa_r+0x8a0>)
 80055f2:	2200      	movs	r2, #0
 80055f4:	f7fb f800 	bl	80005f8 <__aeabi_dmul>
 80055f8:	2200      	movs	r2, #0
 80055fa:	2300      	movs	r3, #0
 80055fc:	4604      	mov	r4, r0
 80055fe:	460d      	mov	r5, r1
 8005600:	f7fb fa62 	bl	8000ac8 <__aeabi_dcmpeq>
 8005604:	2800      	cmp	r0, #0
 8005606:	d09f      	beq.n	8005548 <_dtoa_r+0x638>
 8005608:	e7d1      	b.n	80055ae <_dtoa_r+0x69e>
 800560a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800560c:	2a00      	cmp	r2, #0
 800560e:	f000 80ea 	beq.w	80057e6 <_dtoa_r+0x8d6>
 8005612:	9a07      	ldr	r2, [sp, #28]
 8005614:	2a01      	cmp	r2, #1
 8005616:	f300 80cd 	bgt.w	80057b4 <_dtoa_r+0x8a4>
 800561a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800561c:	2a00      	cmp	r2, #0
 800561e:	f000 80c1 	beq.w	80057a4 <_dtoa_r+0x894>
 8005622:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8005626:	9c08      	ldr	r4, [sp, #32]
 8005628:	9e00      	ldr	r6, [sp, #0]
 800562a:	9a00      	ldr	r2, [sp, #0]
 800562c:	441a      	add	r2, r3
 800562e:	9200      	str	r2, [sp, #0]
 8005630:	9a06      	ldr	r2, [sp, #24]
 8005632:	2101      	movs	r1, #1
 8005634:	441a      	add	r2, r3
 8005636:	4648      	mov	r0, r9
 8005638:	9206      	str	r2, [sp, #24]
 800563a:	f000 fc2d 	bl	8005e98 <__i2b>
 800563e:	4605      	mov	r5, r0
 8005640:	b166      	cbz	r6, 800565c <_dtoa_r+0x74c>
 8005642:	9b06      	ldr	r3, [sp, #24]
 8005644:	2b00      	cmp	r3, #0
 8005646:	dd09      	ble.n	800565c <_dtoa_r+0x74c>
 8005648:	42b3      	cmp	r3, r6
 800564a:	9a00      	ldr	r2, [sp, #0]
 800564c:	bfa8      	it	ge
 800564e:	4633      	movge	r3, r6
 8005650:	1ad2      	subs	r2, r2, r3
 8005652:	9200      	str	r2, [sp, #0]
 8005654:	9a06      	ldr	r2, [sp, #24]
 8005656:	1af6      	subs	r6, r6, r3
 8005658:	1ad3      	subs	r3, r2, r3
 800565a:	9306      	str	r3, [sp, #24]
 800565c:	9b08      	ldr	r3, [sp, #32]
 800565e:	b30b      	cbz	r3, 80056a4 <_dtoa_r+0x794>
 8005660:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005662:	2b00      	cmp	r3, #0
 8005664:	f000 80c6 	beq.w	80057f4 <_dtoa_r+0x8e4>
 8005668:	2c00      	cmp	r4, #0
 800566a:	f000 80c0 	beq.w	80057ee <_dtoa_r+0x8de>
 800566e:	4629      	mov	r1, r5
 8005670:	4622      	mov	r2, r4
 8005672:	4648      	mov	r0, r9
 8005674:	f000 fcc8 	bl	8006008 <__pow5mult>
 8005678:	9a02      	ldr	r2, [sp, #8]
 800567a:	4601      	mov	r1, r0
 800567c:	4605      	mov	r5, r0
 800567e:	4648      	mov	r0, r9
 8005680:	f000 fc20 	bl	8005ec4 <__multiply>
 8005684:	9902      	ldr	r1, [sp, #8]
 8005686:	4680      	mov	r8, r0
 8005688:	4648      	mov	r0, r9
 800568a:	f000 fb51 	bl	8005d30 <_Bfree>
 800568e:	9b08      	ldr	r3, [sp, #32]
 8005690:	1b1b      	subs	r3, r3, r4
 8005692:	9308      	str	r3, [sp, #32]
 8005694:	f000 80b1 	beq.w	80057fa <_dtoa_r+0x8ea>
 8005698:	9a08      	ldr	r2, [sp, #32]
 800569a:	4641      	mov	r1, r8
 800569c:	4648      	mov	r0, r9
 800569e:	f000 fcb3 	bl	8006008 <__pow5mult>
 80056a2:	9002      	str	r0, [sp, #8]
 80056a4:	2101      	movs	r1, #1
 80056a6:	4648      	mov	r0, r9
 80056a8:	f000 fbf6 	bl	8005e98 <__i2b>
 80056ac:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80056ae:	4604      	mov	r4, r0
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	f000 81d8 	beq.w	8005a66 <_dtoa_r+0xb56>
 80056b6:	461a      	mov	r2, r3
 80056b8:	4601      	mov	r1, r0
 80056ba:	4648      	mov	r0, r9
 80056bc:	f000 fca4 	bl	8006008 <__pow5mult>
 80056c0:	9b07      	ldr	r3, [sp, #28]
 80056c2:	2b01      	cmp	r3, #1
 80056c4:	4604      	mov	r4, r0
 80056c6:	f300 809f 	bgt.w	8005808 <_dtoa_r+0x8f8>
 80056ca:	9b04      	ldr	r3, [sp, #16]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	f040 8097 	bne.w	8005800 <_dtoa_r+0x8f0>
 80056d2:	9b05      	ldr	r3, [sp, #20]
 80056d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80056d8:	2b00      	cmp	r3, #0
 80056da:	f040 8093 	bne.w	8005804 <_dtoa_r+0x8f4>
 80056de:	9b05      	ldr	r3, [sp, #20]
 80056e0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80056e4:	0d1b      	lsrs	r3, r3, #20
 80056e6:	051b      	lsls	r3, r3, #20
 80056e8:	b133      	cbz	r3, 80056f8 <_dtoa_r+0x7e8>
 80056ea:	9b00      	ldr	r3, [sp, #0]
 80056ec:	3301      	adds	r3, #1
 80056ee:	9300      	str	r3, [sp, #0]
 80056f0:	9b06      	ldr	r3, [sp, #24]
 80056f2:	3301      	adds	r3, #1
 80056f4:	9306      	str	r3, [sp, #24]
 80056f6:	2301      	movs	r3, #1
 80056f8:	9308      	str	r3, [sp, #32]
 80056fa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	f000 81b8 	beq.w	8005a72 <_dtoa_r+0xb62>
 8005702:	6923      	ldr	r3, [r4, #16]
 8005704:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005708:	6918      	ldr	r0, [r3, #16]
 800570a:	f000 fb79 	bl	8005e00 <__hi0bits>
 800570e:	f1c0 0020 	rsb	r0, r0, #32
 8005712:	9b06      	ldr	r3, [sp, #24]
 8005714:	4418      	add	r0, r3
 8005716:	f010 001f 	ands.w	r0, r0, #31
 800571a:	f000 8082 	beq.w	8005822 <_dtoa_r+0x912>
 800571e:	f1c0 0320 	rsb	r3, r0, #32
 8005722:	2b04      	cmp	r3, #4
 8005724:	dd73      	ble.n	800580e <_dtoa_r+0x8fe>
 8005726:	9b00      	ldr	r3, [sp, #0]
 8005728:	f1c0 001c 	rsb	r0, r0, #28
 800572c:	4403      	add	r3, r0
 800572e:	9300      	str	r3, [sp, #0]
 8005730:	9b06      	ldr	r3, [sp, #24]
 8005732:	4403      	add	r3, r0
 8005734:	4406      	add	r6, r0
 8005736:	9306      	str	r3, [sp, #24]
 8005738:	9b00      	ldr	r3, [sp, #0]
 800573a:	2b00      	cmp	r3, #0
 800573c:	dd05      	ble.n	800574a <_dtoa_r+0x83a>
 800573e:	9902      	ldr	r1, [sp, #8]
 8005740:	461a      	mov	r2, r3
 8005742:	4648      	mov	r0, r9
 8005744:	f000 fcba 	bl	80060bc <__lshift>
 8005748:	9002      	str	r0, [sp, #8]
 800574a:	9b06      	ldr	r3, [sp, #24]
 800574c:	2b00      	cmp	r3, #0
 800574e:	dd05      	ble.n	800575c <_dtoa_r+0x84c>
 8005750:	4621      	mov	r1, r4
 8005752:	461a      	mov	r2, r3
 8005754:	4648      	mov	r0, r9
 8005756:	f000 fcb1 	bl	80060bc <__lshift>
 800575a:	4604      	mov	r4, r0
 800575c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800575e:	2b00      	cmp	r3, #0
 8005760:	d061      	beq.n	8005826 <_dtoa_r+0x916>
 8005762:	9802      	ldr	r0, [sp, #8]
 8005764:	4621      	mov	r1, r4
 8005766:	f000 fd15 	bl	8006194 <__mcmp>
 800576a:	2800      	cmp	r0, #0
 800576c:	da5b      	bge.n	8005826 <_dtoa_r+0x916>
 800576e:	2300      	movs	r3, #0
 8005770:	9902      	ldr	r1, [sp, #8]
 8005772:	220a      	movs	r2, #10
 8005774:	4648      	mov	r0, r9
 8005776:	f000 fafd 	bl	8005d74 <__multadd>
 800577a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800577c:	9002      	str	r0, [sp, #8]
 800577e:	f107 38ff 	add.w	r8, r7, #4294967295
 8005782:	2b00      	cmp	r3, #0
 8005784:	f000 8177 	beq.w	8005a76 <_dtoa_r+0xb66>
 8005788:	4629      	mov	r1, r5
 800578a:	2300      	movs	r3, #0
 800578c:	220a      	movs	r2, #10
 800578e:	4648      	mov	r0, r9
 8005790:	f000 faf0 	bl	8005d74 <__multadd>
 8005794:	f1bb 0f00 	cmp.w	fp, #0
 8005798:	4605      	mov	r5, r0
 800579a:	dc6f      	bgt.n	800587c <_dtoa_r+0x96c>
 800579c:	9b07      	ldr	r3, [sp, #28]
 800579e:	2b02      	cmp	r3, #2
 80057a0:	dc49      	bgt.n	8005836 <_dtoa_r+0x926>
 80057a2:	e06b      	b.n	800587c <_dtoa_r+0x96c>
 80057a4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80057a6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80057aa:	e73c      	b.n	8005626 <_dtoa_r+0x716>
 80057ac:	3fe00000 	.word	0x3fe00000
 80057b0:	40240000 	.word	0x40240000
 80057b4:	9b03      	ldr	r3, [sp, #12]
 80057b6:	1e5c      	subs	r4, r3, #1
 80057b8:	9b08      	ldr	r3, [sp, #32]
 80057ba:	42a3      	cmp	r3, r4
 80057bc:	db09      	blt.n	80057d2 <_dtoa_r+0x8c2>
 80057be:	1b1c      	subs	r4, r3, r4
 80057c0:	9b03      	ldr	r3, [sp, #12]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	f6bf af30 	bge.w	8005628 <_dtoa_r+0x718>
 80057c8:	9b00      	ldr	r3, [sp, #0]
 80057ca:	9a03      	ldr	r2, [sp, #12]
 80057cc:	1a9e      	subs	r6, r3, r2
 80057ce:	2300      	movs	r3, #0
 80057d0:	e72b      	b.n	800562a <_dtoa_r+0x71a>
 80057d2:	9b08      	ldr	r3, [sp, #32]
 80057d4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80057d6:	9408      	str	r4, [sp, #32]
 80057d8:	1ae3      	subs	r3, r4, r3
 80057da:	441a      	add	r2, r3
 80057dc:	9e00      	ldr	r6, [sp, #0]
 80057de:	9b03      	ldr	r3, [sp, #12]
 80057e0:	920d      	str	r2, [sp, #52]	@ 0x34
 80057e2:	2400      	movs	r4, #0
 80057e4:	e721      	b.n	800562a <_dtoa_r+0x71a>
 80057e6:	9c08      	ldr	r4, [sp, #32]
 80057e8:	9e00      	ldr	r6, [sp, #0]
 80057ea:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80057ec:	e728      	b.n	8005640 <_dtoa_r+0x730>
 80057ee:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80057f2:	e751      	b.n	8005698 <_dtoa_r+0x788>
 80057f4:	9a08      	ldr	r2, [sp, #32]
 80057f6:	9902      	ldr	r1, [sp, #8]
 80057f8:	e750      	b.n	800569c <_dtoa_r+0x78c>
 80057fa:	f8cd 8008 	str.w	r8, [sp, #8]
 80057fe:	e751      	b.n	80056a4 <_dtoa_r+0x794>
 8005800:	2300      	movs	r3, #0
 8005802:	e779      	b.n	80056f8 <_dtoa_r+0x7e8>
 8005804:	9b04      	ldr	r3, [sp, #16]
 8005806:	e777      	b.n	80056f8 <_dtoa_r+0x7e8>
 8005808:	2300      	movs	r3, #0
 800580a:	9308      	str	r3, [sp, #32]
 800580c:	e779      	b.n	8005702 <_dtoa_r+0x7f2>
 800580e:	d093      	beq.n	8005738 <_dtoa_r+0x828>
 8005810:	9a00      	ldr	r2, [sp, #0]
 8005812:	331c      	adds	r3, #28
 8005814:	441a      	add	r2, r3
 8005816:	9200      	str	r2, [sp, #0]
 8005818:	9a06      	ldr	r2, [sp, #24]
 800581a:	441a      	add	r2, r3
 800581c:	441e      	add	r6, r3
 800581e:	9206      	str	r2, [sp, #24]
 8005820:	e78a      	b.n	8005738 <_dtoa_r+0x828>
 8005822:	4603      	mov	r3, r0
 8005824:	e7f4      	b.n	8005810 <_dtoa_r+0x900>
 8005826:	9b03      	ldr	r3, [sp, #12]
 8005828:	2b00      	cmp	r3, #0
 800582a:	46b8      	mov	r8, r7
 800582c:	dc20      	bgt.n	8005870 <_dtoa_r+0x960>
 800582e:	469b      	mov	fp, r3
 8005830:	9b07      	ldr	r3, [sp, #28]
 8005832:	2b02      	cmp	r3, #2
 8005834:	dd1e      	ble.n	8005874 <_dtoa_r+0x964>
 8005836:	f1bb 0f00 	cmp.w	fp, #0
 800583a:	f47f adb1 	bne.w	80053a0 <_dtoa_r+0x490>
 800583e:	4621      	mov	r1, r4
 8005840:	465b      	mov	r3, fp
 8005842:	2205      	movs	r2, #5
 8005844:	4648      	mov	r0, r9
 8005846:	f000 fa95 	bl	8005d74 <__multadd>
 800584a:	4601      	mov	r1, r0
 800584c:	4604      	mov	r4, r0
 800584e:	9802      	ldr	r0, [sp, #8]
 8005850:	f000 fca0 	bl	8006194 <__mcmp>
 8005854:	2800      	cmp	r0, #0
 8005856:	f77f ada3 	ble.w	80053a0 <_dtoa_r+0x490>
 800585a:	4656      	mov	r6, sl
 800585c:	2331      	movs	r3, #49	@ 0x31
 800585e:	f806 3b01 	strb.w	r3, [r6], #1
 8005862:	f108 0801 	add.w	r8, r8, #1
 8005866:	e59f      	b.n	80053a8 <_dtoa_r+0x498>
 8005868:	9c03      	ldr	r4, [sp, #12]
 800586a:	46b8      	mov	r8, r7
 800586c:	4625      	mov	r5, r4
 800586e:	e7f4      	b.n	800585a <_dtoa_r+0x94a>
 8005870:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8005874:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005876:	2b00      	cmp	r3, #0
 8005878:	f000 8101 	beq.w	8005a7e <_dtoa_r+0xb6e>
 800587c:	2e00      	cmp	r6, #0
 800587e:	dd05      	ble.n	800588c <_dtoa_r+0x97c>
 8005880:	4629      	mov	r1, r5
 8005882:	4632      	mov	r2, r6
 8005884:	4648      	mov	r0, r9
 8005886:	f000 fc19 	bl	80060bc <__lshift>
 800588a:	4605      	mov	r5, r0
 800588c:	9b08      	ldr	r3, [sp, #32]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d05c      	beq.n	800594c <_dtoa_r+0xa3c>
 8005892:	6869      	ldr	r1, [r5, #4]
 8005894:	4648      	mov	r0, r9
 8005896:	f000 fa0b 	bl	8005cb0 <_Balloc>
 800589a:	4606      	mov	r6, r0
 800589c:	b928      	cbnz	r0, 80058aa <_dtoa_r+0x99a>
 800589e:	4b82      	ldr	r3, [pc, #520]	@ (8005aa8 <_dtoa_r+0xb98>)
 80058a0:	4602      	mov	r2, r0
 80058a2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80058a6:	f7ff bb4a 	b.w	8004f3e <_dtoa_r+0x2e>
 80058aa:	692a      	ldr	r2, [r5, #16]
 80058ac:	3202      	adds	r2, #2
 80058ae:	0092      	lsls	r2, r2, #2
 80058b0:	f105 010c 	add.w	r1, r5, #12
 80058b4:	300c      	adds	r0, #12
 80058b6:	f000 fe31 	bl	800651c <memcpy>
 80058ba:	2201      	movs	r2, #1
 80058bc:	4631      	mov	r1, r6
 80058be:	4648      	mov	r0, r9
 80058c0:	f000 fbfc 	bl	80060bc <__lshift>
 80058c4:	f10a 0301 	add.w	r3, sl, #1
 80058c8:	9300      	str	r3, [sp, #0]
 80058ca:	eb0a 030b 	add.w	r3, sl, fp
 80058ce:	9308      	str	r3, [sp, #32]
 80058d0:	9b04      	ldr	r3, [sp, #16]
 80058d2:	f003 0301 	and.w	r3, r3, #1
 80058d6:	462f      	mov	r7, r5
 80058d8:	9306      	str	r3, [sp, #24]
 80058da:	4605      	mov	r5, r0
 80058dc:	9b00      	ldr	r3, [sp, #0]
 80058de:	9802      	ldr	r0, [sp, #8]
 80058e0:	4621      	mov	r1, r4
 80058e2:	f103 3bff 	add.w	fp, r3, #4294967295
 80058e6:	f7ff fa88 	bl	8004dfa <quorem>
 80058ea:	4603      	mov	r3, r0
 80058ec:	3330      	adds	r3, #48	@ 0x30
 80058ee:	9003      	str	r0, [sp, #12]
 80058f0:	4639      	mov	r1, r7
 80058f2:	9802      	ldr	r0, [sp, #8]
 80058f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80058f6:	f000 fc4d 	bl	8006194 <__mcmp>
 80058fa:	462a      	mov	r2, r5
 80058fc:	9004      	str	r0, [sp, #16]
 80058fe:	4621      	mov	r1, r4
 8005900:	4648      	mov	r0, r9
 8005902:	f000 fc63 	bl	80061cc <__mdiff>
 8005906:	68c2      	ldr	r2, [r0, #12]
 8005908:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800590a:	4606      	mov	r6, r0
 800590c:	bb02      	cbnz	r2, 8005950 <_dtoa_r+0xa40>
 800590e:	4601      	mov	r1, r0
 8005910:	9802      	ldr	r0, [sp, #8]
 8005912:	f000 fc3f 	bl	8006194 <__mcmp>
 8005916:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005918:	4602      	mov	r2, r0
 800591a:	4631      	mov	r1, r6
 800591c:	4648      	mov	r0, r9
 800591e:	920c      	str	r2, [sp, #48]	@ 0x30
 8005920:	9309      	str	r3, [sp, #36]	@ 0x24
 8005922:	f000 fa05 	bl	8005d30 <_Bfree>
 8005926:	9b07      	ldr	r3, [sp, #28]
 8005928:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800592a:	9e00      	ldr	r6, [sp, #0]
 800592c:	ea42 0103 	orr.w	r1, r2, r3
 8005930:	9b06      	ldr	r3, [sp, #24]
 8005932:	4319      	orrs	r1, r3
 8005934:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005936:	d10d      	bne.n	8005954 <_dtoa_r+0xa44>
 8005938:	2b39      	cmp	r3, #57	@ 0x39
 800593a:	d027      	beq.n	800598c <_dtoa_r+0xa7c>
 800593c:	9a04      	ldr	r2, [sp, #16]
 800593e:	2a00      	cmp	r2, #0
 8005940:	dd01      	ble.n	8005946 <_dtoa_r+0xa36>
 8005942:	9b03      	ldr	r3, [sp, #12]
 8005944:	3331      	adds	r3, #49	@ 0x31
 8005946:	f88b 3000 	strb.w	r3, [fp]
 800594a:	e52e      	b.n	80053aa <_dtoa_r+0x49a>
 800594c:	4628      	mov	r0, r5
 800594e:	e7b9      	b.n	80058c4 <_dtoa_r+0x9b4>
 8005950:	2201      	movs	r2, #1
 8005952:	e7e2      	b.n	800591a <_dtoa_r+0xa0a>
 8005954:	9904      	ldr	r1, [sp, #16]
 8005956:	2900      	cmp	r1, #0
 8005958:	db04      	blt.n	8005964 <_dtoa_r+0xa54>
 800595a:	9807      	ldr	r0, [sp, #28]
 800595c:	4301      	orrs	r1, r0
 800595e:	9806      	ldr	r0, [sp, #24]
 8005960:	4301      	orrs	r1, r0
 8005962:	d120      	bne.n	80059a6 <_dtoa_r+0xa96>
 8005964:	2a00      	cmp	r2, #0
 8005966:	ddee      	ble.n	8005946 <_dtoa_r+0xa36>
 8005968:	9902      	ldr	r1, [sp, #8]
 800596a:	9300      	str	r3, [sp, #0]
 800596c:	2201      	movs	r2, #1
 800596e:	4648      	mov	r0, r9
 8005970:	f000 fba4 	bl	80060bc <__lshift>
 8005974:	4621      	mov	r1, r4
 8005976:	9002      	str	r0, [sp, #8]
 8005978:	f000 fc0c 	bl	8006194 <__mcmp>
 800597c:	2800      	cmp	r0, #0
 800597e:	9b00      	ldr	r3, [sp, #0]
 8005980:	dc02      	bgt.n	8005988 <_dtoa_r+0xa78>
 8005982:	d1e0      	bne.n	8005946 <_dtoa_r+0xa36>
 8005984:	07da      	lsls	r2, r3, #31
 8005986:	d5de      	bpl.n	8005946 <_dtoa_r+0xa36>
 8005988:	2b39      	cmp	r3, #57	@ 0x39
 800598a:	d1da      	bne.n	8005942 <_dtoa_r+0xa32>
 800598c:	2339      	movs	r3, #57	@ 0x39
 800598e:	f88b 3000 	strb.w	r3, [fp]
 8005992:	4633      	mov	r3, r6
 8005994:	461e      	mov	r6, r3
 8005996:	3b01      	subs	r3, #1
 8005998:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800599c:	2a39      	cmp	r2, #57	@ 0x39
 800599e:	d04e      	beq.n	8005a3e <_dtoa_r+0xb2e>
 80059a0:	3201      	adds	r2, #1
 80059a2:	701a      	strb	r2, [r3, #0]
 80059a4:	e501      	b.n	80053aa <_dtoa_r+0x49a>
 80059a6:	2a00      	cmp	r2, #0
 80059a8:	dd03      	ble.n	80059b2 <_dtoa_r+0xaa2>
 80059aa:	2b39      	cmp	r3, #57	@ 0x39
 80059ac:	d0ee      	beq.n	800598c <_dtoa_r+0xa7c>
 80059ae:	3301      	adds	r3, #1
 80059b0:	e7c9      	b.n	8005946 <_dtoa_r+0xa36>
 80059b2:	9a00      	ldr	r2, [sp, #0]
 80059b4:	9908      	ldr	r1, [sp, #32]
 80059b6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80059ba:	428a      	cmp	r2, r1
 80059bc:	d028      	beq.n	8005a10 <_dtoa_r+0xb00>
 80059be:	9902      	ldr	r1, [sp, #8]
 80059c0:	2300      	movs	r3, #0
 80059c2:	220a      	movs	r2, #10
 80059c4:	4648      	mov	r0, r9
 80059c6:	f000 f9d5 	bl	8005d74 <__multadd>
 80059ca:	42af      	cmp	r7, r5
 80059cc:	9002      	str	r0, [sp, #8]
 80059ce:	f04f 0300 	mov.w	r3, #0
 80059d2:	f04f 020a 	mov.w	r2, #10
 80059d6:	4639      	mov	r1, r7
 80059d8:	4648      	mov	r0, r9
 80059da:	d107      	bne.n	80059ec <_dtoa_r+0xadc>
 80059dc:	f000 f9ca 	bl	8005d74 <__multadd>
 80059e0:	4607      	mov	r7, r0
 80059e2:	4605      	mov	r5, r0
 80059e4:	9b00      	ldr	r3, [sp, #0]
 80059e6:	3301      	adds	r3, #1
 80059e8:	9300      	str	r3, [sp, #0]
 80059ea:	e777      	b.n	80058dc <_dtoa_r+0x9cc>
 80059ec:	f000 f9c2 	bl	8005d74 <__multadd>
 80059f0:	4629      	mov	r1, r5
 80059f2:	4607      	mov	r7, r0
 80059f4:	2300      	movs	r3, #0
 80059f6:	220a      	movs	r2, #10
 80059f8:	4648      	mov	r0, r9
 80059fa:	f000 f9bb 	bl	8005d74 <__multadd>
 80059fe:	4605      	mov	r5, r0
 8005a00:	e7f0      	b.n	80059e4 <_dtoa_r+0xad4>
 8005a02:	f1bb 0f00 	cmp.w	fp, #0
 8005a06:	bfcc      	ite	gt
 8005a08:	465e      	movgt	r6, fp
 8005a0a:	2601      	movle	r6, #1
 8005a0c:	4456      	add	r6, sl
 8005a0e:	2700      	movs	r7, #0
 8005a10:	9902      	ldr	r1, [sp, #8]
 8005a12:	9300      	str	r3, [sp, #0]
 8005a14:	2201      	movs	r2, #1
 8005a16:	4648      	mov	r0, r9
 8005a18:	f000 fb50 	bl	80060bc <__lshift>
 8005a1c:	4621      	mov	r1, r4
 8005a1e:	9002      	str	r0, [sp, #8]
 8005a20:	f000 fbb8 	bl	8006194 <__mcmp>
 8005a24:	2800      	cmp	r0, #0
 8005a26:	dcb4      	bgt.n	8005992 <_dtoa_r+0xa82>
 8005a28:	d102      	bne.n	8005a30 <_dtoa_r+0xb20>
 8005a2a:	9b00      	ldr	r3, [sp, #0]
 8005a2c:	07db      	lsls	r3, r3, #31
 8005a2e:	d4b0      	bmi.n	8005992 <_dtoa_r+0xa82>
 8005a30:	4633      	mov	r3, r6
 8005a32:	461e      	mov	r6, r3
 8005a34:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005a38:	2a30      	cmp	r2, #48	@ 0x30
 8005a3a:	d0fa      	beq.n	8005a32 <_dtoa_r+0xb22>
 8005a3c:	e4b5      	b.n	80053aa <_dtoa_r+0x49a>
 8005a3e:	459a      	cmp	sl, r3
 8005a40:	d1a8      	bne.n	8005994 <_dtoa_r+0xa84>
 8005a42:	2331      	movs	r3, #49	@ 0x31
 8005a44:	f108 0801 	add.w	r8, r8, #1
 8005a48:	f88a 3000 	strb.w	r3, [sl]
 8005a4c:	e4ad      	b.n	80053aa <_dtoa_r+0x49a>
 8005a4e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005a50:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8005aac <_dtoa_r+0xb9c>
 8005a54:	b11b      	cbz	r3, 8005a5e <_dtoa_r+0xb4e>
 8005a56:	f10a 0308 	add.w	r3, sl, #8
 8005a5a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8005a5c:	6013      	str	r3, [r2, #0]
 8005a5e:	4650      	mov	r0, sl
 8005a60:	b017      	add	sp, #92	@ 0x5c
 8005a62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a66:	9b07      	ldr	r3, [sp, #28]
 8005a68:	2b01      	cmp	r3, #1
 8005a6a:	f77f ae2e 	ble.w	80056ca <_dtoa_r+0x7ba>
 8005a6e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005a70:	9308      	str	r3, [sp, #32]
 8005a72:	2001      	movs	r0, #1
 8005a74:	e64d      	b.n	8005712 <_dtoa_r+0x802>
 8005a76:	f1bb 0f00 	cmp.w	fp, #0
 8005a7a:	f77f aed9 	ble.w	8005830 <_dtoa_r+0x920>
 8005a7e:	4656      	mov	r6, sl
 8005a80:	9802      	ldr	r0, [sp, #8]
 8005a82:	4621      	mov	r1, r4
 8005a84:	f7ff f9b9 	bl	8004dfa <quorem>
 8005a88:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8005a8c:	f806 3b01 	strb.w	r3, [r6], #1
 8005a90:	eba6 020a 	sub.w	r2, r6, sl
 8005a94:	4593      	cmp	fp, r2
 8005a96:	ddb4      	ble.n	8005a02 <_dtoa_r+0xaf2>
 8005a98:	9902      	ldr	r1, [sp, #8]
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	220a      	movs	r2, #10
 8005a9e:	4648      	mov	r0, r9
 8005aa0:	f000 f968 	bl	8005d74 <__multadd>
 8005aa4:	9002      	str	r0, [sp, #8]
 8005aa6:	e7eb      	b.n	8005a80 <_dtoa_r+0xb70>
 8005aa8:	08006c50 	.word	0x08006c50
 8005aac:	08006bd4 	.word	0x08006bd4

08005ab0 <_free_r>:
 8005ab0:	b538      	push	{r3, r4, r5, lr}
 8005ab2:	4605      	mov	r5, r0
 8005ab4:	2900      	cmp	r1, #0
 8005ab6:	d041      	beq.n	8005b3c <_free_r+0x8c>
 8005ab8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005abc:	1f0c      	subs	r4, r1, #4
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	bfb8      	it	lt
 8005ac2:	18e4      	addlt	r4, r4, r3
 8005ac4:	f000 f8e8 	bl	8005c98 <__malloc_lock>
 8005ac8:	4a1d      	ldr	r2, [pc, #116]	@ (8005b40 <_free_r+0x90>)
 8005aca:	6813      	ldr	r3, [r2, #0]
 8005acc:	b933      	cbnz	r3, 8005adc <_free_r+0x2c>
 8005ace:	6063      	str	r3, [r4, #4]
 8005ad0:	6014      	str	r4, [r2, #0]
 8005ad2:	4628      	mov	r0, r5
 8005ad4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005ad8:	f000 b8e4 	b.w	8005ca4 <__malloc_unlock>
 8005adc:	42a3      	cmp	r3, r4
 8005ade:	d908      	bls.n	8005af2 <_free_r+0x42>
 8005ae0:	6820      	ldr	r0, [r4, #0]
 8005ae2:	1821      	adds	r1, r4, r0
 8005ae4:	428b      	cmp	r3, r1
 8005ae6:	bf01      	itttt	eq
 8005ae8:	6819      	ldreq	r1, [r3, #0]
 8005aea:	685b      	ldreq	r3, [r3, #4]
 8005aec:	1809      	addeq	r1, r1, r0
 8005aee:	6021      	streq	r1, [r4, #0]
 8005af0:	e7ed      	b.n	8005ace <_free_r+0x1e>
 8005af2:	461a      	mov	r2, r3
 8005af4:	685b      	ldr	r3, [r3, #4]
 8005af6:	b10b      	cbz	r3, 8005afc <_free_r+0x4c>
 8005af8:	42a3      	cmp	r3, r4
 8005afa:	d9fa      	bls.n	8005af2 <_free_r+0x42>
 8005afc:	6811      	ldr	r1, [r2, #0]
 8005afe:	1850      	adds	r0, r2, r1
 8005b00:	42a0      	cmp	r0, r4
 8005b02:	d10b      	bne.n	8005b1c <_free_r+0x6c>
 8005b04:	6820      	ldr	r0, [r4, #0]
 8005b06:	4401      	add	r1, r0
 8005b08:	1850      	adds	r0, r2, r1
 8005b0a:	4283      	cmp	r3, r0
 8005b0c:	6011      	str	r1, [r2, #0]
 8005b0e:	d1e0      	bne.n	8005ad2 <_free_r+0x22>
 8005b10:	6818      	ldr	r0, [r3, #0]
 8005b12:	685b      	ldr	r3, [r3, #4]
 8005b14:	6053      	str	r3, [r2, #4]
 8005b16:	4408      	add	r0, r1
 8005b18:	6010      	str	r0, [r2, #0]
 8005b1a:	e7da      	b.n	8005ad2 <_free_r+0x22>
 8005b1c:	d902      	bls.n	8005b24 <_free_r+0x74>
 8005b1e:	230c      	movs	r3, #12
 8005b20:	602b      	str	r3, [r5, #0]
 8005b22:	e7d6      	b.n	8005ad2 <_free_r+0x22>
 8005b24:	6820      	ldr	r0, [r4, #0]
 8005b26:	1821      	adds	r1, r4, r0
 8005b28:	428b      	cmp	r3, r1
 8005b2a:	bf04      	itt	eq
 8005b2c:	6819      	ldreq	r1, [r3, #0]
 8005b2e:	685b      	ldreq	r3, [r3, #4]
 8005b30:	6063      	str	r3, [r4, #4]
 8005b32:	bf04      	itt	eq
 8005b34:	1809      	addeq	r1, r1, r0
 8005b36:	6021      	streq	r1, [r4, #0]
 8005b38:	6054      	str	r4, [r2, #4]
 8005b3a:	e7ca      	b.n	8005ad2 <_free_r+0x22>
 8005b3c:	bd38      	pop	{r3, r4, r5, pc}
 8005b3e:	bf00      	nop
 8005b40:	20000490 	.word	0x20000490

08005b44 <malloc>:
 8005b44:	4b02      	ldr	r3, [pc, #8]	@ (8005b50 <malloc+0xc>)
 8005b46:	4601      	mov	r1, r0
 8005b48:	6818      	ldr	r0, [r3, #0]
 8005b4a:	f000 b825 	b.w	8005b98 <_malloc_r>
 8005b4e:	bf00      	nop
 8005b50:	20000010 	.word	0x20000010

08005b54 <sbrk_aligned>:
 8005b54:	b570      	push	{r4, r5, r6, lr}
 8005b56:	4e0f      	ldr	r6, [pc, #60]	@ (8005b94 <sbrk_aligned+0x40>)
 8005b58:	460c      	mov	r4, r1
 8005b5a:	6831      	ldr	r1, [r6, #0]
 8005b5c:	4605      	mov	r5, r0
 8005b5e:	b911      	cbnz	r1, 8005b66 <sbrk_aligned+0x12>
 8005b60:	f000 fccc 	bl	80064fc <_sbrk_r>
 8005b64:	6030      	str	r0, [r6, #0]
 8005b66:	4621      	mov	r1, r4
 8005b68:	4628      	mov	r0, r5
 8005b6a:	f000 fcc7 	bl	80064fc <_sbrk_r>
 8005b6e:	1c43      	adds	r3, r0, #1
 8005b70:	d103      	bne.n	8005b7a <sbrk_aligned+0x26>
 8005b72:	f04f 34ff 	mov.w	r4, #4294967295
 8005b76:	4620      	mov	r0, r4
 8005b78:	bd70      	pop	{r4, r5, r6, pc}
 8005b7a:	1cc4      	adds	r4, r0, #3
 8005b7c:	f024 0403 	bic.w	r4, r4, #3
 8005b80:	42a0      	cmp	r0, r4
 8005b82:	d0f8      	beq.n	8005b76 <sbrk_aligned+0x22>
 8005b84:	1a21      	subs	r1, r4, r0
 8005b86:	4628      	mov	r0, r5
 8005b88:	f000 fcb8 	bl	80064fc <_sbrk_r>
 8005b8c:	3001      	adds	r0, #1
 8005b8e:	d1f2      	bne.n	8005b76 <sbrk_aligned+0x22>
 8005b90:	e7ef      	b.n	8005b72 <sbrk_aligned+0x1e>
 8005b92:	bf00      	nop
 8005b94:	2000048c 	.word	0x2000048c

08005b98 <_malloc_r>:
 8005b98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b9c:	1ccd      	adds	r5, r1, #3
 8005b9e:	f025 0503 	bic.w	r5, r5, #3
 8005ba2:	3508      	adds	r5, #8
 8005ba4:	2d0c      	cmp	r5, #12
 8005ba6:	bf38      	it	cc
 8005ba8:	250c      	movcc	r5, #12
 8005baa:	2d00      	cmp	r5, #0
 8005bac:	4606      	mov	r6, r0
 8005bae:	db01      	blt.n	8005bb4 <_malloc_r+0x1c>
 8005bb0:	42a9      	cmp	r1, r5
 8005bb2:	d904      	bls.n	8005bbe <_malloc_r+0x26>
 8005bb4:	230c      	movs	r3, #12
 8005bb6:	6033      	str	r3, [r6, #0]
 8005bb8:	2000      	movs	r0, #0
 8005bba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005bbe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005c94 <_malloc_r+0xfc>
 8005bc2:	f000 f869 	bl	8005c98 <__malloc_lock>
 8005bc6:	f8d8 3000 	ldr.w	r3, [r8]
 8005bca:	461c      	mov	r4, r3
 8005bcc:	bb44      	cbnz	r4, 8005c20 <_malloc_r+0x88>
 8005bce:	4629      	mov	r1, r5
 8005bd0:	4630      	mov	r0, r6
 8005bd2:	f7ff ffbf 	bl	8005b54 <sbrk_aligned>
 8005bd6:	1c43      	adds	r3, r0, #1
 8005bd8:	4604      	mov	r4, r0
 8005bda:	d158      	bne.n	8005c8e <_malloc_r+0xf6>
 8005bdc:	f8d8 4000 	ldr.w	r4, [r8]
 8005be0:	4627      	mov	r7, r4
 8005be2:	2f00      	cmp	r7, #0
 8005be4:	d143      	bne.n	8005c6e <_malloc_r+0xd6>
 8005be6:	2c00      	cmp	r4, #0
 8005be8:	d04b      	beq.n	8005c82 <_malloc_r+0xea>
 8005bea:	6823      	ldr	r3, [r4, #0]
 8005bec:	4639      	mov	r1, r7
 8005bee:	4630      	mov	r0, r6
 8005bf0:	eb04 0903 	add.w	r9, r4, r3
 8005bf4:	f000 fc82 	bl	80064fc <_sbrk_r>
 8005bf8:	4581      	cmp	r9, r0
 8005bfa:	d142      	bne.n	8005c82 <_malloc_r+0xea>
 8005bfc:	6821      	ldr	r1, [r4, #0]
 8005bfe:	1a6d      	subs	r5, r5, r1
 8005c00:	4629      	mov	r1, r5
 8005c02:	4630      	mov	r0, r6
 8005c04:	f7ff ffa6 	bl	8005b54 <sbrk_aligned>
 8005c08:	3001      	adds	r0, #1
 8005c0a:	d03a      	beq.n	8005c82 <_malloc_r+0xea>
 8005c0c:	6823      	ldr	r3, [r4, #0]
 8005c0e:	442b      	add	r3, r5
 8005c10:	6023      	str	r3, [r4, #0]
 8005c12:	f8d8 3000 	ldr.w	r3, [r8]
 8005c16:	685a      	ldr	r2, [r3, #4]
 8005c18:	bb62      	cbnz	r2, 8005c74 <_malloc_r+0xdc>
 8005c1a:	f8c8 7000 	str.w	r7, [r8]
 8005c1e:	e00f      	b.n	8005c40 <_malloc_r+0xa8>
 8005c20:	6822      	ldr	r2, [r4, #0]
 8005c22:	1b52      	subs	r2, r2, r5
 8005c24:	d420      	bmi.n	8005c68 <_malloc_r+0xd0>
 8005c26:	2a0b      	cmp	r2, #11
 8005c28:	d917      	bls.n	8005c5a <_malloc_r+0xc2>
 8005c2a:	1961      	adds	r1, r4, r5
 8005c2c:	42a3      	cmp	r3, r4
 8005c2e:	6025      	str	r5, [r4, #0]
 8005c30:	bf18      	it	ne
 8005c32:	6059      	strne	r1, [r3, #4]
 8005c34:	6863      	ldr	r3, [r4, #4]
 8005c36:	bf08      	it	eq
 8005c38:	f8c8 1000 	streq.w	r1, [r8]
 8005c3c:	5162      	str	r2, [r4, r5]
 8005c3e:	604b      	str	r3, [r1, #4]
 8005c40:	4630      	mov	r0, r6
 8005c42:	f000 f82f 	bl	8005ca4 <__malloc_unlock>
 8005c46:	f104 000b 	add.w	r0, r4, #11
 8005c4a:	1d23      	adds	r3, r4, #4
 8005c4c:	f020 0007 	bic.w	r0, r0, #7
 8005c50:	1ac2      	subs	r2, r0, r3
 8005c52:	bf1c      	itt	ne
 8005c54:	1a1b      	subne	r3, r3, r0
 8005c56:	50a3      	strne	r3, [r4, r2]
 8005c58:	e7af      	b.n	8005bba <_malloc_r+0x22>
 8005c5a:	6862      	ldr	r2, [r4, #4]
 8005c5c:	42a3      	cmp	r3, r4
 8005c5e:	bf0c      	ite	eq
 8005c60:	f8c8 2000 	streq.w	r2, [r8]
 8005c64:	605a      	strne	r2, [r3, #4]
 8005c66:	e7eb      	b.n	8005c40 <_malloc_r+0xa8>
 8005c68:	4623      	mov	r3, r4
 8005c6a:	6864      	ldr	r4, [r4, #4]
 8005c6c:	e7ae      	b.n	8005bcc <_malloc_r+0x34>
 8005c6e:	463c      	mov	r4, r7
 8005c70:	687f      	ldr	r7, [r7, #4]
 8005c72:	e7b6      	b.n	8005be2 <_malloc_r+0x4a>
 8005c74:	461a      	mov	r2, r3
 8005c76:	685b      	ldr	r3, [r3, #4]
 8005c78:	42a3      	cmp	r3, r4
 8005c7a:	d1fb      	bne.n	8005c74 <_malloc_r+0xdc>
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	6053      	str	r3, [r2, #4]
 8005c80:	e7de      	b.n	8005c40 <_malloc_r+0xa8>
 8005c82:	230c      	movs	r3, #12
 8005c84:	6033      	str	r3, [r6, #0]
 8005c86:	4630      	mov	r0, r6
 8005c88:	f000 f80c 	bl	8005ca4 <__malloc_unlock>
 8005c8c:	e794      	b.n	8005bb8 <_malloc_r+0x20>
 8005c8e:	6005      	str	r5, [r0, #0]
 8005c90:	e7d6      	b.n	8005c40 <_malloc_r+0xa8>
 8005c92:	bf00      	nop
 8005c94:	20000490 	.word	0x20000490

08005c98 <__malloc_lock>:
 8005c98:	4801      	ldr	r0, [pc, #4]	@ (8005ca0 <__malloc_lock+0x8>)
 8005c9a:	f7ff b8ac 	b.w	8004df6 <__retarget_lock_acquire_recursive>
 8005c9e:	bf00      	nop
 8005ca0:	20000488 	.word	0x20000488

08005ca4 <__malloc_unlock>:
 8005ca4:	4801      	ldr	r0, [pc, #4]	@ (8005cac <__malloc_unlock+0x8>)
 8005ca6:	f7ff b8a7 	b.w	8004df8 <__retarget_lock_release_recursive>
 8005caa:	bf00      	nop
 8005cac:	20000488 	.word	0x20000488

08005cb0 <_Balloc>:
 8005cb0:	b570      	push	{r4, r5, r6, lr}
 8005cb2:	69c6      	ldr	r6, [r0, #28]
 8005cb4:	4604      	mov	r4, r0
 8005cb6:	460d      	mov	r5, r1
 8005cb8:	b976      	cbnz	r6, 8005cd8 <_Balloc+0x28>
 8005cba:	2010      	movs	r0, #16
 8005cbc:	f7ff ff42 	bl	8005b44 <malloc>
 8005cc0:	4602      	mov	r2, r0
 8005cc2:	61e0      	str	r0, [r4, #28]
 8005cc4:	b920      	cbnz	r0, 8005cd0 <_Balloc+0x20>
 8005cc6:	4b18      	ldr	r3, [pc, #96]	@ (8005d28 <_Balloc+0x78>)
 8005cc8:	4818      	ldr	r0, [pc, #96]	@ (8005d2c <_Balloc+0x7c>)
 8005cca:	216b      	movs	r1, #107	@ 0x6b
 8005ccc:	f000 fc34 	bl	8006538 <__assert_func>
 8005cd0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005cd4:	6006      	str	r6, [r0, #0]
 8005cd6:	60c6      	str	r6, [r0, #12]
 8005cd8:	69e6      	ldr	r6, [r4, #28]
 8005cda:	68f3      	ldr	r3, [r6, #12]
 8005cdc:	b183      	cbz	r3, 8005d00 <_Balloc+0x50>
 8005cde:	69e3      	ldr	r3, [r4, #28]
 8005ce0:	68db      	ldr	r3, [r3, #12]
 8005ce2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005ce6:	b9b8      	cbnz	r0, 8005d18 <_Balloc+0x68>
 8005ce8:	2101      	movs	r1, #1
 8005cea:	fa01 f605 	lsl.w	r6, r1, r5
 8005cee:	1d72      	adds	r2, r6, #5
 8005cf0:	0092      	lsls	r2, r2, #2
 8005cf2:	4620      	mov	r0, r4
 8005cf4:	f000 fc3e 	bl	8006574 <_calloc_r>
 8005cf8:	b160      	cbz	r0, 8005d14 <_Balloc+0x64>
 8005cfa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005cfe:	e00e      	b.n	8005d1e <_Balloc+0x6e>
 8005d00:	2221      	movs	r2, #33	@ 0x21
 8005d02:	2104      	movs	r1, #4
 8005d04:	4620      	mov	r0, r4
 8005d06:	f000 fc35 	bl	8006574 <_calloc_r>
 8005d0a:	69e3      	ldr	r3, [r4, #28]
 8005d0c:	60f0      	str	r0, [r6, #12]
 8005d0e:	68db      	ldr	r3, [r3, #12]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d1e4      	bne.n	8005cde <_Balloc+0x2e>
 8005d14:	2000      	movs	r0, #0
 8005d16:	bd70      	pop	{r4, r5, r6, pc}
 8005d18:	6802      	ldr	r2, [r0, #0]
 8005d1a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005d1e:	2300      	movs	r3, #0
 8005d20:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005d24:	e7f7      	b.n	8005d16 <_Balloc+0x66>
 8005d26:	bf00      	nop
 8005d28:	08006be1 	.word	0x08006be1
 8005d2c:	08006c61 	.word	0x08006c61

08005d30 <_Bfree>:
 8005d30:	b570      	push	{r4, r5, r6, lr}
 8005d32:	69c6      	ldr	r6, [r0, #28]
 8005d34:	4605      	mov	r5, r0
 8005d36:	460c      	mov	r4, r1
 8005d38:	b976      	cbnz	r6, 8005d58 <_Bfree+0x28>
 8005d3a:	2010      	movs	r0, #16
 8005d3c:	f7ff ff02 	bl	8005b44 <malloc>
 8005d40:	4602      	mov	r2, r0
 8005d42:	61e8      	str	r0, [r5, #28]
 8005d44:	b920      	cbnz	r0, 8005d50 <_Bfree+0x20>
 8005d46:	4b09      	ldr	r3, [pc, #36]	@ (8005d6c <_Bfree+0x3c>)
 8005d48:	4809      	ldr	r0, [pc, #36]	@ (8005d70 <_Bfree+0x40>)
 8005d4a:	218f      	movs	r1, #143	@ 0x8f
 8005d4c:	f000 fbf4 	bl	8006538 <__assert_func>
 8005d50:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005d54:	6006      	str	r6, [r0, #0]
 8005d56:	60c6      	str	r6, [r0, #12]
 8005d58:	b13c      	cbz	r4, 8005d6a <_Bfree+0x3a>
 8005d5a:	69eb      	ldr	r3, [r5, #28]
 8005d5c:	6862      	ldr	r2, [r4, #4]
 8005d5e:	68db      	ldr	r3, [r3, #12]
 8005d60:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005d64:	6021      	str	r1, [r4, #0]
 8005d66:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005d6a:	bd70      	pop	{r4, r5, r6, pc}
 8005d6c:	08006be1 	.word	0x08006be1
 8005d70:	08006c61 	.word	0x08006c61

08005d74 <__multadd>:
 8005d74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d78:	690d      	ldr	r5, [r1, #16]
 8005d7a:	4607      	mov	r7, r0
 8005d7c:	460c      	mov	r4, r1
 8005d7e:	461e      	mov	r6, r3
 8005d80:	f101 0c14 	add.w	ip, r1, #20
 8005d84:	2000      	movs	r0, #0
 8005d86:	f8dc 3000 	ldr.w	r3, [ip]
 8005d8a:	b299      	uxth	r1, r3
 8005d8c:	fb02 6101 	mla	r1, r2, r1, r6
 8005d90:	0c1e      	lsrs	r6, r3, #16
 8005d92:	0c0b      	lsrs	r3, r1, #16
 8005d94:	fb02 3306 	mla	r3, r2, r6, r3
 8005d98:	b289      	uxth	r1, r1
 8005d9a:	3001      	adds	r0, #1
 8005d9c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005da0:	4285      	cmp	r5, r0
 8005da2:	f84c 1b04 	str.w	r1, [ip], #4
 8005da6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005daa:	dcec      	bgt.n	8005d86 <__multadd+0x12>
 8005dac:	b30e      	cbz	r6, 8005df2 <__multadd+0x7e>
 8005dae:	68a3      	ldr	r3, [r4, #8]
 8005db0:	42ab      	cmp	r3, r5
 8005db2:	dc19      	bgt.n	8005de8 <__multadd+0x74>
 8005db4:	6861      	ldr	r1, [r4, #4]
 8005db6:	4638      	mov	r0, r7
 8005db8:	3101      	adds	r1, #1
 8005dba:	f7ff ff79 	bl	8005cb0 <_Balloc>
 8005dbe:	4680      	mov	r8, r0
 8005dc0:	b928      	cbnz	r0, 8005dce <__multadd+0x5a>
 8005dc2:	4602      	mov	r2, r0
 8005dc4:	4b0c      	ldr	r3, [pc, #48]	@ (8005df8 <__multadd+0x84>)
 8005dc6:	480d      	ldr	r0, [pc, #52]	@ (8005dfc <__multadd+0x88>)
 8005dc8:	21ba      	movs	r1, #186	@ 0xba
 8005dca:	f000 fbb5 	bl	8006538 <__assert_func>
 8005dce:	6922      	ldr	r2, [r4, #16]
 8005dd0:	3202      	adds	r2, #2
 8005dd2:	f104 010c 	add.w	r1, r4, #12
 8005dd6:	0092      	lsls	r2, r2, #2
 8005dd8:	300c      	adds	r0, #12
 8005dda:	f000 fb9f 	bl	800651c <memcpy>
 8005dde:	4621      	mov	r1, r4
 8005de0:	4638      	mov	r0, r7
 8005de2:	f7ff ffa5 	bl	8005d30 <_Bfree>
 8005de6:	4644      	mov	r4, r8
 8005de8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005dec:	3501      	adds	r5, #1
 8005dee:	615e      	str	r6, [r3, #20]
 8005df0:	6125      	str	r5, [r4, #16]
 8005df2:	4620      	mov	r0, r4
 8005df4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005df8:	08006c50 	.word	0x08006c50
 8005dfc:	08006c61 	.word	0x08006c61

08005e00 <__hi0bits>:
 8005e00:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8005e04:	4603      	mov	r3, r0
 8005e06:	bf36      	itet	cc
 8005e08:	0403      	lslcc	r3, r0, #16
 8005e0a:	2000      	movcs	r0, #0
 8005e0c:	2010      	movcc	r0, #16
 8005e0e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005e12:	bf3c      	itt	cc
 8005e14:	021b      	lslcc	r3, r3, #8
 8005e16:	3008      	addcc	r0, #8
 8005e18:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005e1c:	bf3c      	itt	cc
 8005e1e:	011b      	lslcc	r3, r3, #4
 8005e20:	3004      	addcc	r0, #4
 8005e22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e26:	bf3c      	itt	cc
 8005e28:	009b      	lslcc	r3, r3, #2
 8005e2a:	3002      	addcc	r0, #2
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	db05      	blt.n	8005e3c <__hi0bits+0x3c>
 8005e30:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8005e34:	f100 0001 	add.w	r0, r0, #1
 8005e38:	bf08      	it	eq
 8005e3a:	2020      	moveq	r0, #32
 8005e3c:	4770      	bx	lr

08005e3e <__lo0bits>:
 8005e3e:	6803      	ldr	r3, [r0, #0]
 8005e40:	4602      	mov	r2, r0
 8005e42:	f013 0007 	ands.w	r0, r3, #7
 8005e46:	d00b      	beq.n	8005e60 <__lo0bits+0x22>
 8005e48:	07d9      	lsls	r1, r3, #31
 8005e4a:	d421      	bmi.n	8005e90 <__lo0bits+0x52>
 8005e4c:	0798      	lsls	r0, r3, #30
 8005e4e:	bf49      	itett	mi
 8005e50:	085b      	lsrmi	r3, r3, #1
 8005e52:	089b      	lsrpl	r3, r3, #2
 8005e54:	2001      	movmi	r0, #1
 8005e56:	6013      	strmi	r3, [r2, #0]
 8005e58:	bf5c      	itt	pl
 8005e5a:	6013      	strpl	r3, [r2, #0]
 8005e5c:	2002      	movpl	r0, #2
 8005e5e:	4770      	bx	lr
 8005e60:	b299      	uxth	r1, r3
 8005e62:	b909      	cbnz	r1, 8005e68 <__lo0bits+0x2a>
 8005e64:	0c1b      	lsrs	r3, r3, #16
 8005e66:	2010      	movs	r0, #16
 8005e68:	b2d9      	uxtb	r1, r3
 8005e6a:	b909      	cbnz	r1, 8005e70 <__lo0bits+0x32>
 8005e6c:	3008      	adds	r0, #8
 8005e6e:	0a1b      	lsrs	r3, r3, #8
 8005e70:	0719      	lsls	r1, r3, #28
 8005e72:	bf04      	itt	eq
 8005e74:	091b      	lsreq	r3, r3, #4
 8005e76:	3004      	addeq	r0, #4
 8005e78:	0799      	lsls	r1, r3, #30
 8005e7a:	bf04      	itt	eq
 8005e7c:	089b      	lsreq	r3, r3, #2
 8005e7e:	3002      	addeq	r0, #2
 8005e80:	07d9      	lsls	r1, r3, #31
 8005e82:	d403      	bmi.n	8005e8c <__lo0bits+0x4e>
 8005e84:	085b      	lsrs	r3, r3, #1
 8005e86:	f100 0001 	add.w	r0, r0, #1
 8005e8a:	d003      	beq.n	8005e94 <__lo0bits+0x56>
 8005e8c:	6013      	str	r3, [r2, #0]
 8005e8e:	4770      	bx	lr
 8005e90:	2000      	movs	r0, #0
 8005e92:	4770      	bx	lr
 8005e94:	2020      	movs	r0, #32
 8005e96:	4770      	bx	lr

08005e98 <__i2b>:
 8005e98:	b510      	push	{r4, lr}
 8005e9a:	460c      	mov	r4, r1
 8005e9c:	2101      	movs	r1, #1
 8005e9e:	f7ff ff07 	bl	8005cb0 <_Balloc>
 8005ea2:	4602      	mov	r2, r0
 8005ea4:	b928      	cbnz	r0, 8005eb2 <__i2b+0x1a>
 8005ea6:	4b05      	ldr	r3, [pc, #20]	@ (8005ebc <__i2b+0x24>)
 8005ea8:	4805      	ldr	r0, [pc, #20]	@ (8005ec0 <__i2b+0x28>)
 8005eaa:	f240 1145 	movw	r1, #325	@ 0x145
 8005eae:	f000 fb43 	bl	8006538 <__assert_func>
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	6144      	str	r4, [r0, #20]
 8005eb6:	6103      	str	r3, [r0, #16]
 8005eb8:	bd10      	pop	{r4, pc}
 8005eba:	bf00      	nop
 8005ebc:	08006c50 	.word	0x08006c50
 8005ec0:	08006c61 	.word	0x08006c61

08005ec4 <__multiply>:
 8005ec4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ec8:	4617      	mov	r7, r2
 8005eca:	690a      	ldr	r2, [r1, #16]
 8005ecc:	693b      	ldr	r3, [r7, #16]
 8005ece:	429a      	cmp	r2, r3
 8005ed0:	bfa8      	it	ge
 8005ed2:	463b      	movge	r3, r7
 8005ed4:	4689      	mov	r9, r1
 8005ed6:	bfa4      	itt	ge
 8005ed8:	460f      	movge	r7, r1
 8005eda:	4699      	movge	r9, r3
 8005edc:	693d      	ldr	r5, [r7, #16]
 8005ede:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005ee2:	68bb      	ldr	r3, [r7, #8]
 8005ee4:	6879      	ldr	r1, [r7, #4]
 8005ee6:	eb05 060a 	add.w	r6, r5, sl
 8005eea:	42b3      	cmp	r3, r6
 8005eec:	b085      	sub	sp, #20
 8005eee:	bfb8      	it	lt
 8005ef0:	3101      	addlt	r1, #1
 8005ef2:	f7ff fedd 	bl	8005cb0 <_Balloc>
 8005ef6:	b930      	cbnz	r0, 8005f06 <__multiply+0x42>
 8005ef8:	4602      	mov	r2, r0
 8005efa:	4b41      	ldr	r3, [pc, #260]	@ (8006000 <__multiply+0x13c>)
 8005efc:	4841      	ldr	r0, [pc, #260]	@ (8006004 <__multiply+0x140>)
 8005efe:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8005f02:	f000 fb19 	bl	8006538 <__assert_func>
 8005f06:	f100 0414 	add.w	r4, r0, #20
 8005f0a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8005f0e:	4623      	mov	r3, r4
 8005f10:	2200      	movs	r2, #0
 8005f12:	4573      	cmp	r3, lr
 8005f14:	d320      	bcc.n	8005f58 <__multiply+0x94>
 8005f16:	f107 0814 	add.w	r8, r7, #20
 8005f1a:	f109 0114 	add.w	r1, r9, #20
 8005f1e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8005f22:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8005f26:	9302      	str	r3, [sp, #8]
 8005f28:	1beb      	subs	r3, r5, r7
 8005f2a:	3b15      	subs	r3, #21
 8005f2c:	f023 0303 	bic.w	r3, r3, #3
 8005f30:	3304      	adds	r3, #4
 8005f32:	3715      	adds	r7, #21
 8005f34:	42bd      	cmp	r5, r7
 8005f36:	bf38      	it	cc
 8005f38:	2304      	movcc	r3, #4
 8005f3a:	9301      	str	r3, [sp, #4]
 8005f3c:	9b02      	ldr	r3, [sp, #8]
 8005f3e:	9103      	str	r1, [sp, #12]
 8005f40:	428b      	cmp	r3, r1
 8005f42:	d80c      	bhi.n	8005f5e <__multiply+0x9a>
 8005f44:	2e00      	cmp	r6, #0
 8005f46:	dd03      	ble.n	8005f50 <__multiply+0x8c>
 8005f48:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d055      	beq.n	8005ffc <__multiply+0x138>
 8005f50:	6106      	str	r6, [r0, #16]
 8005f52:	b005      	add	sp, #20
 8005f54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f58:	f843 2b04 	str.w	r2, [r3], #4
 8005f5c:	e7d9      	b.n	8005f12 <__multiply+0x4e>
 8005f5e:	f8b1 a000 	ldrh.w	sl, [r1]
 8005f62:	f1ba 0f00 	cmp.w	sl, #0
 8005f66:	d01f      	beq.n	8005fa8 <__multiply+0xe4>
 8005f68:	46c4      	mov	ip, r8
 8005f6a:	46a1      	mov	r9, r4
 8005f6c:	2700      	movs	r7, #0
 8005f6e:	f85c 2b04 	ldr.w	r2, [ip], #4
 8005f72:	f8d9 3000 	ldr.w	r3, [r9]
 8005f76:	fa1f fb82 	uxth.w	fp, r2
 8005f7a:	b29b      	uxth	r3, r3
 8005f7c:	fb0a 330b 	mla	r3, sl, fp, r3
 8005f80:	443b      	add	r3, r7
 8005f82:	f8d9 7000 	ldr.w	r7, [r9]
 8005f86:	0c12      	lsrs	r2, r2, #16
 8005f88:	0c3f      	lsrs	r7, r7, #16
 8005f8a:	fb0a 7202 	mla	r2, sl, r2, r7
 8005f8e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8005f92:	b29b      	uxth	r3, r3
 8005f94:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005f98:	4565      	cmp	r5, ip
 8005f9a:	f849 3b04 	str.w	r3, [r9], #4
 8005f9e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8005fa2:	d8e4      	bhi.n	8005f6e <__multiply+0xaa>
 8005fa4:	9b01      	ldr	r3, [sp, #4]
 8005fa6:	50e7      	str	r7, [r4, r3]
 8005fa8:	9b03      	ldr	r3, [sp, #12]
 8005faa:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8005fae:	3104      	adds	r1, #4
 8005fb0:	f1b9 0f00 	cmp.w	r9, #0
 8005fb4:	d020      	beq.n	8005ff8 <__multiply+0x134>
 8005fb6:	6823      	ldr	r3, [r4, #0]
 8005fb8:	4647      	mov	r7, r8
 8005fba:	46a4      	mov	ip, r4
 8005fbc:	f04f 0a00 	mov.w	sl, #0
 8005fc0:	f8b7 b000 	ldrh.w	fp, [r7]
 8005fc4:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8005fc8:	fb09 220b 	mla	r2, r9, fp, r2
 8005fcc:	4452      	add	r2, sl
 8005fce:	b29b      	uxth	r3, r3
 8005fd0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005fd4:	f84c 3b04 	str.w	r3, [ip], #4
 8005fd8:	f857 3b04 	ldr.w	r3, [r7], #4
 8005fdc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005fe0:	f8bc 3000 	ldrh.w	r3, [ip]
 8005fe4:	fb09 330a 	mla	r3, r9, sl, r3
 8005fe8:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8005fec:	42bd      	cmp	r5, r7
 8005fee:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005ff2:	d8e5      	bhi.n	8005fc0 <__multiply+0xfc>
 8005ff4:	9a01      	ldr	r2, [sp, #4]
 8005ff6:	50a3      	str	r3, [r4, r2]
 8005ff8:	3404      	adds	r4, #4
 8005ffa:	e79f      	b.n	8005f3c <__multiply+0x78>
 8005ffc:	3e01      	subs	r6, #1
 8005ffe:	e7a1      	b.n	8005f44 <__multiply+0x80>
 8006000:	08006c50 	.word	0x08006c50
 8006004:	08006c61 	.word	0x08006c61

08006008 <__pow5mult>:
 8006008:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800600c:	4615      	mov	r5, r2
 800600e:	f012 0203 	ands.w	r2, r2, #3
 8006012:	4607      	mov	r7, r0
 8006014:	460e      	mov	r6, r1
 8006016:	d007      	beq.n	8006028 <__pow5mult+0x20>
 8006018:	4c25      	ldr	r4, [pc, #148]	@ (80060b0 <__pow5mult+0xa8>)
 800601a:	3a01      	subs	r2, #1
 800601c:	2300      	movs	r3, #0
 800601e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006022:	f7ff fea7 	bl	8005d74 <__multadd>
 8006026:	4606      	mov	r6, r0
 8006028:	10ad      	asrs	r5, r5, #2
 800602a:	d03d      	beq.n	80060a8 <__pow5mult+0xa0>
 800602c:	69fc      	ldr	r4, [r7, #28]
 800602e:	b97c      	cbnz	r4, 8006050 <__pow5mult+0x48>
 8006030:	2010      	movs	r0, #16
 8006032:	f7ff fd87 	bl	8005b44 <malloc>
 8006036:	4602      	mov	r2, r0
 8006038:	61f8      	str	r0, [r7, #28]
 800603a:	b928      	cbnz	r0, 8006048 <__pow5mult+0x40>
 800603c:	4b1d      	ldr	r3, [pc, #116]	@ (80060b4 <__pow5mult+0xac>)
 800603e:	481e      	ldr	r0, [pc, #120]	@ (80060b8 <__pow5mult+0xb0>)
 8006040:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006044:	f000 fa78 	bl	8006538 <__assert_func>
 8006048:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800604c:	6004      	str	r4, [r0, #0]
 800604e:	60c4      	str	r4, [r0, #12]
 8006050:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006054:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006058:	b94c      	cbnz	r4, 800606e <__pow5mult+0x66>
 800605a:	f240 2171 	movw	r1, #625	@ 0x271
 800605e:	4638      	mov	r0, r7
 8006060:	f7ff ff1a 	bl	8005e98 <__i2b>
 8006064:	2300      	movs	r3, #0
 8006066:	f8c8 0008 	str.w	r0, [r8, #8]
 800606a:	4604      	mov	r4, r0
 800606c:	6003      	str	r3, [r0, #0]
 800606e:	f04f 0900 	mov.w	r9, #0
 8006072:	07eb      	lsls	r3, r5, #31
 8006074:	d50a      	bpl.n	800608c <__pow5mult+0x84>
 8006076:	4631      	mov	r1, r6
 8006078:	4622      	mov	r2, r4
 800607a:	4638      	mov	r0, r7
 800607c:	f7ff ff22 	bl	8005ec4 <__multiply>
 8006080:	4631      	mov	r1, r6
 8006082:	4680      	mov	r8, r0
 8006084:	4638      	mov	r0, r7
 8006086:	f7ff fe53 	bl	8005d30 <_Bfree>
 800608a:	4646      	mov	r6, r8
 800608c:	106d      	asrs	r5, r5, #1
 800608e:	d00b      	beq.n	80060a8 <__pow5mult+0xa0>
 8006090:	6820      	ldr	r0, [r4, #0]
 8006092:	b938      	cbnz	r0, 80060a4 <__pow5mult+0x9c>
 8006094:	4622      	mov	r2, r4
 8006096:	4621      	mov	r1, r4
 8006098:	4638      	mov	r0, r7
 800609a:	f7ff ff13 	bl	8005ec4 <__multiply>
 800609e:	6020      	str	r0, [r4, #0]
 80060a0:	f8c0 9000 	str.w	r9, [r0]
 80060a4:	4604      	mov	r4, r0
 80060a6:	e7e4      	b.n	8006072 <__pow5mult+0x6a>
 80060a8:	4630      	mov	r0, r6
 80060aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80060ae:	bf00      	nop
 80060b0:	08006d14 	.word	0x08006d14
 80060b4:	08006be1 	.word	0x08006be1
 80060b8:	08006c61 	.word	0x08006c61

080060bc <__lshift>:
 80060bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80060c0:	460c      	mov	r4, r1
 80060c2:	6849      	ldr	r1, [r1, #4]
 80060c4:	6923      	ldr	r3, [r4, #16]
 80060c6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80060ca:	68a3      	ldr	r3, [r4, #8]
 80060cc:	4607      	mov	r7, r0
 80060ce:	4691      	mov	r9, r2
 80060d0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80060d4:	f108 0601 	add.w	r6, r8, #1
 80060d8:	42b3      	cmp	r3, r6
 80060da:	db0b      	blt.n	80060f4 <__lshift+0x38>
 80060dc:	4638      	mov	r0, r7
 80060de:	f7ff fde7 	bl	8005cb0 <_Balloc>
 80060e2:	4605      	mov	r5, r0
 80060e4:	b948      	cbnz	r0, 80060fa <__lshift+0x3e>
 80060e6:	4602      	mov	r2, r0
 80060e8:	4b28      	ldr	r3, [pc, #160]	@ (800618c <__lshift+0xd0>)
 80060ea:	4829      	ldr	r0, [pc, #164]	@ (8006190 <__lshift+0xd4>)
 80060ec:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80060f0:	f000 fa22 	bl	8006538 <__assert_func>
 80060f4:	3101      	adds	r1, #1
 80060f6:	005b      	lsls	r3, r3, #1
 80060f8:	e7ee      	b.n	80060d8 <__lshift+0x1c>
 80060fa:	2300      	movs	r3, #0
 80060fc:	f100 0114 	add.w	r1, r0, #20
 8006100:	f100 0210 	add.w	r2, r0, #16
 8006104:	4618      	mov	r0, r3
 8006106:	4553      	cmp	r3, sl
 8006108:	db33      	blt.n	8006172 <__lshift+0xb6>
 800610a:	6920      	ldr	r0, [r4, #16]
 800610c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006110:	f104 0314 	add.w	r3, r4, #20
 8006114:	f019 091f 	ands.w	r9, r9, #31
 8006118:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800611c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006120:	d02b      	beq.n	800617a <__lshift+0xbe>
 8006122:	f1c9 0e20 	rsb	lr, r9, #32
 8006126:	468a      	mov	sl, r1
 8006128:	2200      	movs	r2, #0
 800612a:	6818      	ldr	r0, [r3, #0]
 800612c:	fa00 f009 	lsl.w	r0, r0, r9
 8006130:	4310      	orrs	r0, r2
 8006132:	f84a 0b04 	str.w	r0, [sl], #4
 8006136:	f853 2b04 	ldr.w	r2, [r3], #4
 800613a:	459c      	cmp	ip, r3
 800613c:	fa22 f20e 	lsr.w	r2, r2, lr
 8006140:	d8f3      	bhi.n	800612a <__lshift+0x6e>
 8006142:	ebac 0304 	sub.w	r3, ip, r4
 8006146:	3b15      	subs	r3, #21
 8006148:	f023 0303 	bic.w	r3, r3, #3
 800614c:	3304      	adds	r3, #4
 800614e:	f104 0015 	add.w	r0, r4, #21
 8006152:	4560      	cmp	r0, ip
 8006154:	bf88      	it	hi
 8006156:	2304      	movhi	r3, #4
 8006158:	50ca      	str	r2, [r1, r3]
 800615a:	b10a      	cbz	r2, 8006160 <__lshift+0xa4>
 800615c:	f108 0602 	add.w	r6, r8, #2
 8006160:	3e01      	subs	r6, #1
 8006162:	4638      	mov	r0, r7
 8006164:	612e      	str	r6, [r5, #16]
 8006166:	4621      	mov	r1, r4
 8006168:	f7ff fde2 	bl	8005d30 <_Bfree>
 800616c:	4628      	mov	r0, r5
 800616e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006172:	f842 0f04 	str.w	r0, [r2, #4]!
 8006176:	3301      	adds	r3, #1
 8006178:	e7c5      	b.n	8006106 <__lshift+0x4a>
 800617a:	3904      	subs	r1, #4
 800617c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006180:	f841 2f04 	str.w	r2, [r1, #4]!
 8006184:	459c      	cmp	ip, r3
 8006186:	d8f9      	bhi.n	800617c <__lshift+0xc0>
 8006188:	e7ea      	b.n	8006160 <__lshift+0xa4>
 800618a:	bf00      	nop
 800618c:	08006c50 	.word	0x08006c50
 8006190:	08006c61 	.word	0x08006c61

08006194 <__mcmp>:
 8006194:	690a      	ldr	r2, [r1, #16]
 8006196:	4603      	mov	r3, r0
 8006198:	6900      	ldr	r0, [r0, #16]
 800619a:	1a80      	subs	r0, r0, r2
 800619c:	b530      	push	{r4, r5, lr}
 800619e:	d10e      	bne.n	80061be <__mcmp+0x2a>
 80061a0:	3314      	adds	r3, #20
 80061a2:	3114      	adds	r1, #20
 80061a4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80061a8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80061ac:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80061b0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80061b4:	4295      	cmp	r5, r2
 80061b6:	d003      	beq.n	80061c0 <__mcmp+0x2c>
 80061b8:	d205      	bcs.n	80061c6 <__mcmp+0x32>
 80061ba:	f04f 30ff 	mov.w	r0, #4294967295
 80061be:	bd30      	pop	{r4, r5, pc}
 80061c0:	42a3      	cmp	r3, r4
 80061c2:	d3f3      	bcc.n	80061ac <__mcmp+0x18>
 80061c4:	e7fb      	b.n	80061be <__mcmp+0x2a>
 80061c6:	2001      	movs	r0, #1
 80061c8:	e7f9      	b.n	80061be <__mcmp+0x2a>
	...

080061cc <__mdiff>:
 80061cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061d0:	4689      	mov	r9, r1
 80061d2:	4606      	mov	r6, r0
 80061d4:	4611      	mov	r1, r2
 80061d6:	4648      	mov	r0, r9
 80061d8:	4614      	mov	r4, r2
 80061da:	f7ff ffdb 	bl	8006194 <__mcmp>
 80061de:	1e05      	subs	r5, r0, #0
 80061e0:	d112      	bne.n	8006208 <__mdiff+0x3c>
 80061e2:	4629      	mov	r1, r5
 80061e4:	4630      	mov	r0, r6
 80061e6:	f7ff fd63 	bl	8005cb0 <_Balloc>
 80061ea:	4602      	mov	r2, r0
 80061ec:	b928      	cbnz	r0, 80061fa <__mdiff+0x2e>
 80061ee:	4b3f      	ldr	r3, [pc, #252]	@ (80062ec <__mdiff+0x120>)
 80061f0:	f240 2137 	movw	r1, #567	@ 0x237
 80061f4:	483e      	ldr	r0, [pc, #248]	@ (80062f0 <__mdiff+0x124>)
 80061f6:	f000 f99f 	bl	8006538 <__assert_func>
 80061fa:	2301      	movs	r3, #1
 80061fc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006200:	4610      	mov	r0, r2
 8006202:	b003      	add	sp, #12
 8006204:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006208:	bfbc      	itt	lt
 800620a:	464b      	movlt	r3, r9
 800620c:	46a1      	movlt	r9, r4
 800620e:	4630      	mov	r0, r6
 8006210:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006214:	bfba      	itte	lt
 8006216:	461c      	movlt	r4, r3
 8006218:	2501      	movlt	r5, #1
 800621a:	2500      	movge	r5, #0
 800621c:	f7ff fd48 	bl	8005cb0 <_Balloc>
 8006220:	4602      	mov	r2, r0
 8006222:	b918      	cbnz	r0, 800622c <__mdiff+0x60>
 8006224:	4b31      	ldr	r3, [pc, #196]	@ (80062ec <__mdiff+0x120>)
 8006226:	f240 2145 	movw	r1, #581	@ 0x245
 800622a:	e7e3      	b.n	80061f4 <__mdiff+0x28>
 800622c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006230:	6926      	ldr	r6, [r4, #16]
 8006232:	60c5      	str	r5, [r0, #12]
 8006234:	f109 0310 	add.w	r3, r9, #16
 8006238:	f109 0514 	add.w	r5, r9, #20
 800623c:	f104 0e14 	add.w	lr, r4, #20
 8006240:	f100 0b14 	add.w	fp, r0, #20
 8006244:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006248:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800624c:	9301      	str	r3, [sp, #4]
 800624e:	46d9      	mov	r9, fp
 8006250:	f04f 0c00 	mov.w	ip, #0
 8006254:	9b01      	ldr	r3, [sp, #4]
 8006256:	f85e 0b04 	ldr.w	r0, [lr], #4
 800625a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800625e:	9301      	str	r3, [sp, #4]
 8006260:	fa1f f38a 	uxth.w	r3, sl
 8006264:	4619      	mov	r1, r3
 8006266:	b283      	uxth	r3, r0
 8006268:	1acb      	subs	r3, r1, r3
 800626a:	0c00      	lsrs	r0, r0, #16
 800626c:	4463      	add	r3, ip
 800626e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006272:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8006276:	b29b      	uxth	r3, r3
 8006278:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800627c:	4576      	cmp	r6, lr
 800627e:	f849 3b04 	str.w	r3, [r9], #4
 8006282:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006286:	d8e5      	bhi.n	8006254 <__mdiff+0x88>
 8006288:	1b33      	subs	r3, r6, r4
 800628a:	3b15      	subs	r3, #21
 800628c:	f023 0303 	bic.w	r3, r3, #3
 8006290:	3415      	adds	r4, #21
 8006292:	3304      	adds	r3, #4
 8006294:	42a6      	cmp	r6, r4
 8006296:	bf38      	it	cc
 8006298:	2304      	movcc	r3, #4
 800629a:	441d      	add	r5, r3
 800629c:	445b      	add	r3, fp
 800629e:	461e      	mov	r6, r3
 80062a0:	462c      	mov	r4, r5
 80062a2:	4544      	cmp	r4, r8
 80062a4:	d30e      	bcc.n	80062c4 <__mdiff+0xf8>
 80062a6:	f108 0103 	add.w	r1, r8, #3
 80062aa:	1b49      	subs	r1, r1, r5
 80062ac:	f021 0103 	bic.w	r1, r1, #3
 80062b0:	3d03      	subs	r5, #3
 80062b2:	45a8      	cmp	r8, r5
 80062b4:	bf38      	it	cc
 80062b6:	2100      	movcc	r1, #0
 80062b8:	440b      	add	r3, r1
 80062ba:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80062be:	b191      	cbz	r1, 80062e6 <__mdiff+0x11a>
 80062c0:	6117      	str	r7, [r2, #16]
 80062c2:	e79d      	b.n	8006200 <__mdiff+0x34>
 80062c4:	f854 1b04 	ldr.w	r1, [r4], #4
 80062c8:	46e6      	mov	lr, ip
 80062ca:	0c08      	lsrs	r0, r1, #16
 80062cc:	fa1c fc81 	uxtah	ip, ip, r1
 80062d0:	4471      	add	r1, lr
 80062d2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80062d6:	b289      	uxth	r1, r1
 80062d8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80062dc:	f846 1b04 	str.w	r1, [r6], #4
 80062e0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80062e4:	e7dd      	b.n	80062a2 <__mdiff+0xd6>
 80062e6:	3f01      	subs	r7, #1
 80062e8:	e7e7      	b.n	80062ba <__mdiff+0xee>
 80062ea:	bf00      	nop
 80062ec:	08006c50 	.word	0x08006c50
 80062f0:	08006c61 	.word	0x08006c61

080062f4 <__d2b>:
 80062f4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80062f8:	460f      	mov	r7, r1
 80062fa:	2101      	movs	r1, #1
 80062fc:	ec59 8b10 	vmov	r8, r9, d0
 8006300:	4616      	mov	r6, r2
 8006302:	f7ff fcd5 	bl	8005cb0 <_Balloc>
 8006306:	4604      	mov	r4, r0
 8006308:	b930      	cbnz	r0, 8006318 <__d2b+0x24>
 800630a:	4602      	mov	r2, r0
 800630c:	4b23      	ldr	r3, [pc, #140]	@ (800639c <__d2b+0xa8>)
 800630e:	4824      	ldr	r0, [pc, #144]	@ (80063a0 <__d2b+0xac>)
 8006310:	f240 310f 	movw	r1, #783	@ 0x30f
 8006314:	f000 f910 	bl	8006538 <__assert_func>
 8006318:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800631c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006320:	b10d      	cbz	r5, 8006326 <__d2b+0x32>
 8006322:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006326:	9301      	str	r3, [sp, #4]
 8006328:	f1b8 0300 	subs.w	r3, r8, #0
 800632c:	d023      	beq.n	8006376 <__d2b+0x82>
 800632e:	4668      	mov	r0, sp
 8006330:	9300      	str	r3, [sp, #0]
 8006332:	f7ff fd84 	bl	8005e3e <__lo0bits>
 8006336:	e9dd 1200 	ldrd	r1, r2, [sp]
 800633a:	b1d0      	cbz	r0, 8006372 <__d2b+0x7e>
 800633c:	f1c0 0320 	rsb	r3, r0, #32
 8006340:	fa02 f303 	lsl.w	r3, r2, r3
 8006344:	430b      	orrs	r3, r1
 8006346:	40c2      	lsrs	r2, r0
 8006348:	6163      	str	r3, [r4, #20]
 800634a:	9201      	str	r2, [sp, #4]
 800634c:	9b01      	ldr	r3, [sp, #4]
 800634e:	61a3      	str	r3, [r4, #24]
 8006350:	2b00      	cmp	r3, #0
 8006352:	bf0c      	ite	eq
 8006354:	2201      	moveq	r2, #1
 8006356:	2202      	movne	r2, #2
 8006358:	6122      	str	r2, [r4, #16]
 800635a:	b1a5      	cbz	r5, 8006386 <__d2b+0x92>
 800635c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8006360:	4405      	add	r5, r0
 8006362:	603d      	str	r5, [r7, #0]
 8006364:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8006368:	6030      	str	r0, [r6, #0]
 800636a:	4620      	mov	r0, r4
 800636c:	b003      	add	sp, #12
 800636e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006372:	6161      	str	r1, [r4, #20]
 8006374:	e7ea      	b.n	800634c <__d2b+0x58>
 8006376:	a801      	add	r0, sp, #4
 8006378:	f7ff fd61 	bl	8005e3e <__lo0bits>
 800637c:	9b01      	ldr	r3, [sp, #4]
 800637e:	6163      	str	r3, [r4, #20]
 8006380:	3020      	adds	r0, #32
 8006382:	2201      	movs	r2, #1
 8006384:	e7e8      	b.n	8006358 <__d2b+0x64>
 8006386:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800638a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800638e:	6038      	str	r0, [r7, #0]
 8006390:	6918      	ldr	r0, [r3, #16]
 8006392:	f7ff fd35 	bl	8005e00 <__hi0bits>
 8006396:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800639a:	e7e5      	b.n	8006368 <__d2b+0x74>
 800639c:	08006c50 	.word	0x08006c50
 80063a0:	08006c61 	.word	0x08006c61

080063a4 <__sflush_r>:
 80063a4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80063a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063ac:	0716      	lsls	r6, r2, #28
 80063ae:	4605      	mov	r5, r0
 80063b0:	460c      	mov	r4, r1
 80063b2:	d454      	bmi.n	800645e <__sflush_r+0xba>
 80063b4:	684b      	ldr	r3, [r1, #4]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	dc02      	bgt.n	80063c0 <__sflush_r+0x1c>
 80063ba:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80063bc:	2b00      	cmp	r3, #0
 80063be:	dd48      	ble.n	8006452 <__sflush_r+0xae>
 80063c0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80063c2:	2e00      	cmp	r6, #0
 80063c4:	d045      	beq.n	8006452 <__sflush_r+0xae>
 80063c6:	2300      	movs	r3, #0
 80063c8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80063cc:	682f      	ldr	r7, [r5, #0]
 80063ce:	6a21      	ldr	r1, [r4, #32]
 80063d0:	602b      	str	r3, [r5, #0]
 80063d2:	d030      	beq.n	8006436 <__sflush_r+0x92>
 80063d4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80063d6:	89a3      	ldrh	r3, [r4, #12]
 80063d8:	0759      	lsls	r1, r3, #29
 80063da:	d505      	bpl.n	80063e8 <__sflush_r+0x44>
 80063dc:	6863      	ldr	r3, [r4, #4]
 80063de:	1ad2      	subs	r2, r2, r3
 80063e0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80063e2:	b10b      	cbz	r3, 80063e8 <__sflush_r+0x44>
 80063e4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80063e6:	1ad2      	subs	r2, r2, r3
 80063e8:	2300      	movs	r3, #0
 80063ea:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80063ec:	6a21      	ldr	r1, [r4, #32]
 80063ee:	4628      	mov	r0, r5
 80063f0:	47b0      	blx	r6
 80063f2:	1c43      	adds	r3, r0, #1
 80063f4:	89a3      	ldrh	r3, [r4, #12]
 80063f6:	d106      	bne.n	8006406 <__sflush_r+0x62>
 80063f8:	6829      	ldr	r1, [r5, #0]
 80063fa:	291d      	cmp	r1, #29
 80063fc:	d82b      	bhi.n	8006456 <__sflush_r+0xb2>
 80063fe:	4a2a      	ldr	r2, [pc, #168]	@ (80064a8 <__sflush_r+0x104>)
 8006400:	40ca      	lsrs	r2, r1
 8006402:	07d6      	lsls	r6, r2, #31
 8006404:	d527      	bpl.n	8006456 <__sflush_r+0xb2>
 8006406:	2200      	movs	r2, #0
 8006408:	6062      	str	r2, [r4, #4]
 800640a:	04d9      	lsls	r1, r3, #19
 800640c:	6922      	ldr	r2, [r4, #16]
 800640e:	6022      	str	r2, [r4, #0]
 8006410:	d504      	bpl.n	800641c <__sflush_r+0x78>
 8006412:	1c42      	adds	r2, r0, #1
 8006414:	d101      	bne.n	800641a <__sflush_r+0x76>
 8006416:	682b      	ldr	r3, [r5, #0]
 8006418:	b903      	cbnz	r3, 800641c <__sflush_r+0x78>
 800641a:	6560      	str	r0, [r4, #84]	@ 0x54
 800641c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800641e:	602f      	str	r7, [r5, #0]
 8006420:	b1b9      	cbz	r1, 8006452 <__sflush_r+0xae>
 8006422:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006426:	4299      	cmp	r1, r3
 8006428:	d002      	beq.n	8006430 <__sflush_r+0x8c>
 800642a:	4628      	mov	r0, r5
 800642c:	f7ff fb40 	bl	8005ab0 <_free_r>
 8006430:	2300      	movs	r3, #0
 8006432:	6363      	str	r3, [r4, #52]	@ 0x34
 8006434:	e00d      	b.n	8006452 <__sflush_r+0xae>
 8006436:	2301      	movs	r3, #1
 8006438:	4628      	mov	r0, r5
 800643a:	47b0      	blx	r6
 800643c:	4602      	mov	r2, r0
 800643e:	1c50      	adds	r0, r2, #1
 8006440:	d1c9      	bne.n	80063d6 <__sflush_r+0x32>
 8006442:	682b      	ldr	r3, [r5, #0]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d0c6      	beq.n	80063d6 <__sflush_r+0x32>
 8006448:	2b1d      	cmp	r3, #29
 800644a:	d001      	beq.n	8006450 <__sflush_r+0xac>
 800644c:	2b16      	cmp	r3, #22
 800644e:	d11e      	bne.n	800648e <__sflush_r+0xea>
 8006450:	602f      	str	r7, [r5, #0]
 8006452:	2000      	movs	r0, #0
 8006454:	e022      	b.n	800649c <__sflush_r+0xf8>
 8006456:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800645a:	b21b      	sxth	r3, r3
 800645c:	e01b      	b.n	8006496 <__sflush_r+0xf2>
 800645e:	690f      	ldr	r7, [r1, #16]
 8006460:	2f00      	cmp	r7, #0
 8006462:	d0f6      	beq.n	8006452 <__sflush_r+0xae>
 8006464:	0793      	lsls	r3, r2, #30
 8006466:	680e      	ldr	r6, [r1, #0]
 8006468:	bf08      	it	eq
 800646a:	694b      	ldreq	r3, [r1, #20]
 800646c:	600f      	str	r7, [r1, #0]
 800646e:	bf18      	it	ne
 8006470:	2300      	movne	r3, #0
 8006472:	eba6 0807 	sub.w	r8, r6, r7
 8006476:	608b      	str	r3, [r1, #8]
 8006478:	f1b8 0f00 	cmp.w	r8, #0
 800647c:	dde9      	ble.n	8006452 <__sflush_r+0xae>
 800647e:	6a21      	ldr	r1, [r4, #32]
 8006480:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006482:	4643      	mov	r3, r8
 8006484:	463a      	mov	r2, r7
 8006486:	4628      	mov	r0, r5
 8006488:	47b0      	blx	r6
 800648a:	2800      	cmp	r0, #0
 800648c:	dc08      	bgt.n	80064a0 <__sflush_r+0xfc>
 800648e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006492:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006496:	81a3      	strh	r3, [r4, #12]
 8006498:	f04f 30ff 	mov.w	r0, #4294967295
 800649c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80064a0:	4407      	add	r7, r0
 80064a2:	eba8 0800 	sub.w	r8, r8, r0
 80064a6:	e7e7      	b.n	8006478 <__sflush_r+0xd4>
 80064a8:	20400001 	.word	0x20400001

080064ac <_fflush_r>:
 80064ac:	b538      	push	{r3, r4, r5, lr}
 80064ae:	690b      	ldr	r3, [r1, #16]
 80064b0:	4605      	mov	r5, r0
 80064b2:	460c      	mov	r4, r1
 80064b4:	b913      	cbnz	r3, 80064bc <_fflush_r+0x10>
 80064b6:	2500      	movs	r5, #0
 80064b8:	4628      	mov	r0, r5
 80064ba:	bd38      	pop	{r3, r4, r5, pc}
 80064bc:	b118      	cbz	r0, 80064c6 <_fflush_r+0x1a>
 80064be:	6a03      	ldr	r3, [r0, #32]
 80064c0:	b90b      	cbnz	r3, 80064c6 <_fflush_r+0x1a>
 80064c2:	f7fe fba1 	bl	8004c08 <__sinit>
 80064c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d0f3      	beq.n	80064b6 <_fflush_r+0xa>
 80064ce:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80064d0:	07d0      	lsls	r0, r2, #31
 80064d2:	d404      	bmi.n	80064de <_fflush_r+0x32>
 80064d4:	0599      	lsls	r1, r3, #22
 80064d6:	d402      	bmi.n	80064de <_fflush_r+0x32>
 80064d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80064da:	f7fe fc8c 	bl	8004df6 <__retarget_lock_acquire_recursive>
 80064de:	4628      	mov	r0, r5
 80064e0:	4621      	mov	r1, r4
 80064e2:	f7ff ff5f 	bl	80063a4 <__sflush_r>
 80064e6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80064e8:	07da      	lsls	r2, r3, #31
 80064ea:	4605      	mov	r5, r0
 80064ec:	d4e4      	bmi.n	80064b8 <_fflush_r+0xc>
 80064ee:	89a3      	ldrh	r3, [r4, #12]
 80064f0:	059b      	lsls	r3, r3, #22
 80064f2:	d4e1      	bmi.n	80064b8 <_fflush_r+0xc>
 80064f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80064f6:	f7fe fc7f 	bl	8004df8 <__retarget_lock_release_recursive>
 80064fa:	e7dd      	b.n	80064b8 <_fflush_r+0xc>

080064fc <_sbrk_r>:
 80064fc:	b538      	push	{r3, r4, r5, lr}
 80064fe:	4d06      	ldr	r5, [pc, #24]	@ (8006518 <_sbrk_r+0x1c>)
 8006500:	2300      	movs	r3, #0
 8006502:	4604      	mov	r4, r0
 8006504:	4608      	mov	r0, r1
 8006506:	602b      	str	r3, [r5, #0]
 8006508:	f7fd fe3e 	bl	8004188 <_sbrk>
 800650c:	1c43      	adds	r3, r0, #1
 800650e:	d102      	bne.n	8006516 <_sbrk_r+0x1a>
 8006510:	682b      	ldr	r3, [r5, #0]
 8006512:	b103      	cbz	r3, 8006516 <_sbrk_r+0x1a>
 8006514:	6023      	str	r3, [r4, #0]
 8006516:	bd38      	pop	{r3, r4, r5, pc}
 8006518:	20000484 	.word	0x20000484

0800651c <memcpy>:
 800651c:	440a      	add	r2, r1
 800651e:	4291      	cmp	r1, r2
 8006520:	f100 33ff 	add.w	r3, r0, #4294967295
 8006524:	d100      	bne.n	8006528 <memcpy+0xc>
 8006526:	4770      	bx	lr
 8006528:	b510      	push	{r4, lr}
 800652a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800652e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006532:	4291      	cmp	r1, r2
 8006534:	d1f9      	bne.n	800652a <memcpy+0xe>
 8006536:	bd10      	pop	{r4, pc}

08006538 <__assert_func>:
 8006538:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800653a:	4614      	mov	r4, r2
 800653c:	461a      	mov	r2, r3
 800653e:	4b09      	ldr	r3, [pc, #36]	@ (8006564 <__assert_func+0x2c>)
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	4605      	mov	r5, r0
 8006544:	68d8      	ldr	r0, [r3, #12]
 8006546:	b14c      	cbz	r4, 800655c <__assert_func+0x24>
 8006548:	4b07      	ldr	r3, [pc, #28]	@ (8006568 <__assert_func+0x30>)
 800654a:	9100      	str	r1, [sp, #0]
 800654c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006550:	4906      	ldr	r1, [pc, #24]	@ (800656c <__assert_func+0x34>)
 8006552:	462b      	mov	r3, r5
 8006554:	f000 f842 	bl	80065dc <fiprintf>
 8006558:	f000 f852 	bl	8006600 <abort>
 800655c:	4b04      	ldr	r3, [pc, #16]	@ (8006570 <__assert_func+0x38>)
 800655e:	461c      	mov	r4, r3
 8006560:	e7f3      	b.n	800654a <__assert_func+0x12>
 8006562:	bf00      	nop
 8006564:	20000010 	.word	0x20000010
 8006568:	08006cc4 	.word	0x08006cc4
 800656c:	08006cd1 	.word	0x08006cd1
 8006570:	08006cff 	.word	0x08006cff

08006574 <_calloc_r>:
 8006574:	b570      	push	{r4, r5, r6, lr}
 8006576:	fba1 5402 	umull	r5, r4, r1, r2
 800657a:	b934      	cbnz	r4, 800658a <_calloc_r+0x16>
 800657c:	4629      	mov	r1, r5
 800657e:	f7ff fb0b 	bl	8005b98 <_malloc_r>
 8006582:	4606      	mov	r6, r0
 8006584:	b928      	cbnz	r0, 8006592 <_calloc_r+0x1e>
 8006586:	4630      	mov	r0, r6
 8006588:	bd70      	pop	{r4, r5, r6, pc}
 800658a:	220c      	movs	r2, #12
 800658c:	6002      	str	r2, [r0, #0]
 800658e:	2600      	movs	r6, #0
 8006590:	e7f9      	b.n	8006586 <_calloc_r+0x12>
 8006592:	462a      	mov	r2, r5
 8006594:	4621      	mov	r1, r4
 8006596:	f7fe fbb0 	bl	8004cfa <memset>
 800659a:	e7f4      	b.n	8006586 <_calloc_r+0x12>

0800659c <__ascii_mbtowc>:
 800659c:	b082      	sub	sp, #8
 800659e:	b901      	cbnz	r1, 80065a2 <__ascii_mbtowc+0x6>
 80065a0:	a901      	add	r1, sp, #4
 80065a2:	b142      	cbz	r2, 80065b6 <__ascii_mbtowc+0x1a>
 80065a4:	b14b      	cbz	r3, 80065ba <__ascii_mbtowc+0x1e>
 80065a6:	7813      	ldrb	r3, [r2, #0]
 80065a8:	600b      	str	r3, [r1, #0]
 80065aa:	7812      	ldrb	r2, [r2, #0]
 80065ac:	1e10      	subs	r0, r2, #0
 80065ae:	bf18      	it	ne
 80065b0:	2001      	movne	r0, #1
 80065b2:	b002      	add	sp, #8
 80065b4:	4770      	bx	lr
 80065b6:	4610      	mov	r0, r2
 80065b8:	e7fb      	b.n	80065b2 <__ascii_mbtowc+0x16>
 80065ba:	f06f 0001 	mvn.w	r0, #1
 80065be:	e7f8      	b.n	80065b2 <__ascii_mbtowc+0x16>

080065c0 <__ascii_wctomb>:
 80065c0:	4603      	mov	r3, r0
 80065c2:	4608      	mov	r0, r1
 80065c4:	b141      	cbz	r1, 80065d8 <__ascii_wctomb+0x18>
 80065c6:	2aff      	cmp	r2, #255	@ 0xff
 80065c8:	d904      	bls.n	80065d4 <__ascii_wctomb+0x14>
 80065ca:	228a      	movs	r2, #138	@ 0x8a
 80065cc:	601a      	str	r2, [r3, #0]
 80065ce:	f04f 30ff 	mov.w	r0, #4294967295
 80065d2:	4770      	bx	lr
 80065d4:	700a      	strb	r2, [r1, #0]
 80065d6:	2001      	movs	r0, #1
 80065d8:	4770      	bx	lr
	...

080065dc <fiprintf>:
 80065dc:	b40e      	push	{r1, r2, r3}
 80065de:	b503      	push	{r0, r1, lr}
 80065e0:	4601      	mov	r1, r0
 80065e2:	ab03      	add	r3, sp, #12
 80065e4:	4805      	ldr	r0, [pc, #20]	@ (80065fc <fiprintf+0x20>)
 80065e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80065ea:	6800      	ldr	r0, [r0, #0]
 80065ec:	9301      	str	r3, [sp, #4]
 80065ee:	f000 f837 	bl	8006660 <_vfiprintf_r>
 80065f2:	b002      	add	sp, #8
 80065f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80065f8:	b003      	add	sp, #12
 80065fa:	4770      	bx	lr
 80065fc:	20000010 	.word	0x20000010

08006600 <abort>:
 8006600:	b508      	push	{r3, lr}
 8006602:	2006      	movs	r0, #6
 8006604:	f000 fa00 	bl	8006a08 <raise>
 8006608:	2001      	movs	r0, #1
 800660a:	f7fd fd45 	bl	8004098 <_exit>

0800660e <__sfputc_r>:
 800660e:	6893      	ldr	r3, [r2, #8]
 8006610:	3b01      	subs	r3, #1
 8006612:	2b00      	cmp	r3, #0
 8006614:	b410      	push	{r4}
 8006616:	6093      	str	r3, [r2, #8]
 8006618:	da08      	bge.n	800662c <__sfputc_r+0x1e>
 800661a:	6994      	ldr	r4, [r2, #24]
 800661c:	42a3      	cmp	r3, r4
 800661e:	db01      	blt.n	8006624 <__sfputc_r+0x16>
 8006620:	290a      	cmp	r1, #10
 8006622:	d103      	bne.n	800662c <__sfputc_r+0x1e>
 8006624:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006628:	f000 b932 	b.w	8006890 <__swbuf_r>
 800662c:	6813      	ldr	r3, [r2, #0]
 800662e:	1c58      	adds	r0, r3, #1
 8006630:	6010      	str	r0, [r2, #0]
 8006632:	7019      	strb	r1, [r3, #0]
 8006634:	4608      	mov	r0, r1
 8006636:	f85d 4b04 	ldr.w	r4, [sp], #4
 800663a:	4770      	bx	lr

0800663c <__sfputs_r>:
 800663c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800663e:	4606      	mov	r6, r0
 8006640:	460f      	mov	r7, r1
 8006642:	4614      	mov	r4, r2
 8006644:	18d5      	adds	r5, r2, r3
 8006646:	42ac      	cmp	r4, r5
 8006648:	d101      	bne.n	800664e <__sfputs_r+0x12>
 800664a:	2000      	movs	r0, #0
 800664c:	e007      	b.n	800665e <__sfputs_r+0x22>
 800664e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006652:	463a      	mov	r2, r7
 8006654:	4630      	mov	r0, r6
 8006656:	f7ff ffda 	bl	800660e <__sfputc_r>
 800665a:	1c43      	adds	r3, r0, #1
 800665c:	d1f3      	bne.n	8006646 <__sfputs_r+0xa>
 800665e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006660 <_vfiprintf_r>:
 8006660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006664:	460d      	mov	r5, r1
 8006666:	b09d      	sub	sp, #116	@ 0x74
 8006668:	4614      	mov	r4, r2
 800666a:	4698      	mov	r8, r3
 800666c:	4606      	mov	r6, r0
 800666e:	b118      	cbz	r0, 8006678 <_vfiprintf_r+0x18>
 8006670:	6a03      	ldr	r3, [r0, #32]
 8006672:	b90b      	cbnz	r3, 8006678 <_vfiprintf_r+0x18>
 8006674:	f7fe fac8 	bl	8004c08 <__sinit>
 8006678:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800667a:	07d9      	lsls	r1, r3, #31
 800667c:	d405      	bmi.n	800668a <_vfiprintf_r+0x2a>
 800667e:	89ab      	ldrh	r3, [r5, #12]
 8006680:	059a      	lsls	r2, r3, #22
 8006682:	d402      	bmi.n	800668a <_vfiprintf_r+0x2a>
 8006684:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006686:	f7fe fbb6 	bl	8004df6 <__retarget_lock_acquire_recursive>
 800668a:	89ab      	ldrh	r3, [r5, #12]
 800668c:	071b      	lsls	r3, r3, #28
 800668e:	d501      	bpl.n	8006694 <_vfiprintf_r+0x34>
 8006690:	692b      	ldr	r3, [r5, #16]
 8006692:	b99b      	cbnz	r3, 80066bc <_vfiprintf_r+0x5c>
 8006694:	4629      	mov	r1, r5
 8006696:	4630      	mov	r0, r6
 8006698:	f000 f938 	bl	800690c <__swsetup_r>
 800669c:	b170      	cbz	r0, 80066bc <_vfiprintf_r+0x5c>
 800669e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80066a0:	07dc      	lsls	r4, r3, #31
 80066a2:	d504      	bpl.n	80066ae <_vfiprintf_r+0x4e>
 80066a4:	f04f 30ff 	mov.w	r0, #4294967295
 80066a8:	b01d      	add	sp, #116	@ 0x74
 80066aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066ae:	89ab      	ldrh	r3, [r5, #12]
 80066b0:	0598      	lsls	r0, r3, #22
 80066b2:	d4f7      	bmi.n	80066a4 <_vfiprintf_r+0x44>
 80066b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80066b6:	f7fe fb9f 	bl	8004df8 <__retarget_lock_release_recursive>
 80066ba:	e7f3      	b.n	80066a4 <_vfiprintf_r+0x44>
 80066bc:	2300      	movs	r3, #0
 80066be:	9309      	str	r3, [sp, #36]	@ 0x24
 80066c0:	2320      	movs	r3, #32
 80066c2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80066c6:	f8cd 800c 	str.w	r8, [sp, #12]
 80066ca:	2330      	movs	r3, #48	@ 0x30
 80066cc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800687c <_vfiprintf_r+0x21c>
 80066d0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80066d4:	f04f 0901 	mov.w	r9, #1
 80066d8:	4623      	mov	r3, r4
 80066da:	469a      	mov	sl, r3
 80066dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80066e0:	b10a      	cbz	r2, 80066e6 <_vfiprintf_r+0x86>
 80066e2:	2a25      	cmp	r2, #37	@ 0x25
 80066e4:	d1f9      	bne.n	80066da <_vfiprintf_r+0x7a>
 80066e6:	ebba 0b04 	subs.w	fp, sl, r4
 80066ea:	d00b      	beq.n	8006704 <_vfiprintf_r+0xa4>
 80066ec:	465b      	mov	r3, fp
 80066ee:	4622      	mov	r2, r4
 80066f0:	4629      	mov	r1, r5
 80066f2:	4630      	mov	r0, r6
 80066f4:	f7ff ffa2 	bl	800663c <__sfputs_r>
 80066f8:	3001      	adds	r0, #1
 80066fa:	f000 80a7 	beq.w	800684c <_vfiprintf_r+0x1ec>
 80066fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006700:	445a      	add	r2, fp
 8006702:	9209      	str	r2, [sp, #36]	@ 0x24
 8006704:	f89a 3000 	ldrb.w	r3, [sl]
 8006708:	2b00      	cmp	r3, #0
 800670a:	f000 809f 	beq.w	800684c <_vfiprintf_r+0x1ec>
 800670e:	2300      	movs	r3, #0
 8006710:	f04f 32ff 	mov.w	r2, #4294967295
 8006714:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006718:	f10a 0a01 	add.w	sl, sl, #1
 800671c:	9304      	str	r3, [sp, #16]
 800671e:	9307      	str	r3, [sp, #28]
 8006720:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006724:	931a      	str	r3, [sp, #104]	@ 0x68
 8006726:	4654      	mov	r4, sl
 8006728:	2205      	movs	r2, #5
 800672a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800672e:	4853      	ldr	r0, [pc, #332]	@ (800687c <_vfiprintf_r+0x21c>)
 8006730:	f7f9 fd4e 	bl	80001d0 <memchr>
 8006734:	9a04      	ldr	r2, [sp, #16]
 8006736:	b9d8      	cbnz	r0, 8006770 <_vfiprintf_r+0x110>
 8006738:	06d1      	lsls	r1, r2, #27
 800673a:	bf44      	itt	mi
 800673c:	2320      	movmi	r3, #32
 800673e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006742:	0713      	lsls	r3, r2, #28
 8006744:	bf44      	itt	mi
 8006746:	232b      	movmi	r3, #43	@ 0x2b
 8006748:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800674c:	f89a 3000 	ldrb.w	r3, [sl]
 8006750:	2b2a      	cmp	r3, #42	@ 0x2a
 8006752:	d015      	beq.n	8006780 <_vfiprintf_r+0x120>
 8006754:	9a07      	ldr	r2, [sp, #28]
 8006756:	4654      	mov	r4, sl
 8006758:	2000      	movs	r0, #0
 800675a:	f04f 0c0a 	mov.w	ip, #10
 800675e:	4621      	mov	r1, r4
 8006760:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006764:	3b30      	subs	r3, #48	@ 0x30
 8006766:	2b09      	cmp	r3, #9
 8006768:	d94b      	bls.n	8006802 <_vfiprintf_r+0x1a2>
 800676a:	b1b0      	cbz	r0, 800679a <_vfiprintf_r+0x13a>
 800676c:	9207      	str	r2, [sp, #28]
 800676e:	e014      	b.n	800679a <_vfiprintf_r+0x13a>
 8006770:	eba0 0308 	sub.w	r3, r0, r8
 8006774:	fa09 f303 	lsl.w	r3, r9, r3
 8006778:	4313      	orrs	r3, r2
 800677a:	9304      	str	r3, [sp, #16]
 800677c:	46a2      	mov	sl, r4
 800677e:	e7d2      	b.n	8006726 <_vfiprintf_r+0xc6>
 8006780:	9b03      	ldr	r3, [sp, #12]
 8006782:	1d19      	adds	r1, r3, #4
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	9103      	str	r1, [sp, #12]
 8006788:	2b00      	cmp	r3, #0
 800678a:	bfbb      	ittet	lt
 800678c:	425b      	neglt	r3, r3
 800678e:	f042 0202 	orrlt.w	r2, r2, #2
 8006792:	9307      	strge	r3, [sp, #28]
 8006794:	9307      	strlt	r3, [sp, #28]
 8006796:	bfb8      	it	lt
 8006798:	9204      	strlt	r2, [sp, #16]
 800679a:	7823      	ldrb	r3, [r4, #0]
 800679c:	2b2e      	cmp	r3, #46	@ 0x2e
 800679e:	d10a      	bne.n	80067b6 <_vfiprintf_r+0x156>
 80067a0:	7863      	ldrb	r3, [r4, #1]
 80067a2:	2b2a      	cmp	r3, #42	@ 0x2a
 80067a4:	d132      	bne.n	800680c <_vfiprintf_r+0x1ac>
 80067a6:	9b03      	ldr	r3, [sp, #12]
 80067a8:	1d1a      	adds	r2, r3, #4
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	9203      	str	r2, [sp, #12]
 80067ae:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80067b2:	3402      	adds	r4, #2
 80067b4:	9305      	str	r3, [sp, #20]
 80067b6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800688c <_vfiprintf_r+0x22c>
 80067ba:	7821      	ldrb	r1, [r4, #0]
 80067bc:	2203      	movs	r2, #3
 80067be:	4650      	mov	r0, sl
 80067c0:	f7f9 fd06 	bl	80001d0 <memchr>
 80067c4:	b138      	cbz	r0, 80067d6 <_vfiprintf_r+0x176>
 80067c6:	9b04      	ldr	r3, [sp, #16]
 80067c8:	eba0 000a 	sub.w	r0, r0, sl
 80067cc:	2240      	movs	r2, #64	@ 0x40
 80067ce:	4082      	lsls	r2, r0
 80067d0:	4313      	orrs	r3, r2
 80067d2:	3401      	adds	r4, #1
 80067d4:	9304      	str	r3, [sp, #16]
 80067d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80067da:	4829      	ldr	r0, [pc, #164]	@ (8006880 <_vfiprintf_r+0x220>)
 80067dc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80067e0:	2206      	movs	r2, #6
 80067e2:	f7f9 fcf5 	bl	80001d0 <memchr>
 80067e6:	2800      	cmp	r0, #0
 80067e8:	d03f      	beq.n	800686a <_vfiprintf_r+0x20a>
 80067ea:	4b26      	ldr	r3, [pc, #152]	@ (8006884 <_vfiprintf_r+0x224>)
 80067ec:	bb1b      	cbnz	r3, 8006836 <_vfiprintf_r+0x1d6>
 80067ee:	9b03      	ldr	r3, [sp, #12]
 80067f0:	3307      	adds	r3, #7
 80067f2:	f023 0307 	bic.w	r3, r3, #7
 80067f6:	3308      	adds	r3, #8
 80067f8:	9303      	str	r3, [sp, #12]
 80067fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80067fc:	443b      	add	r3, r7
 80067fe:	9309      	str	r3, [sp, #36]	@ 0x24
 8006800:	e76a      	b.n	80066d8 <_vfiprintf_r+0x78>
 8006802:	fb0c 3202 	mla	r2, ip, r2, r3
 8006806:	460c      	mov	r4, r1
 8006808:	2001      	movs	r0, #1
 800680a:	e7a8      	b.n	800675e <_vfiprintf_r+0xfe>
 800680c:	2300      	movs	r3, #0
 800680e:	3401      	adds	r4, #1
 8006810:	9305      	str	r3, [sp, #20]
 8006812:	4619      	mov	r1, r3
 8006814:	f04f 0c0a 	mov.w	ip, #10
 8006818:	4620      	mov	r0, r4
 800681a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800681e:	3a30      	subs	r2, #48	@ 0x30
 8006820:	2a09      	cmp	r2, #9
 8006822:	d903      	bls.n	800682c <_vfiprintf_r+0x1cc>
 8006824:	2b00      	cmp	r3, #0
 8006826:	d0c6      	beq.n	80067b6 <_vfiprintf_r+0x156>
 8006828:	9105      	str	r1, [sp, #20]
 800682a:	e7c4      	b.n	80067b6 <_vfiprintf_r+0x156>
 800682c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006830:	4604      	mov	r4, r0
 8006832:	2301      	movs	r3, #1
 8006834:	e7f0      	b.n	8006818 <_vfiprintf_r+0x1b8>
 8006836:	ab03      	add	r3, sp, #12
 8006838:	9300      	str	r3, [sp, #0]
 800683a:	462a      	mov	r2, r5
 800683c:	4b12      	ldr	r3, [pc, #72]	@ (8006888 <_vfiprintf_r+0x228>)
 800683e:	a904      	add	r1, sp, #16
 8006840:	4630      	mov	r0, r6
 8006842:	f7fd fd9f 	bl	8004384 <_printf_float>
 8006846:	4607      	mov	r7, r0
 8006848:	1c78      	adds	r0, r7, #1
 800684a:	d1d6      	bne.n	80067fa <_vfiprintf_r+0x19a>
 800684c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800684e:	07d9      	lsls	r1, r3, #31
 8006850:	d405      	bmi.n	800685e <_vfiprintf_r+0x1fe>
 8006852:	89ab      	ldrh	r3, [r5, #12]
 8006854:	059a      	lsls	r2, r3, #22
 8006856:	d402      	bmi.n	800685e <_vfiprintf_r+0x1fe>
 8006858:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800685a:	f7fe facd 	bl	8004df8 <__retarget_lock_release_recursive>
 800685e:	89ab      	ldrh	r3, [r5, #12]
 8006860:	065b      	lsls	r3, r3, #25
 8006862:	f53f af1f 	bmi.w	80066a4 <_vfiprintf_r+0x44>
 8006866:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006868:	e71e      	b.n	80066a8 <_vfiprintf_r+0x48>
 800686a:	ab03      	add	r3, sp, #12
 800686c:	9300      	str	r3, [sp, #0]
 800686e:	462a      	mov	r2, r5
 8006870:	4b05      	ldr	r3, [pc, #20]	@ (8006888 <_vfiprintf_r+0x228>)
 8006872:	a904      	add	r1, sp, #16
 8006874:	4630      	mov	r0, r6
 8006876:	f7fe f81d 	bl	80048b4 <_printf_i>
 800687a:	e7e4      	b.n	8006846 <_vfiprintf_r+0x1e6>
 800687c:	08006d00 	.word	0x08006d00
 8006880:	08006d0a 	.word	0x08006d0a
 8006884:	08004385 	.word	0x08004385
 8006888:	0800663d 	.word	0x0800663d
 800688c:	08006d06 	.word	0x08006d06

08006890 <__swbuf_r>:
 8006890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006892:	460e      	mov	r6, r1
 8006894:	4614      	mov	r4, r2
 8006896:	4605      	mov	r5, r0
 8006898:	b118      	cbz	r0, 80068a2 <__swbuf_r+0x12>
 800689a:	6a03      	ldr	r3, [r0, #32]
 800689c:	b90b      	cbnz	r3, 80068a2 <__swbuf_r+0x12>
 800689e:	f7fe f9b3 	bl	8004c08 <__sinit>
 80068a2:	69a3      	ldr	r3, [r4, #24]
 80068a4:	60a3      	str	r3, [r4, #8]
 80068a6:	89a3      	ldrh	r3, [r4, #12]
 80068a8:	071a      	lsls	r2, r3, #28
 80068aa:	d501      	bpl.n	80068b0 <__swbuf_r+0x20>
 80068ac:	6923      	ldr	r3, [r4, #16]
 80068ae:	b943      	cbnz	r3, 80068c2 <__swbuf_r+0x32>
 80068b0:	4621      	mov	r1, r4
 80068b2:	4628      	mov	r0, r5
 80068b4:	f000 f82a 	bl	800690c <__swsetup_r>
 80068b8:	b118      	cbz	r0, 80068c2 <__swbuf_r+0x32>
 80068ba:	f04f 37ff 	mov.w	r7, #4294967295
 80068be:	4638      	mov	r0, r7
 80068c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80068c2:	6823      	ldr	r3, [r4, #0]
 80068c4:	6922      	ldr	r2, [r4, #16]
 80068c6:	1a98      	subs	r0, r3, r2
 80068c8:	6963      	ldr	r3, [r4, #20]
 80068ca:	b2f6      	uxtb	r6, r6
 80068cc:	4283      	cmp	r3, r0
 80068ce:	4637      	mov	r7, r6
 80068d0:	dc05      	bgt.n	80068de <__swbuf_r+0x4e>
 80068d2:	4621      	mov	r1, r4
 80068d4:	4628      	mov	r0, r5
 80068d6:	f7ff fde9 	bl	80064ac <_fflush_r>
 80068da:	2800      	cmp	r0, #0
 80068dc:	d1ed      	bne.n	80068ba <__swbuf_r+0x2a>
 80068de:	68a3      	ldr	r3, [r4, #8]
 80068e0:	3b01      	subs	r3, #1
 80068e2:	60a3      	str	r3, [r4, #8]
 80068e4:	6823      	ldr	r3, [r4, #0]
 80068e6:	1c5a      	adds	r2, r3, #1
 80068e8:	6022      	str	r2, [r4, #0]
 80068ea:	701e      	strb	r6, [r3, #0]
 80068ec:	6962      	ldr	r2, [r4, #20]
 80068ee:	1c43      	adds	r3, r0, #1
 80068f0:	429a      	cmp	r2, r3
 80068f2:	d004      	beq.n	80068fe <__swbuf_r+0x6e>
 80068f4:	89a3      	ldrh	r3, [r4, #12]
 80068f6:	07db      	lsls	r3, r3, #31
 80068f8:	d5e1      	bpl.n	80068be <__swbuf_r+0x2e>
 80068fa:	2e0a      	cmp	r6, #10
 80068fc:	d1df      	bne.n	80068be <__swbuf_r+0x2e>
 80068fe:	4621      	mov	r1, r4
 8006900:	4628      	mov	r0, r5
 8006902:	f7ff fdd3 	bl	80064ac <_fflush_r>
 8006906:	2800      	cmp	r0, #0
 8006908:	d0d9      	beq.n	80068be <__swbuf_r+0x2e>
 800690a:	e7d6      	b.n	80068ba <__swbuf_r+0x2a>

0800690c <__swsetup_r>:
 800690c:	b538      	push	{r3, r4, r5, lr}
 800690e:	4b29      	ldr	r3, [pc, #164]	@ (80069b4 <__swsetup_r+0xa8>)
 8006910:	4605      	mov	r5, r0
 8006912:	6818      	ldr	r0, [r3, #0]
 8006914:	460c      	mov	r4, r1
 8006916:	b118      	cbz	r0, 8006920 <__swsetup_r+0x14>
 8006918:	6a03      	ldr	r3, [r0, #32]
 800691a:	b90b      	cbnz	r3, 8006920 <__swsetup_r+0x14>
 800691c:	f7fe f974 	bl	8004c08 <__sinit>
 8006920:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006924:	0719      	lsls	r1, r3, #28
 8006926:	d422      	bmi.n	800696e <__swsetup_r+0x62>
 8006928:	06da      	lsls	r2, r3, #27
 800692a:	d407      	bmi.n	800693c <__swsetup_r+0x30>
 800692c:	2209      	movs	r2, #9
 800692e:	602a      	str	r2, [r5, #0]
 8006930:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006934:	81a3      	strh	r3, [r4, #12]
 8006936:	f04f 30ff 	mov.w	r0, #4294967295
 800693a:	e033      	b.n	80069a4 <__swsetup_r+0x98>
 800693c:	0758      	lsls	r0, r3, #29
 800693e:	d512      	bpl.n	8006966 <__swsetup_r+0x5a>
 8006940:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006942:	b141      	cbz	r1, 8006956 <__swsetup_r+0x4a>
 8006944:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006948:	4299      	cmp	r1, r3
 800694a:	d002      	beq.n	8006952 <__swsetup_r+0x46>
 800694c:	4628      	mov	r0, r5
 800694e:	f7ff f8af 	bl	8005ab0 <_free_r>
 8006952:	2300      	movs	r3, #0
 8006954:	6363      	str	r3, [r4, #52]	@ 0x34
 8006956:	89a3      	ldrh	r3, [r4, #12]
 8006958:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800695c:	81a3      	strh	r3, [r4, #12]
 800695e:	2300      	movs	r3, #0
 8006960:	6063      	str	r3, [r4, #4]
 8006962:	6923      	ldr	r3, [r4, #16]
 8006964:	6023      	str	r3, [r4, #0]
 8006966:	89a3      	ldrh	r3, [r4, #12]
 8006968:	f043 0308 	orr.w	r3, r3, #8
 800696c:	81a3      	strh	r3, [r4, #12]
 800696e:	6923      	ldr	r3, [r4, #16]
 8006970:	b94b      	cbnz	r3, 8006986 <__swsetup_r+0x7a>
 8006972:	89a3      	ldrh	r3, [r4, #12]
 8006974:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006978:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800697c:	d003      	beq.n	8006986 <__swsetup_r+0x7a>
 800697e:	4621      	mov	r1, r4
 8006980:	4628      	mov	r0, r5
 8006982:	f000 f883 	bl	8006a8c <__smakebuf_r>
 8006986:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800698a:	f013 0201 	ands.w	r2, r3, #1
 800698e:	d00a      	beq.n	80069a6 <__swsetup_r+0x9a>
 8006990:	2200      	movs	r2, #0
 8006992:	60a2      	str	r2, [r4, #8]
 8006994:	6962      	ldr	r2, [r4, #20]
 8006996:	4252      	negs	r2, r2
 8006998:	61a2      	str	r2, [r4, #24]
 800699a:	6922      	ldr	r2, [r4, #16]
 800699c:	b942      	cbnz	r2, 80069b0 <__swsetup_r+0xa4>
 800699e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80069a2:	d1c5      	bne.n	8006930 <__swsetup_r+0x24>
 80069a4:	bd38      	pop	{r3, r4, r5, pc}
 80069a6:	0799      	lsls	r1, r3, #30
 80069a8:	bf58      	it	pl
 80069aa:	6962      	ldrpl	r2, [r4, #20]
 80069ac:	60a2      	str	r2, [r4, #8]
 80069ae:	e7f4      	b.n	800699a <__swsetup_r+0x8e>
 80069b0:	2000      	movs	r0, #0
 80069b2:	e7f7      	b.n	80069a4 <__swsetup_r+0x98>
 80069b4:	20000010 	.word	0x20000010

080069b8 <_raise_r>:
 80069b8:	291f      	cmp	r1, #31
 80069ba:	b538      	push	{r3, r4, r5, lr}
 80069bc:	4605      	mov	r5, r0
 80069be:	460c      	mov	r4, r1
 80069c0:	d904      	bls.n	80069cc <_raise_r+0x14>
 80069c2:	2316      	movs	r3, #22
 80069c4:	6003      	str	r3, [r0, #0]
 80069c6:	f04f 30ff 	mov.w	r0, #4294967295
 80069ca:	bd38      	pop	{r3, r4, r5, pc}
 80069cc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80069ce:	b112      	cbz	r2, 80069d6 <_raise_r+0x1e>
 80069d0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80069d4:	b94b      	cbnz	r3, 80069ea <_raise_r+0x32>
 80069d6:	4628      	mov	r0, r5
 80069d8:	f000 f830 	bl	8006a3c <_getpid_r>
 80069dc:	4622      	mov	r2, r4
 80069de:	4601      	mov	r1, r0
 80069e0:	4628      	mov	r0, r5
 80069e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80069e6:	f000 b817 	b.w	8006a18 <_kill_r>
 80069ea:	2b01      	cmp	r3, #1
 80069ec:	d00a      	beq.n	8006a04 <_raise_r+0x4c>
 80069ee:	1c59      	adds	r1, r3, #1
 80069f0:	d103      	bne.n	80069fa <_raise_r+0x42>
 80069f2:	2316      	movs	r3, #22
 80069f4:	6003      	str	r3, [r0, #0]
 80069f6:	2001      	movs	r0, #1
 80069f8:	e7e7      	b.n	80069ca <_raise_r+0x12>
 80069fa:	2100      	movs	r1, #0
 80069fc:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8006a00:	4620      	mov	r0, r4
 8006a02:	4798      	blx	r3
 8006a04:	2000      	movs	r0, #0
 8006a06:	e7e0      	b.n	80069ca <_raise_r+0x12>

08006a08 <raise>:
 8006a08:	4b02      	ldr	r3, [pc, #8]	@ (8006a14 <raise+0xc>)
 8006a0a:	4601      	mov	r1, r0
 8006a0c:	6818      	ldr	r0, [r3, #0]
 8006a0e:	f7ff bfd3 	b.w	80069b8 <_raise_r>
 8006a12:	bf00      	nop
 8006a14:	20000010 	.word	0x20000010

08006a18 <_kill_r>:
 8006a18:	b538      	push	{r3, r4, r5, lr}
 8006a1a:	4d07      	ldr	r5, [pc, #28]	@ (8006a38 <_kill_r+0x20>)
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	4604      	mov	r4, r0
 8006a20:	4608      	mov	r0, r1
 8006a22:	4611      	mov	r1, r2
 8006a24:	602b      	str	r3, [r5, #0]
 8006a26:	f7fd fb27 	bl	8004078 <_kill>
 8006a2a:	1c43      	adds	r3, r0, #1
 8006a2c:	d102      	bne.n	8006a34 <_kill_r+0x1c>
 8006a2e:	682b      	ldr	r3, [r5, #0]
 8006a30:	b103      	cbz	r3, 8006a34 <_kill_r+0x1c>
 8006a32:	6023      	str	r3, [r4, #0]
 8006a34:	bd38      	pop	{r3, r4, r5, pc}
 8006a36:	bf00      	nop
 8006a38:	20000484 	.word	0x20000484

08006a3c <_getpid_r>:
 8006a3c:	f7fd bb14 	b.w	8004068 <_getpid>

08006a40 <__swhatbuf_r>:
 8006a40:	b570      	push	{r4, r5, r6, lr}
 8006a42:	460c      	mov	r4, r1
 8006a44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a48:	2900      	cmp	r1, #0
 8006a4a:	b096      	sub	sp, #88	@ 0x58
 8006a4c:	4615      	mov	r5, r2
 8006a4e:	461e      	mov	r6, r3
 8006a50:	da0d      	bge.n	8006a6e <__swhatbuf_r+0x2e>
 8006a52:	89a3      	ldrh	r3, [r4, #12]
 8006a54:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006a58:	f04f 0100 	mov.w	r1, #0
 8006a5c:	bf14      	ite	ne
 8006a5e:	2340      	movne	r3, #64	@ 0x40
 8006a60:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006a64:	2000      	movs	r0, #0
 8006a66:	6031      	str	r1, [r6, #0]
 8006a68:	602b      	str	r3, [r5, #0]
 8006a6a:	b016      	add	sp, #88	@ 0x58
 8006a6c:	bd70      	pop	{r4, r5, r6, pc}
 8006a6e:	466a      	mov	r2, sp
 8006a70:	f000 f848 	bl	8006b04 <_fstat_r>
 8006a74:	2800      	cmp	r0, #0
 8006a76:	dbec      	blt.n	8006a52 <__swhatbuf_r+0x12>
 8006a78:	9901      	ldr	r1, [sp, #4]
 8006a7a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006a7e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006a82:	4259      	negs	r1, r3
 8006a84:	4159      	adcs	r1, r3
 8006a86:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006a8a:	e7eb      	b.n	8006a64 <__swhatbuf_r+0x24>

08006a8c <__smakebuf_r>:
 8006a8c:	898b      	ldrh	r3, [r1, #12]
 8006a8e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006a90:	079d      	lsls	r5, r3, #30
 8006a92:	4606      	mov	r6, r0
 8006a94:	460c      	mov	r4, r1
 8006a96:	d507      	bpl.n	8006aa8 <__smakebuf_r+0x1c>
 8006a98:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006a9c:	6023      	str	r3, [r4, #0]
 8006a9e:	6123      	str	r3, [r4, #16]
 8006aa0:	2301      	movs	r3, #1
 8006aa2:	6163      	str	r3, [r4, #20]
 8006aa4:	b003      	add	sp, #12
 8006aa6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006aa8:	ab01      	add	r3, sp, #4
 8006aaa:	466a      	mov	r2, sp
 8006aac:	f7ff ffc8 	bl	8006a40 <__swhatbuf_r>
 8006ab0:	9f00      	ldr	r7, [sp, #0]
 8006ab2:	4605      	mov	r5, r0
 8006ab4:	4639      	mov	r1, r7
 8006ab6:	4630      	mov	r0, r6
 8006ab8:	f7ff f86e 	bl	8005b98 <_malloc_r>
 8006abc:	b948      	cbnz	r0, 8006ad2 <__smakebuf_r+0x46>
 8006abe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ac2:	059a      	lsls	r2, r3, #22
 8006ac4:	d4ee      	bmi.n	8006aa4 <__smakebuf_r+0x18>
 8006ac6:	f023 0303 	bic.w	r3, r3, #3
 8006aca:	f043 0302 	orr.w	r3, r3, #2
 8006ace:	81a3      	strh	r3, [r4, #12]
 8006ad0:	e7e2      	b.n	8006a98 <__smakebuf_r+0xc>
 8006ad2:	89a3      	ldrh	r3, [r4, #12]
 8006ad4:	6020      	str	r0, [r4, #0]
 8006ad6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ada:	81a3      	strh	r3, [r4, #12]
 8006adc:	9b01      	ldr	r3, [sp, #4]
 8006ade:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006ae2:	b15b      	cbz	r3, 8006afc <__smakebuf_r+0x70>
 8006ae4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006ae8:	4630      	mov	r0, r6
 8006aea:	f000 f81d 	bl	8006b28 <_isatty_r>
 8006aee:	b128      	cbz	r0, 8006afc <__smakebuf_r+0x70>
 8006af0:	89a3      	ldrh	r3, [r4, #12]
 8006af2:	f023 0303 	bic.w	r3, r3, #3
 8006af6:	f043 0301 	orr.w	r3, r3, #1
 8006afa:	81a3      	strh	r3, [r4, #12]
 8006afc:	89a3      	ldrh	r3, [r4, #12]
 8006afe:	431d      	orrs	r5, r3
 8006b00:	81a5      	strh	r5, [r4, #12]
 8006b02:	e7cf      	b.n	8006aa4 <__smakebuf_r+0x18>

08006b04 <_fstat_r>:
 8006b04:	b538      	push	{r3, r4, r5, lr}
 8006b06:	4d07      	ldr	r5, [pc, #28]	@ (8006b24 <_fstat_r+0x20>)
 8006b08:	2300      	movs	r3, #0
 8006b0a:	4604      	mov	r4, r0
 8006b0c:	4608      	mov	r0, r1
 8006b0e:	4611      	mov	r1, r2
 8006b10:	602b      	str	r3, [r5, #0]
 8006b12:	f7fd fb11 	bl	8004138 <_fstat>
 8006b16:	1c43      	adds	r3, r0, #1
 8006b18:	d102      	bne.n	8006b20 <_fstat_r+0x1c>
 8006b1a:	682b      	ldr	r3, [r5, #0]
 8006b1c:	b103      	cbz	r3, 8006b20 <_fstat_r+0x1c>
 8006b1e:	6023      	str	r3, [r4, #0]
 8006b20:	bd38      	pop	{r3, r4, r5, pc}
 8006b22:	bf00      	nop
 8006b24:	20000484 	.word	0x20000484

08006b28 <_isatty_r>:
 8006b28:	b538      	push	{r3, r4, r5, lr}
 8006b2a:	4d06      	ldr	r5, [pc, #24]	@ (8006b44 <_isatty_r+0x1c>)
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	4604      	mov	r4, r0
 8006b30:	4608      	mov	r0, r1
 8006b32:	602b      	str	r3, [r5, #0]
 8006b34:	f7fd fb10 	bl	8004158 <_isatty>
 8006b38:	1c43      	adds	r3, r0, #1
 8006b3a:	d102      	bne.n	8006b42 <_isatty_r+0x1a>
 8006b3c:	682b      	ldr	r3, [r5, #0]
 8006b3e:	b103      	cbz	r3, 8006b42 <_isatty_r+0x1a>
 8006b40:	6023      	str	r3, [r4, #0]
 8006b42:	bd38      	pop	{r3, r4, r5, pc}
 8006b44:	20000484 	.word	0x20000484

08006b48 <_init>:
 8006b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b4a:	bf00      	nop
 8006b4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b4e:	bc08      	pop	{r3}
 8006b50:	469e      	mov	lr, r3
 8006b52:	4770      	bx	lr

08006b54 <_fini>:
 8006b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b56:	bf00      	nop
 8006b58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b5a:	bc08      	pop	{r3}
 8006b5c:	469e      	mov	lr, r3
 8006b5e:	4770      	bx	lr
