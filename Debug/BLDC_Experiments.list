
BLDC_Experiments.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d98  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003a4  08005f28  08005f28  00006f28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080062cc  080062cc  000081cc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080062cc  080062cc  000072cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080062d4  080062d4  000081cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080062d4  080062d4  000072d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080062d8  080062d8  000072d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001cc  20000000  080062dc  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000081cc  2**0
                  CONTENTS
 10 .bss          00000268  200001cc  200001cc  000081cc  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000434  20000434  000081cc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000081cc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00003b04  00000000  00000000  000081fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000d58  00000000  00000000  0000bd00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000398  00000000  00000000  0000ca58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000299  00000000  00000000  0000cdf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000185ab  00000000  00000000  0000d089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00004114  00000000  00000000  00025634  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00085755  00000000  00000000  00029748  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000aee9d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001de0  00000000  00000000  000aeee0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000067  00000000  00000000  000b0cc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001cc 	.word	0x200001cc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005f10 	.word	0x08005f10

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d0 	.word	0x200001d0
 80001cc:	08005f10 	.word	0x08005f10

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_ldivmod>:
 8000ba8:	b97b      	cbnz	r3, 8000bca <__aeabi_ldivmod+0x22>
 8000baa:	b972      	cbnz	r2, 8000bca <__aeabi_ldivmod+0x22>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bfbe      	ittt	lt
 8000bb0:	2000      	movlt	r0, #0
 8000bb2:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000bb6:	e006      	blt.n	8000bc6 <__aeabi_ldivmod+0x1e>
 8000bb8:	bf08      	it	eq
 8000bba:	2800      	cmpeq	r0, #0
 8000bbc:	bf1c      	itt	ne
 8000bbe:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000bc2:	f04f 30ff 	movne.w	r0, #4294967295
 8000bc6:	f000 b9d3 	b.w	8000f70 <__aeabi_idiv0>
 8000bca:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bce:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd2:	2900      	cmp	r1, #0
 8000bd4:	db09      	blt.n	8000bea <__aeabi_ldivmod+0x42>
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	db1a      	blt.n	8000c10 <__aeabi_ldivmod+0x68>
 8000bda:	f000 f84d 	bl	8000c78 <__udivmoddi4>
 8000bde:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be6:	b004      	add	sp, #16
 8000be8:	4770      	bx	lr
 8000bea:	4240      	negs	r0, r0
 8000bec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	db1b      	blt.n	8000c2c <__aeabi_ldivmod+0x84>
 8000bf4:	f000 f840 	bl	8000c78 <__udivmoddi4>
 8000bf8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bfc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c00:	b004      	add	sp, #16
 8000c02:	4240      	negs	r0, r0
 8000c04:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c08:	4252      	negs	r2, r2
 8000c0a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c0e:	4770      	bx	lr
 8000c10:	4252      	negs	r2, r2
 8000c12:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c16:	f000 f82f 	bl	8000c78 <__udivmoddi4>
 8000c1a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c1e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c22:	b004      	add	sp, #16
 8000c24:	4240      	negs	r0, r0
 8000c26:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c2a:	4770      	bx	lr
 8000c2c:	4252      	negs	r2, r2
 8000c2e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c32:	f000 f821 	bl	8000c78 <__udivmoddi4>
 8000c36:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c3a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c3e:	b004      	add	sp, #16
 8000c40:	4252      	negs	r2, r2
 8000c42:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c46:	4770      	bx	lr

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b988 	b.w	8000f70 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	468e      	mov	lr, r1
 8000c80:	4604      	mov	r4, r0
 8000c82:	4688      	mov	r8, r1
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d14a      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4617      	mov	r7, r2
 8000c8c:	d962      	bls.n	8000d54 <__udivmoddi4+0xdc>
 8000c8e:	fab2 f682 	clz	r6, r2
 8000c92:	b14e      	cbz	r6, 8000ca8 <__udivmoddi4+0x30>
 8000c94:	f1c6 0320 	rsb	r3, r6, #32
 8000c98:	fa01 f806 	lsl.w	r8, r1, r6
 8000c9c:	fa20 f303 	lsr.w	r3, r0, r3
 8000ca0:	40b7      	lsls	r7, r6
 8000ca2:	ea43 0808 	orr.w	r8, r3, r8
 8000ca6:	40b4      	lsls	r4, r6
 8000ca8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cac:	fa1f fc87 	uxth.w	ip, r7
 8000cb0:	fbb8 f1fe 	udiv	r1, r8, lr
 8000cb4:	0c23      	lsrs	r3, r4, #16
 8000cb6:	fb0e 8811 	mls	r8, lr, r1, r8
 8000cba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cbe:	fb01 f20c 	mul.w	r2, r1, ip
 8000cc2:	429a      	cmp	r2, r3
 8000cc4:	d909      	bls.n	8000cda <__udivmoddi4+0x62>
 8000cc6:	18fb      	adds	r3, r7, r3
 8000cc8:	f101 30ff 	add.w	r0, r1, #4294967295
 8000ccc:	f080 80ea 	bcs.w	8000ea4 <__udivmoddi4+0x22c>
 8000cd0:	429a      	cmp	r2, r3
 8000cd2:	f240 80e7 	bls.w	8000ea4 <__udivmoddi4+0x22c>
 8000cd6:	3902      	subs	r1, #2
 8000cd8:	443b      	add	r3, r7
 8000cda:	1a9a      	subs	r2, r3, r2
 8000cdc:	b2a3      	uxth	r3, r4
 8000cde:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ce2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ce6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cea:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cee:	459c      	cmp	ip, r3
 8000cf0:	d909      	bls.n	8000d06 <__udivmoddi4+0x8e>
 8000cf2:	18fb      	adds	r3, r7, r3
 8000cf4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cf8:	f080 80d6 	bcs.w	8000ea8 <__udivmoddi4+0x230>
 8000cfc:	459c      	cmp	ip, r3
 8000cfe:	f240 80d3 	bls.w	8000ea8 <__udivmoddi4+0x230>
 8000d02:	443b      	add	r3, r7
 8000d04:	3802      	subs	r0, #2
 8000d06:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d0a:	eba3 030c 	sub.w	r3, r3, ip
 8000d0e:	2100      	movs	r1, #0
 8000d10:	b11d      	cbz	r5, 8000d1a <__udivmoddi4+0xa2>
 8000d12:	40f3      	lsrs	r3, r6
 8000d14:	2200      	movs	r2, #0
 8000d16:	e9c5 3200 	strd	r3, r2, [r5]
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d905      	bls.n	8000d2e <__udivmoddi4+0xb6>
 8000d22:	b10d      	cbz	r5, 8000d28 <__udivmoddi4+0xb0>
 8000d24:	e9c5 0100 	strd	r0, r1, [r5]
 8000d28:	2100      	movs	r1, #0
 8000d2a:	4608      	mov	r0, r1
 8000d2c:	e7f5      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d2e:	fab3 f183 	clz	r1, r3
 8000d32:	2900      	cmp	r1, #0
 8000d34:	d146      	bne.n	8000dc4 <__udivmoddi4+0x14c>
 8000d36:	4573      	cmp	r3, lr
 8000d38:	d302      	bcc.n	8000d40 <__udivmoddi4+0xc8>
 8000d3a:	4282      	cmp	r2, r0
 8000d3c:	f200 8105 	bhi.w	8000f4a <__udivmoddi4+0x2d2>
 8000d40:	1a84      	subs	r4, r0, r2
 8000d42:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d46:	2001      	movs	r0, #1
 8000d48:	4690      	mov	r8, r2
 8000d4a:	2d00      	cmp	r5, #0
 8000d4c:	d0e5      	beq.n	8000d1a <__udivmoddi4+0xa2>
 8000d4e:	e9c5 4800 	strd	r4, r8, [r5]
 8000d52:	e7e2      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d54:	2a00      	cmp	r2, #0
 8000d56:	f000 8090 	beq.w	8000e7a <__udivmoddi4+0x202>
 8000d5a:	fab2 f682 	clz	r6, r2
 8000d5e:	2e00      	cmp	r6, #0
 8000d60:	f040 80a4 	bne.w	8000eac <__udivmoddi4+0x234>
 8000d64:	1a8a      	subs	r2, r1, r2
 8000d66:	0c03      	lsrs	r3, r0, #16
 8000d68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d6c:	b280      	uxth	r0, r0
 8000d6e:	b2bc      	uxth	r4, r7
 8000d70:	2101      	movs	r1, #1
 8000d72:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d76:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d7a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d7e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d82:	429a      	cmp	r2, r3
 8000d84:	d907      	bls.n	8000d96 <__udivmoddi4+0x11e>
 8000d86:	18fb      	adds	r3, r7, r3
 8000d88:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d8c:	d202      	bcs.n	8000d94 <__udivmoddi4+0x11c>
 8000d8e:	429a      	cmp	r2, r3
 8000d90:	f200 80e0 	bhi.w	8000f54 <__udivmoddi4+0x2dc>
 8000d94:	46c4      	mov	ip, r8
 8000d96:	1a9b      	subs	r3, r3, r2
 8000d98:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d9c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000da0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000da4:	fb02 f404 	mul.w	r4, r2, r4
 8000da8:	429c      	cmp	r4, r3
 8000daa:	d907      	bls.n	8000dbc <__udivmoddi4+0x144>
 8000dac:	18fb      	adds	r3, r7, r3
 8000dae:	f102 30ff 	add.w	r0, r2, #4294967295
 8000db2:	d202      	bcs.n	8000dba <__udivmoddi4+0x142>
 8000db4:	429c      	cmp	r4, r3
 8000db6:	f200 80ca 	bhi.w	8000f4e <__udivmoddi4+0x2d6>
 8000dba:	4602      	mov	r2, r0
 8000dbc:	1b1b      	subs	r3, r3, r4
 8000dbe:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000dc2:	e7a5      	b.n	8000d10 <__udivmoddi4+0x98>
 8000dc4:	f1c1 0620 	rsb	r6, r1, #32
 8000dc8:	408b      	lsls	r3, r1
 8000dca:	fa22 f706 	lsr.w	r7, r2, r6
 8000dce:	431f      	orrs	r7, r3
 8000dd0:	fa0e f401 	lsl.w	r4, lr, r1
 8000dd4:	fa20 f306 	lsr.w	r3, r0, r6
 8000dd8:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ddc:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000de0:	4323      	orrs	r3, r4
 8000de2:	fa00 f801 	lsl.w	r8, r0, r1
 8000de6:	fa1f fc87 	uxth.w	ip, r7
 8000dea:	fbbe f0f9 	udiv	r0, lr, r9
 8000dee:	0c1c      	lsrs	r4, r3, #16
 8000df0:	fb09 ee10 	mls	lr, r9, r0, lr
 8000df4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000df8:	fb00 fe0c 	mul.w	lr, r0, ip
 8000dfc:	45a6      	cmp	lr, r4
 8000dfe:	fa02 f201 	lsl.w	r2, r2, r1
 8000e02:	d909      	bls.n	8000e18 <__udivmoddi4+0x1a0>
 8000e04:	193c      	adds	r4, r7, r4
 8000e06:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e0a:	f080 809c 	bcs.w	8000f46 <__udivmoddi4+0x2ce>
 8000e0e:	45a6      	cmp	lr, r4
 8000e10:	f240 8099 	bls.w	8000f46 <__udivmoddi4+0x2ce>
 8000e14:	3802      	subs	r0, #2
 8000e16:	443c      	add	r4, r7
 8000e18:	eba4 040e 	sub.w	r4, r4, lr
 8000e1c:	fa1f fe83 	uxth.w	lr, r3
 8000e20:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e24:	fb09 4413 	mls	r4, r9, r3, r4
 8000e28:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e2c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e30:	45a4      	cmp	ip, r4
 8000e32:	d908      	bls.n	8000e46 <__udivmoddi4+0x1ce>
 8000e34:	193c      	adds	r4, r7, r4
 8000e36:	f103 3eff 	add.w	lr, r3, #4294967295
 8000e3a:	f080 8082 	bcs.w	8000f42 <__udivmoddi4+0x2ca>
 8000e3e:	45a4      	cmp	ip, r4
 8000e40:	d97f      	bls.n	8000f42 <__udivmoddi4+0x2ca>
 8000e42:	3b02      	subs	r3, #2
 8000e44:	443c      	add	r4, r7
 8000e46:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e4a:	eba4 040c 	sub.w	r4, r4, ip
 8000e4e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e52:	4564      	cmp	r4, ip
 8000e54:	4673      	mov	r3, lr
 8000e56:	46e1      	mov	r9, ip
 8000e58:	d362      	bcc.n	8000f20 <__udivmoddi4+0x2a8>
 8000e5a:	d05f      	beq.n	8000f1c <__udivmoddi4+0x2a4>
 8000e5c:	b15d      	cbz	r5, 8000e76 <__udivmoddi4+0x1fe>
 8000e5e:	ebb8 0203 	subs.w	r2, r8, r3
 8000e62:	eb64 0409 	sbc.w	r4, r4, r9
 8000e66:	fa04 f606 	lsl.w	r6, r4, r6
 8000e6a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e6e:	431e      	orrs	r6, r3
 8000e70:	40cc      	lsrs	r4, r1
 8000e72:	e9c5 6400 	strd	r6, r4, [r5]
 8000e76:	2100      	movs	r1, #0
 8000e78:	e74f      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000e7a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e7e:	0c01      	lsrs	r1, r0, #16
 8000e80:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e84:	b280      	uxth	r0, r0
 8000e86:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e8a:	463b      	mov	r3, r7
 8000e8c:	4638      	mov	r0, r7
 8000e8e:	463c      	mov	r4, r7
 8000e90:	46b8      	mov	r8, r7
 8000e92:	46be      	mov	lr, r7
 8000e94:	2620      	movs	r6, #32
 8000e96:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e9a:	eba2 0208 	sub.w	r2, r2, r8
 8000e9e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000ea2:	e766      	b.n	8000d72 <__udivmoddi4+0xfa>
 8000ea4:	4601      	mov	r1, r0
 8000ea6:	e718      	b.n	8000cda <__udivmoddi4+0x62>
 8000ea8:	4610      	mov	r0, r2
 8000eaa:	e72c      	b.n	8000d06 <__udivmoddi4+0x8e>
 8000eac:	f1c6 0220 	rsb	r2, r6, #32
 8000eb0:	fa2e f302 	lsr.w	r3, lr, r2
 8000eb4:	40b7      	lsls	r7, r6
 8000eb6:	40b1      	lsls	r1, r6
 8000eb8:	fa20 f202 	lsr.w	r2, r0, r2
 8000ebc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ec0:	430a      	orrs	r2, r1
 8000ec2:	fbb3 f8fe 	udiv	r8, r3, lr
 8000ec6:	b2bc      	uxth	r4, r7
 8000ec8:	fb0e 3318 	mls	r3, lr, r8, r3
 8000ecc:	0c11      	lsrs	r1, r2, #16
 8000ece:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed2:	fb08 f904 	mul.w	r9, r8, r4
 8000ed6:	40b0      	lsls	r0, r6
 8000ed8:	4589      	cmp	r9, r1
 8000eda:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000ede:	b280      	uxth	r0, r0
 8000ee0:	d93e      	bls.n	8000f60 <__udivmoddi4+0x2e8>
 8000ee2:	1879      	adds	r1, r7, r1
 8000ee4:	f108 3cff 	add.w	ip, r8, #4294967295
 8000ee8:	d201      	bcs.n	8000eee <__udivmoddi4+0x276>
 8000eea:	4589      	cmp	r9, r1
 8000eec:	d81f      	bhi.n	8000f2e <__udivmoddi4+0x2b6>
 8000eee:	eba1 0109 	sub.w	r1, r1, r9
 8000ef2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ef6:	fb09 f804 	mul.w	r8, r9, r4
 8000efa:	fb0e 1119 	mls	r1, lr, r9, r1
 8000efe:	b292      	uxth	r2, r2
 8000f00:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f04:	4542      	cmp	r2, r8
 8000f06:	d229      	bcs.n	8000f5c <__udivmoddi4+0x2e4>
 8000f08:	18ba      	adds	r2, r7, r2
 8000f0a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f0e:	d2c4      	bcs.n	8000e9a <__udivmoddi4+0x222>
 8000f10:	4542      	cmp	r2, r8
 8000f12:	d2c2      	bcs.n	8000e9a <__udivmoddi4+0x222>
 8000f14:	f1a9 0102 	sub.w	r1, r9, #2
 8000f18:	443a      	add	r2, r7
 8000f1a:	e7be      	b.n	8000e9a <__udivmoddi4+0x222>
 8000f1c:	45f0      	cmp	r8, lr
 8000f1e:	d29d      	bcs.n	8000e5c <__udivmoddi4+0x1e4>
 8000f20:	ebbe 0302 	subs.w	r3, lr, r2
 8000f24:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f28:	3801      	subs	r0, #1
 8000f2a:	46e1      	mov	r9, ip
 8000f2c:	e796      	b.n	8000e5c <__udivmoddi4+0x1e4>
 8000f2e:	eba7 0909 	sub.w	r9, r7, r9
 8000f32:	4449      	add	r1, r9
 8000f34:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f38:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f3c:	fb09 f804 	mul.w	r8, r9, r4
 8000f40:	e7db      	b.n	8000efa <__udivmoddi4+0x282>
 8000f42:	4673      	mov	r3, lr
 8000f44:	e77f      	b.n	8000e46 <__udivmoddi4+0x1ce>
 8000f46:	4650      	mov	r0, sl
 8000f48:	e766      	b.n	8000e18 <__udivmoddi4+0x1a0>
 8000f4a:	4608      	mov	r0, r1
 8000f4c:	e6fd      	b.n	8000d4a <__udivmoddi4+0xd2>
 8000f4e:	443b      	add	r3, r7
 8000f50:	3a02      	subs	r2, #2
 8000f52:	e733      	b.n	8000dbc <__udivmoddi4+0x144>
 8000f54:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f58:	443b      	add	r3, r7
 8000f5a:	e71c      	b.n	8000d96 <__udivmoddi4+0x11e>
 8000f5c:	4649      	mov	r1, r9
 8000f5e:	e79c      	b.n	8000e9a <__udivmoddi4+0x222>
 8000f60:	eba1 0109 	sub.w	r1, r1, r9
 8000f64:	46c4      	mov	ip, r8
 8000f66:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f6a:	fb09 f804 	mul.w	r8, r9, r4
 8000f6e:	e7c4      	b.n	8000efa <__udivmoddi4+0x282>

08000f70 <__aeabi_idiv0>:
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop

08000f74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f78:	4b06      	ldr	r3, [pc, #24]	@ (8000f94 <SystemInit+0x20>)
 8000f7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f7e:	4a05      	ldr	r2, [pc, #20]	@ (8000f94 <SystemInit+0x20>)
 8000f80:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f84:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f88:	bf00      	nop
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop
 8000f94:	e000ed00 	.word	0xe000ed00

08000f98 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b087      	sub	sp, #28
 8000f9c:	af00      	add	r7, sp, #0
  uint32_t tmp, pllvco, pllp, pllsource, pllm;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000f9e:	4b34      	ldr	r3, [pc, #208]	@ (8001070 <SystemCoreClockUpdate+0xd8>)
 8000fa0:	689b      	ldr	r3, [r3, #8]
 8000fa2:	f003 030c 	and.w	r3, r3, #12
 8000fa6:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8000fa8:	693b      	ldr	r3, [r7, #16]
 8000faa:	2b08      	cmp	r3, #8
 8000fac:	d011      	beq.n	8000fd2 <SystemCoreClockUpdate+0x3a>
 8000fae:	693b      	ldr	r3, [r7, #16]
 8000fb0:	2b08      	cmp	r3, #8
 8000fb2:	d844      	bhi.n	800103e <SystemCoreClockUpdate+0xa6>
 8000fb4:	693b      	ldr	r3, [r7, #16]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d003      	beq.n	8000fc2 <SystemCoreClockUpdate+0x2a>
 8000fba:	693b      	ldr	r3, [r7, #16]
 8000fbc:	2b04      	cmp	r3, #4
 8000fbe:	d004      	beq.n	8000fca <SystemCoreClockUpdate+0x32>
 8000fc0:	e03d      	b.n	800103e <SystemCoreClockUpdate+0xa6>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8000fc2:	4b2c      	ldr	r3, [pc, #176]	@ (8001074 <SystemCoreClockUpdate+0xdc>)
 8000fc4:	4a2c      	ldr	r2, [pc, #176]	@ (8001078 <SystemCoreClockUpdate+0xe0>)
 8000fc6:	601a      	str	r2, [r3, #0]
      break;
 8000fc8:	e03d      	b.n	8001046 <SystemCoreClockUpdate+0xae>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8000fca:	4b2a      	ldr	r3, [pc, #168]	@ (8001074 <SystemCoreClockUpdate+0xdc>)
 8000fcc:	4a2b      	ldr	r2, [pc, #172]	@ (800107c <SystemCoreClockUpdate+0xe4>)
 8000fce:	601a      	str	r2, [r3, #0]
      break;
 8000fd0:	e039      	b.n	8001046 <SystemCoreClockUpdate+0xae>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8000fd2:	4b27      	ldr	r3, [pc, #156]	@ (8001070 <SystemCoreClockUpdate+0xd8>)
 8000fd4:	685b      	ldr	r3, [r3, #4]
 8000fd6:	0d9b      	lsrs	r3, r3, #22
 8000fd8:	f003 0301 	and.w	r3, r3, #1
 8000fdc:	60fb      	str	r3, [r7, #12]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000fde:	4b24      	ldr	r3, [pc, #144]	@ (8001070 <SystemCoreClockUpdate+0xd8>)
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000fe6:	60bb      	str	r3, [r7, #8]
      
      if (pllsource != 0)
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d00c      	beq.n	8001008 <SystemCoreClockUpdate+0x70>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000fee:	4a23      	ldr	r2, [pc, #140]	@ (800107c <SystemCoreClockUpdate+0xe4>)
 8000ff0:	68bb      	ldr	r3, [r7, #8]
 8000ff2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ff6:	4a1e      	ldr	r2, [pc, #120]	@ (8001070 <SystemCoreClockUpdate+0xd8>)
 8000ff8:	6852      	ldr	r2, [r2, #4]
 8000ffa:	0992      	lsrs	r2, r2, #6
 8000ffc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001000:	fb02 f303 	mul.w	r3, r2, r3
 8001004:	617b      	str	r3, [r7, #20]
 8001006:	e00b      	b.n	8001020 <SystemCoreClockUpdate+0x88>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8001008:	4a1b      	ldr	r2, [pc, #108]	@ (8001078 <SystemCoreClockUpdate+0xe0>)
 800100a:	68bb      	ldr	r3, [r7, #8]
 800100c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001010:	4a17      	ldr	r2, [pc, #92]	@ (8001070 <SystemCoreClockUpdate+0xd8>)
 8001012:	6852      	ldr	r2, [r2, #4]
 8001014:	0992      	lsrs	r2, r2, #6
 8001016:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800101a:	fb02 f303 	mul.w	r3, r2, r3
 800101e:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8001020:	4b13      	ldr	r3, [pc, #76]	@ (8001070 <SystemCoreClockUpdate+0xd8>)
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	0c1b      	lsrs	r3, r3, #16
 8001026:	f003 0303 	and.w	r3, r3, #3
 800102a:	3301      	adds	r3, #1
 800102c:	005b      	lsls	r3, r3, #1
 800102e:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllp;
 8001030:	697a      	ldr	r2, [r7, #20]
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	fbb2 f3f3 	udiv	r3, r2, r3
 8001038:	4a0e      	ldr	r2, [pc, #56]	@ (8001074 <SystemCoreClockUpdate+0xdc>)
 800103a:	6013      	str	r3, [r2, #0]
      break;
 800103c:	e003      	b.n	8001046 <SystemCoreClockUpdate+0xae>
    default:
      SystemCoreClock = HSI_VALUE;
 800103e:	4b0d      	ldr	r3, [pc, #52]	@ (8001074 <SystemCoreClockUpdate+0xdc>)
 8001040:	4a0d      	ldr	r2, [pc, #52]	@ (8001078 <SystemCoreClockUpdate+0xe0>)
 8001042:	601a      	str	r2, [r3, #0]
      break;
 8001044:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8001046:	4b0a      	ldr	r3, [pc, #40]	@ (8001070 <SystemCoreClockUpdate+0xd8>)
 8001048:	689b      	ldr	r3, [r3, #8]
 800104a:	091b      	lsrs	r3, r3, #4
 800104c:	f003 030f 	and.w	r3, r3, #15
 8001050:	4a0b      	ldr	r2, [pc, #44]	@ (8001080 <SystemCoreClockUpdate+0xe8>)
 8001052:	5cd3      	ldrb	r3, [r2, r3]
 8001054:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8001056:	4b07      	ldr	r3, [pc, #28]	@ (8001074 <SystemCoreClockUpdate+0xdc>)
 8001058:	681a      	ldr	r2, [r3, #0]
 800105a:	693b      	ldr	r3, [r7, #16]
 800105c:	fa22 f303 	lsr.w	r3, r2, r3
 8001060:	4a04      	ldr	r2, [pc, #16]	@ (8001074 <SystemCoreClockUpdate+0xdc>)
 8001062:	6013      	str	r3, [r2, #0]
}
 8001064:	bf00      	nop
 8001066:	371c      	adds	r7, #28
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr
 8001070:	40023800 	.word	0x40023800
 8001074:	20000000 	.word	0x20000000
 8001078:	00f42400 	.word	0x00f42400
 800107c:	016e3600 	.word	0x016e3600
 8001080:	08005f28 	.word	0x08005f28

08001084 <q31_mul>:
#define Q31_MARGIN_2PCT Q31_FRAC(1, 50) // 0.02
#define Q31_INV_TWOPI Q31_FRAC(159154943, 1000000000) // 1/(2π) ≈ 0.159154943


static inline int32_t q31_mul(int32_t a, int32_t b)
{
 8001084:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 8001088:	b085      	sub	sp, #20
 800108a:	af00      	add	r7, sp, #0
 800108c:	6078      	str	r0, [r7, #4]
 800108e:	6039      	str	r1, [r7, #0]
	int64_t t = (int64_t) a * (int64_t) b;
 8001090:	6879      	ldr	r1, [r7, #4]
 8001092:	17c8      	asrs	r0, r1, #31
 8001094:	4688      	mov	r8, r1
 8001096:	4681      	mov	r9, r0
 8001098:	6839      	ldr	r1, [r7, #0]
 800109a:	17c8      	asrs	r0, r1, #31
 800109c:	460c      	mov	r4, r1
 800109e:	4605      	mov	r5, r0
 80010a0:	fb04 f009 	mul.w	r0, r4, r9
 80010a4:	fb08 f105 	mul.w	r1, r8, r5
 80010a8:	4401      	add	r1, r0
 80010aa:	fba8 2304 	umull	r2, r3, r8, r4
 80010ae:	4419      	add	r1, r3
 80010b0:	460b      	mov	r3, r1
 80010b2:	e9c7 2302 	strd	r2, r3, [r7, #8]
 80010b6:	e9c7 2302 	strd	r2, r3, [r7, #8]
	t >>= 31;
 80010ba:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80010be:	f04f 0200 	mov.w	r2, #0
 80010c2:	f04f 0300 	mov.w	r3, #0
 80010c6:	0fc2      	lsrs	r2, r0, #31
 80010c8:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 80010cc:	17cb      	asrs	r3, r1, #31
 80010ce:	e9c7 2302 	strd	r2, r3, [r7, #8]
	if (t > 0x7FFFFFFFLL)
 80010d2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80010d6:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80010da:	f173 0300 	sbcs.w	r3, r3, #0
 80010de:	db05      	blt.n	80010ec <q31_mul+0x68>
		t = 0x7FFFFFFFLL;
 80010e0:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 80010e4:	f04f 0300 	mov.w	r3, #0
 80010e8:	e9c7 2302 	strd	r2, r3, [r7, #8]
	if (t < -0x80000000LL)
 80010ec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80010f0:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80010f4:	f173 33ff 	sbcs.w	r3, r3, #4294967295
 80010f8:	da05      	bge.n	8001106 <q31_mul+0x82>
		t = -0x80000000LL;
 80010fa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80010fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001102:	e9c7 2302 	strd	r2, r3, [r7, #8]
	return (int32_t) t;
 8001106:	68bb      	ldr	r3, [r7, #8]
}
 8001108:	4618      	mov	r0, r3
 800110a:	3714      	adds	r7, #20
 800110c:	46bd      	mov	sp, r7
 800110e:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 8001112:	4770      	bx	lr

08001114 <q31_add_sat>:
		t = -0x80000000LL;
	return (int32_t) t;
}

static inline int32_t q31_add_sat(int32_t a, int32_t b)
{
 8001114:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 8001118:	b085      	sub	sp, #20
 800111a:	af00      	add	r7, sp, #0
 800111c:	6078      	str	r0, [r7, #4]
 800111e:	6039      	str	r1, [r7, #0]
	int64_t t = (int64_t) a + (int64_t) b;
 8001120:	6879      	ldr	r1, [r7, #4]
 8001122:	17c8      	asrs	r0, r1, #31
 8001124:	460c      	mov	r4, r1
 8001126:	4605      	mov	r5, r0
 8001128:	6839      	ldr	r1, [r7, #0]
 800112a:	17c8      	asrs	r0, r1, #31
 800112c:	460a      	mov	r2, r1
 800112e:	4603      	mov	r3, r0
 8001130:	eb14 0802 	adds.w	r8, r4, r2
 8001134:	eb45 0903 	adc.w	r9, r5, r3
 8001138:	e9c7 8902 	strd	r8, r9, [r7, #8]
	if (t > 0x7FFFFFFFLL)
 800113c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001140:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8001144:	f173 0300 	sbcs.w	r3, r3, #0
 8001148:	db05      	blt.n	8001156 <q31_add_sat+0x42>
		t = 0x7FFFFFFFLL;
 800114a:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 800114e:	f04f 0300 	mov.w	r3, #0
 8001152:	e9c7 2302 	strd	r2, r3, [r7, #8]
	if (t < -0x80000000LL)
 8001156:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800115a:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 800115e:	f173 33ff 	sbcs.w	r3, r3, #4294967295
 8001162:	da05      	bge.n	8001170 <q31_add_sat+0x5c>
		t = -0x80000000LL;
 8001164:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001168:	f04f 33ff 	mov.w	r3, #4294967295
 800116c:	e9c7 2302 	strd	r2, r3, [r7, #8]
	return (int32_t) t;
 8001170:	68bb      	ldr	r3, [r7, #8]
}
 8001172:	4618      	mov	r0, r3
 8001174:	3714      	adds	r7, #20
 8001176:	46bd      	mov	sp, r7
 8001178:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 800117c:	4770      	bx	lr

0800117e <q31_sub_sat>:

static inline int32_t q31_sub_sat(int32_t a, int32_t b)
{
 800117e:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 8001182:	b085      	sub	sp, #20
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
 8001188:	6039      	str	r1, [r7, #0]
	int64_t t = (int64_t) a - (int64_t) b;
 800118a:	6879      	ldr	r1, [r7, #4]
 800118c:	17c8      	asrs	r0, r1, #31
 800118e:	460c      	mov	r4, r1
 8001190:	4605      	mov	r5, r0
 8001192:	6839      	ldr	r1, [r7, #0]
 8001194:	17c8      	asrs	r0, r1, #31
 8001196:	460a      	mov	r2, r1
 8001198:	4603      	mov	r3, r0
 800119a:	ebb4 0802 	subs.w	r8, r4, r2
 800119e:	eb65 0903 	sbc.w	r9, r5, r3
 80011a2:	e9c7 8902 	strd	r8, r9, [r7, #8]
	if (t > 0x7FFFFFFFLL)
 80011a6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80011aa:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80011ae:	f173 0300 	sbcs.w	r3, r3, #0
 80011b2:	db05      	blt.n	80011c0 <q31_sub_sat+0x42>
		t = 0x7FFFFFFFLL;
 80011b4:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 80011b8:	f04f 0300 	mov.w	r3, #0
 80011bc:	e9c7 2302 	strd	r2, r3, [r7, #8]
	if (t < -0x80000000LL)
 80011c0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80011c4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80011c8:	f173 33ff 	sbcs.w	r3, r3, #4294967295
 80011cc:	da05      	bge.n	80011da <q31_sub_sat+0x5c>
		t = -0x80000000LL;
 80011ce:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80011d2:	f04f 33ff 	mov.w	r3, #4294967295
 80011d6:	e9c7 2302 	strd	r2, r3, [r7, #8]
	return (int32_t) t;
 80011da:	68bb      	ldr	r3, [r7, #8]
}
 80011dc:	4618      	mov	r0, r3
 80011de:	3714      	adds	r7, #20
 80011e0:	46bd      	mov	sp, r7
 80011e2:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 80011e6:	4770      	bx	lr

080011e8 <angle_wrap_q31>:

// Q31の"turn"表現（1.0=2π）で ±1.0 の範囲に折り返す
static inline int32_t angle_wrap_q31(int32_t th)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b083      	sub	sp, #12
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
	if (th > Q31_ONE)
		th -= (Q31_ONE + 1);
	else if (th < -(Q31_ONE))
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80011f6:	d103      	bne.n	8001200 <angle_wrap_q31+0x18>
		th += (Q31_ONE + 1);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 80011fe:	607b      	str	r3, [r7, #4]
	return th;
 8001200:	687b      	ldr	r3, [r7, #4]
}
 8001202:	4618      	mov	r0, r3
 8001204:	370c      	adds	r7, #12
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr

0800120e <q31_abs>:
static int32_t  s_th_forced = 0;            // 強制角 (turn-Q31)
static int32_t  s_omg_step  = 0;            // 1周期あたりのΔθ
static int32_t  s_iq_cmd    = 0;            // 開ループ中の Iq 指令
static uint32_t s_tick      = 0;            // 経過tick

static inline int32_t q31_abs(int32_t x){ return (x>=0)?x:-(x); }
 800120e:	b480      	push	{r7}
 8001210:	b083      	sub	sp, #12
 8001212:	af00      	add	r7, sp, #0
 8001214:	6078      	str	r0, [r7, #4]
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	2b00      	cmp	r3, #0
 800121a:	bfb8      	it	lt
 800121c:	425b      	neglt	r3, r3
 800121e:	4618      	mov	r0, r3
 8001220:	370c      	adds	r7, #12
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr

0800122a <q31_min>:
static inline int32_t q31_min(int32_t a,int32_t b){ return (a<b)?a:b; }
 800122a:	b480      	push	{r7}
 800122c:	b083      	sub	sp, #12
 800122e:	af00      	add	r7, sp, #0
 8001230:	6078      	str	r0, [r7, #4]
 8001232:	6039      	str	r1, [r7, #0]
 8001234:	683a      	ldr	r2, [r7, #0]
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	4293      	cmp	r3, r2
 800123a:	bfa8      	it	ge
 800123c:	4613      	movge	r3, r2
 800123e:	4618      	mov	r0, r3
 8001240:	370c      	adds	r7, #12
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr

0800124a <emf_strength_q31>:
static inline int32_t q31_max(int32_t a,int32_t b){ return (a>b)?a:b; }

// 推定BEMFの強さの簡易指標: |e| ≈ max(|eα|,|eβ|)
static inline int32_t emf_strength_q31(const BEMF_PLL_t* o){
 800124a:	b580      	push	{r7, lr}
 800124c:	b084      	sub	sp, #16
 800124e:	af00      	add	r7, sp, #0
 8001250:	6078      	str	r0, [r7, #4]
    int32_t ea = q31_abs(o->e_alpha_q31);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001256:	4618      	mov	r0, r3
 8001258:	f7ff ffd9 	bl	800120e <q31_abs>
 800125c:	60f8      	str	r0, [r7, #12]
    int32_t eb = q31_abs(o->e_beta_q31);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001262:	4618      	mov	r0, r3
 8001264:	f7ff ffd3 	bl	800120e <q31_abs>
 8001268:	60b8      	str	r0, [r7, #8]
    return (ea>eb)?ea:eb;
 800126a:	68ba      	ldr	r2, [r7, #8]
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	4293      	cmp	r3, r2
 8001270:	bfb8      	it	lt
 8001272:	4613      	movlt	r3, r2
}
 8001274:	4618      	mov	r0, r3
 8001276:	3710      	adds	r7, #16
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}

0800127c <atan_turn_i_q31>:


static inline int32_t atan_turn_i_q31(int i)
{
 800127c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001280:	b090      	sub	sp, #64	@ 0x40
 8001282:	af00      	add	r7, sp, #0
 8001284:	6178      	str	r0, [r7, #20]
	if (i <= k_atan_anchor[0].i)
 8001286:	2300      	movs	r3, #0
 8001288:	461a      	mov	r2, r3
 800128a:	697b      	ldr	r3, [r7, #20]
 800128c:	4293      	cmp	r3, r2
 800128e:	dc02      	bgt.n	8001296 <atan_turn_i_q31+0x1a>
		return k_atan_anchor[0].v;
 8001290:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8001294:	e06b      	b.n	800136e <atan_turn_i_q31+0xf2>
	if (i >= k_atan_anchor[3].i)
 8001296:	230c      	movs	r3, #12
 8001298:	461a      	mov	r2, r3
 800129a:	697b      	ldr	r3, [r7, #20]
 800129c:	4293      	cmp	r3, r2
 800129e:	db01      	blt.n	80012a4 <atan_turn_i_q31+0x28>
		return k_atan_anchor[3].v;
 80012a0:	4b35      	ldr	r3, [pc, #212]	@ (8001378 <atan_turn_i_q31+0xfc>)
 80012a2:	e064      	b.n	800136e <atan_turn_i_q31+0xf2>
	for (int k = 0; k < 3; k++)
 80012a4:	2300      	movs	r3, #0
 80012a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80012a8:	e05d      	b.n	8001366 <atan_turn_i_q31+0xea>
	{
		int i0 = k_atan_anchor[k].i;
 80012aa:	4a34      	ldr	r2, [pc, #208]	@ (800137c <atan_turn_i_q31+0x100>)
 80012ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80012ae:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 80012b2:	63bb      	str	r3, [r7, #56]	@ 0x38
		int i1 = k_atan_anchor[k + 1].i;
 80012b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80012b6:	3301      	adds	r3, #1
 80012b8:	4a30      	ldr	r2, [pc, #192]	@ (800137c <atan_turn_i_q31+0x100>)
 80012ba:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 80012be:	637b      	str	r3, [r7, #52]	@ 0x34
		if (i >= i0 && i <= i1)
 80012c0:	697a      	ldr	r2, [r7, #20]
 80012c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80012c4:	429a      	cmp	r2, r3
 80012c6:	db4b      	blt.n	8001360 <atan_turn_i_q31+0xe4>
 80012c8:	697a      	ldr	r2, [r7, #20]
 80012ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80012cc:	429a      	cmp	r2, r3
 80012ce:	dc47      	bgt.n	8001360 <atan_turn_i_q31+0xe4>
		{
			int32_t y0 = k_atan_anchor[k].v;
 80012d0:	4a2a      	ldr	r2, [pc, #168]	@ (800137c <atan_turn_i_q31+0x100>)
 80012d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80012d4:	00db      	lsls	r3, r3, #3
 80012d6:	4413      	add	r3, r2
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	633b      	str	r3, [r7, #48]	@ 0x30
			int32_t y1 = k_atan_anchor[k + 1].v;
 80012dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80012de:	3301      	adds	r3, #1
 80012e0:	4a26      	ldr	r2, [pc, #152]	@ (800137c <atan_turn_i_q31+0x100>)
 80012e2:	00db      	lsls	r3, r3, #3
 80012e4:	4413      	add	r3, r2
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			int32_t di = (int32_t) (i - i0);
 80012ea:	697a      	ldr	r2, [r7, #20]
 80012ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80012ee:	1ad3      	subs	r3, r2, r3
 80012f0:	62bb      	str	r3, [r7, #40]	@ 0x28
			int32_t wi = (int32_t) (i1 - i0);
 80012f2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80012f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80012f6:	1ad3      	subs	r3, r2, r3
 80012f8:	627b      	str	r3, [r7, #36]	@ 0x24
			int32_t dy = q31_sub_sat(y1, y0);
 80012fa:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80012fc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80012fe:	f7ff ff3e 	bl	800117e <q31_sub_sat>
 8001302:	6238      	str	r0, [r7, #32]
			int32_t t = (int32_t) ((((int64_t) di << 31) + (wi / 2)) / wi); // di/wi をQ31に
 8001304:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001306:	17da      	asrs	r2, r3, #31
 8001308:	4698      	mov	r8, r3
 800130a:	4691      	mov	r9, r2
 800130c:	ea4f 0568 	mov.w	r5, r8, asr #1
 8001310:	ea4f 74c8 	mov.w	r4, r8, lsl #31
 8001314:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001316:	0fda      	lsrs	r2, r3, #31
 8001318:	4413      	add	r3, r2
 800131a:	105b      	asrs	r3, r3, #1
 800131c:	17da      	asrs	r2, r3, #31
 800131e:	469a      	mov	sl, r3
 8001320:	4693      	mov	fp, r2
 8001322:	eb14 030a 	adds.w	r3, r4, sl
 8001326:	60bb      	str	r3, [r7, #8]
 8001328:	eb45 030b 	adc.w	r3, r5, fp
 800132c:	60fb      	str	r3, [r7, #12]
 800132e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001330:	17da      	asrs	r2, r3, #31
 8001332:	603b      	str	r3, [r7, #0]
 8001334:	607a      	str	r2, [r7, #4]
 8001336:	e9d7 2300 	ldrd	r2, r3, [r7]
 800133a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800133e:	f7ff fc33 	bl	8000ba8 <__aeabi_ldivmod>
 8001342:	4602      	mov	r2, r0
 8001344:	460b      	mov	r3, r1
 8001346:	4613      	mov	r3, r2
 8001348:	61fb      	str	r3, [r7, #28]
			return q31_add_sat(y0, q31_mul(dy, t));
 800134a:	69f9      	ldr	r1, [r7, #28]
 800134c:	6a38      	ldr	r0, [r7, #32]
 800134e:	f7ff fe99 	bl	8001084 <q31_mul>
 8001352:	4603      	mov	r3, r0
 8001354:	4619      	mov	r1, r3
 8001356:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001358:	f7ff fedc 	bl	8001114 <q31_add_sat>
 800135c:	4603      	mov	r3, r0
 800135e:	e006      	b.n	800136e <atan_turn_i_q31+0xf2>
	for (int k = 0; k < 3; k++)
 8001360:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001362:	3301      	adds	r3, #1
 8001364:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001366:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001368:	2b02      	cmp	r3, #2
 800136a:	dd9e      	ble.n	80012aa <atan_turn_i_q31+0x2e>
		}
	}
	return k_atan_anchor[3].v;
 800136c:	4b02      	ldr	r3, [pc, #8]	@ (8001378 <atan_turn_i_q31+0xfc>)
}
 800136e:	4618      	mov	r0, r3
 8001370:	3740      	adds	r7, #64	@ 0x40
 8001372:	46bd      	mov	sp, r7
 8001374:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001378:	000145f3 	.word	0x000145f3
 800137c:	08005f38 	.word	0x08005f38

08001380 <sincos_q31>:

void sincos_q31(int32_t th, int32_t *s, int32_t *c)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b08c      	sub	sp, #48	@ 0x30
 8001384:	af00      	add	r7, sp, #0
 8001386:	60f8      	str	r0, [r7, #12]
 8001388:	60b9      	str	r1, [r7, #8]
 800138a:	607a      	str	r2, [r7, #4]
	th = angle_wrap_q31(th);
 800138c:	68f8      	ldr	r0, [r7, #12]
 800138e:	f7ff ff2b 	bl	80011e8 <angle_wrap_q31>
 8001392:	60f8      	str	r0, [r7, #12]
	if (th > Q31_ONE / 2)
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800139a:	db03      	blt.n	80013a4 <sincos_q31+0x24>
		th -= (Q31_ONE + 1);
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 80013a2:	60fb      	str	r3, [r7, #12]
	if (th <= -Q31_ONE / 2)
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	4a42      	ldr	r2, [pc, #264]	@ (80014b0 <sincos_q31+0x130>)
 80013a8:	4293      	cmp	r3, r2
 80013aa:	da03      	bge.n	80013b4 <sincos_q31+0x34>
		th += (Q31_ONE + 1);
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 80013b2:	60fb      	str	r3, [r7, #12]

	int8_t q = 0;
 80013b4:	2300      	movs	r3, #0
 80013b6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (th > Q31_ONE / 4)
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80013c0:	db08      	blt.n	80013d4 <sincos_q31+0x54>
	{
		th -= (Q31_ONE / 2);
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	f103 4340 	add.w	r3, r3, #3221225472	@ 0xc0000000
 80013c8:	3301      	adds	r3, #1
 80013ca:	60fb      	str	r3, [r7, #12]
		q = +1;
 80013cc:	2301      	movs	r3, #1
 80013ce:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80013d2:	e00b      	b.n	80013ec <sincos_q31+0x6c>
	}
	else if (th < -Q31_ONE / 4)
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 80013da:	dc07      	bgt.n	80013ec <sincos_q31+0x6c>
	{
		th += (Q31_ONE / 2);
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80013e2:	3b01      	subs	r3, #1
 80013e4:	60fb      	str	r3, [r7, #12]
		q = -1;
 80013e6:	23ff      	movs	r3, #255	@ 0xff
 80013e8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	}

	int32_t x = k_cordic_K_q31; // cos
 80013ec:	4b31      	ldr	r3, [pc, #196]	@ (80014b4 <sincos_q31+0x134>)
 80013ee:	62bb      	str	r3, [r7, #40]	@ 0x28
	int32_t y = 0; // sin
 80013f0:	2300      	movs	r3, #0
 80013f2:	627b      	str	r3, [r7, #36]	@ 0x24
	int32_t z = th; // turn-Q31
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	623b      	str	r3, [r7, #32]

	for (int i = 0; i < CORDIC_ITERS; i++)
 80013f8:	2300      	movs	r3, #0
 80013fa:	61fb      	str	r3, [r7, #28]
 80013fc:	e032      	b.n	8001464 <sincos_q31+0xe4>
	{
		int32_t angle_i = atan_turn_i_q31(i); // 線形補間で取得
 80013fe:	69f8      	ldr	r0, [r7, #28]
 8001400:	f7ff ff3c 	bl	800127c <atan_turn_i_q31>
 8001404:	61b8      	str	r0, [r7, #24]
		int32_t dx = (y >> i);
 8001406:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001408:	69fb      	ldr	r3, [r7, #28]
 800140a:	fa42 f303 	asr.w	r3, r2, r3
 800140e:	617b      	str	r3, [r7, #20]
		int32_t dy = (x >> i);
 8001410:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001412:	69fb      	ldr	r3, [r7, #28]
 8001414:	fa42 f303 	asr.w	r3, r2, r3
 8001418:	613b      	str	r3, [r7, #16]
		if (z >= 0)
 800141a:	6a3b      	ldr	r3, [r7, #32]
 800141c:	2b00      	cmp	r3, #0
 800141e:	db0f      	blt.n	8001440 <sincos_q31+0xc0>
		{
			x = q31_sub_sat(x, dx);
 8001420:	6979      	ldr	r1, [r7, #20]
 8001422:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001424:	f7ff feab 	bl	800117e <q31_sub_sat>
 8001428:	62b8      	str	r0, [r7, #40]	@ 0x28
			y = q31_add_sat(y, dy);
 800142a:	6939      	ldr	r1, [r7, #16]
 800142c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800142e:	f7ff fe71 	bl	8001114 <q31_add_sat>
 8001432:	6278      	str	r0, [r7, #36]	@ 0x24
			z = q31_sub_sat(z, angle_i);
 8001434:	69b9      	ldr	r1, [r7, #24]
 8001436:	6a38      	ldr	r0, [r7, #32]
 8001438:	f7ff fea1 	bl	800117e <q31_sub_sat>
 800143c:	6238      	str	r0, [r7, #32]
 800143e:	e00e      	b.n	800145e <sincos_q31+0xde>
		}
		else
		{
			x = q31_add_sat(x, dx);
 8001440:	6979      	ldr	r1, [r7, #20]
 8001442:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001444:	f7ff fe66 	bl	8001114 <q31_add_sat>
 8001448:	62b8      	str	r0, [r7, #40]	@ 0x28
			y = q31_sub_sat(y, dy);
 800144a:	6939      	ldr	r1, [r7, #16]
 800144c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800144e:	f7ff fe96 	bl	800117e <q31_sub_sat>
 8001452:	6278      	str	r0, [r7, #36]	@ 0x24
			z = q31_add_sat(z, angle_i);
 8001454:	69b9      	ldr	r1, [r7, #24]
 8001456:	6a38      	ldr	r0, [r7, #32]
 8001458:	f7ff fe5c 	bl	8001114 <q31_add_sat>
 800145c:	6238      	str	r0, [r7, #32]
	for (int i = 0; i < CORDIC_ITERS; i++)
 800145e:	69fb      	ldr	r3, [r7, #28]
 8001460:	3301      	adds	r3, #1
 8001462:	61fb      	str	r3, [r7, #28]
 8001464:	69fb      	ldr	r3, [r7, #28]
 8001466:	2b0b      	cmp	r3, #11
 8001468:	ddc9      	ble.n	80013fe <sincos_q31+0x7e>
		}
	}

	if (q > 0)
 800146a:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800146e:	2b00      	cmp	r3, #0
 8001470:	dd07      	ble.n	8001482 <sincos_q31+0x102>
	{
		*s = x;
 8001472:	68bb      	ldr	r3, [r7, #8]
 8001474:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001476:	601a      	str	r2, [r3, #0]
		*c = -y;
 8001478:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800147a:	425a      	negs	r2, r3
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	601a      	str	r2, [r3, #0]
	else
	{
		*s = y;
		*c = x;
	}
}
 8001480:	e011      	b.n	80014a6 <sincos_q31+0x126>
	else if (q < 0)
 8001482:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8001486:	2b00      	cmp	r3, #0
 8001488:	da07      	bge.n	800149a <sincos_q31+0x11a>
		*s = -x;
 800148a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800148c:	425a      	negs	r2, r3
 800148e:	68bb      	ldr	r3, [r7, #8]
 8001490:	601a      	str	r2, [r3, #0]
		*c = y;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001496:	601a      	str	r2, [r3, #0]
}
 8001498:	e005      	b.n	80014a6 <sincos_q31+0x126>
		*s = y;
 800149a:	68bb      	ldr	r3, [r7, #8]
 800149c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800149e:	601a      	str	r2, [r3, #0]
		*c = x;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80014a4:	601a      	str	r2, [r3, #0]
}
 80014a6:	bf00      	nop
 80014a8:	3730      	adds	r7, #48	@ 0x30
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	c0000002 	.word	0xc0000002
 80014b4:	4dba76d4 	.word	0x4dba76d4

080014b8 <adc_to_q31>:

extern  Encoder_t s_enc;


static inline int32_t adc_to_q31(uint16_t v)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b083      	sub	sp, #12
 80014bc:	af00      	add	r7, sp, #0
 80014be:	4603      	mov	r3, r0
 80014c0:	80fb      	strh	r3, [r7, #6]
	return (int32_t) ((int64_t) v * (int64_t) (Q31_ONE >> 11));
 80014c2:	88fa      	ldrh	r2, [r7, #6]
 80014c4:	4613      	mov	r3, r2
 80014c6:	051b      	lsls	r3, r3, #20
 80014c8:	1a9b      	subs	r3, r3, r2
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	370c      	adds	r7, #12
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr
	...

080014d8 <clarke_q31>:

static inline void clarke_q31(int32_t ia, int32_t ib, int32_t ic,
		int32_t *ialpha, int32_t *ibeta)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b086      	sub	sp, #24
 80014dc:	af00      	add	r7, sp, #0
 80014de:	60f8      	str	r0, [r7, #12]
 80014e0:	60b9      	str	r1, [r7, #8]
 80014e2:	607a      	str	r2, [r7, #4]
 80014e4:	603b      	str	r3, [r7, #0]
	*ialpha = ia;
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	68fa      	ldr	r2, [r7, #12]
 80014ea:	601a      	str	r2, [r3, #0]
	int32_t two_ib = q31_add_sat(ib, ib);
 80014ec:	68b9      	ldr	r1, [r7, #8]
 80014ee:	68b8      	ldr	r0, [r7, #8]
 80014f0:	f7ff fe10 	bl	8001114 <q31_add_sat>
 80014f4:	6178      	str	r0, [r7, #20]
	int32_t sum = q31_add_sat(ia, two_ib);
 80014f6:	6979      	ldr	r1, [r7, #20]
 80014f8:	68f8      	ldr	r0, [r7, #12]
 80014fa:	f7ff fe0b 	bl	8001114 <q31_add_sat>
 80014fe:	6138      	str	r0, [r7, #16]
	*ibeta = q31_mul(sum, Q31_INV_SQRT3);
 8001500:	4905      	ldr	r1, [pc, #20]	@ (8001518 <clarke_q31+0x40>)
 8001502:	6938      	ldr	r0, [r7, #16]
 8001504:	f7ff fdbe 	bl	8001084 <q31_mul>
 8001508:	4602      	mov	r2, r0
 800150a:	6a3b      	ldr	r3, [r7, #32]
 800150c:	601a      	str	r2, [r3, #0]
}
 800150e:	bf00      	nop
 8001510:	3718      	adds	r7, #24
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	49e69d16 	.word	0x49e69d16

0800151c <throttle_shape_q31>:

static inline int32_t throttle_shape_q31(int32_t thr_raw_q31)
{
 800151c:	b590      	push	{r4, r7, lr}
 800151e:	b085      	sub	sp, #20
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
    // デッドバンド
    if (thr_raw_q31 < THR_DEADBAND_Q31) thr_raw_q31 = 0;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	4a2b      	ldr	r2, [pc, #172]	@ (80015d4 <throttle_shape_q31+0xb8>)
 8001528:	4293      	cmp	r3, r2
 800152a:	dc01      	bgt.n	8001530 <throttle_shape_q31+0x14>
 800152c:	2300      	movs	r3, #0
 800152e:	607b      	str	r3, [r7, #4]

    // LPF: y = αx + (1-α)y
    int32_t one_minus_a = q31_sub_sat(Q31_ONE, THR_LPF_ALPHA_Q31);
 8001530:	f04f 5180 	mov.w	r1, #268435456	@ 0x10000000
 8001534:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 8001538:	f7ff fe21 	bl	800117e <q31_sub_sat>
 800153c:	60f8      	str	r0, [r7, #12]
    s_thr_filt_q31 = q31_add_sat(q31_mul(THR_LPF_ALPHA_Q31, thr_raw_q31),
 800153e:	6879      	ldr	r1, [r7, #4]
 8001540:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8001544:	f7ff fd9e 	bl	8001084 <q31_mul>
 8001548:	4604      	mov	r4, r0
 800154a:	4b23      	ldr	r3, [pc, #140]	@ (80015d8 <throttle_shape_q31+0xbc>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4619      	mov	r1, r3
 8001550:	68f8      	ldr	r0, [r7, #12]
 8001552:	f7ff fd97 	bl	8001084 <q31_mul>
 8001556:	4603      	mov	r3, r0
 8001558:	4619      	mov	r1, r3
 800155a:	4620      	mov	r0, r4
 800155c:	f7ff fdda 	bl	8001114 <q31_add_sat>
 8001560:	4603      	mov	r3, r0
 8001562:	4a1d      	ldr	r2, [pc, #116]	@ (80015d8 <throttle_shape_q31+0xbc>)
 8001564:	6013      	str	r3, [r2, #0]
                                 q31_mul(one_minus_a,        s_thr_filt_q31));

    // スルーレート（入力の瞬間変化を更に縛りたい場合は、前回値を覚えて制限）
    static int32_t prev = 0;
    int32_t diff = q31_sub_sat(s_thr_filt_q31, prev);
 8001566:	4b1c      	ldr	r3, [pc, #112]	@ (80015d8 <throttle_shape_q31+0xbc>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4a1c      	ldr	r2, [pc, #112]	@ (80015dc <throttle_shape_q31+0xc0>)
 800156c:	6812      	ldr	r2, [r2, #0]
 800156e:	4611      	mov	r1, r2
 8001570:	4618      	mov	r0, r3
 8001572:	f7ff fe04 	bl	800117e <q31_sub_sat>
 8001576:	60b8      	str	r0, [r7, #8]
    if (diff > THR_SLEW_PER_TICK_Q31)      s_thr_filt_q31 = q31_add_sat(prev, THR_SLEW_PER_TICK_Q31);
 8001578:	68bb      	ldr	r3, [r7, #8]
 800157a:	4a19      	ldr	r2, [pc, #100]	@ (80015e0 <throttle_shape_q31+0xc4>)
 800157c:	4293      	cmp	r3, r2
 800157e:	dd09      	ble.n	8001594 <throttle_shape_q31+0x78>
 8001580:	4b16      	ldr	r3, [pc, #88]	@ (80015dc <throttle_shape_q31+0xc0>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4916      	ldr	r1, [pc, #88]	@ (80015e0 <throttle_shape_q31+0xc4>)
 8001586:	4618      	mov	r0, r3
 8001588:	f7ff fdc4 	bl	8001114 <q31_add_sat>
 800158c:	4603      	mov	r3, r0
 800158e:	4a12      	ldr	r2, [pc, #72]	@ (80015d8 <throttle_shape_q31+0xbc>)
 8001590:	6013      	str	r3, [r2, #0]
 8001592:	e00c      	b.n	80015ae <throttle_shape_q31+0x92>
    else if (diff < -THR_SLEW_PER_TICK_Q31) s_thr_filt_q31 = q31_sub_sat(prev, THR_SLEW_PER_TICK_Q31);
 8001594:	68bb      	ldr	r3, [r7, #8]
 8001596:	4a13      	ldr	r2, [pc, #76]	@ (80015e4 <throttle_shape_q31+0xc8>)
 8001598:	4293      	cmp	r3, r2
 800159a:	da08      	bge.n	80015ae <throttle_shape_q31+0x92>
 800159c:	4b0f      	ldr	r3, [pc, #60]	@ (80015dc <throttle_shape_q31+0xc0>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	490f      	ldr	r1, [pc, #60]	@ (80015e0 <throttle_shape_q31+0xc4>)
 80015a2:	4618      	mov	r0, r3
 80015a4:	f7ff fdeb 	bl	800117e <q31_sub_sat>
 80015a8:	4603      	mov	r3, r0
 80015aa:	4a0b      	ldr	r2, [pc, #44]	@ (80015d8 <throttle_shape_q31+0xbc>)
 80015ac:	6013      	str	r3, [r2, #0]
    prev = s_thr_filt_q31;
 80015ae:	4b0a      	ldr	r3, [pc, #40]	@ (80015d8 <throttle_shape_q31+0xbc>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4a0a      	ldr	r2, [pc, #40]	@ (80015dc <throttle_shape_q31+0xc0>)
 80015b4:	6013      	str	r3, [r2, #0]

    // 上限
    if (s_thr_filt_q31 > THR_ADC_MAX_Q31) s_thr_filt_q31 = THR_ADC_MAX_Q31;
 80015b6:	4b08      	ldr	r3, [pc, #32]	@ (80015d8 <throttle_shape_q31+0xbc>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80015be:	d003      	beq.n	80015c8 <throttle_shape_q31+0xac>
 80015c0:	4b05      	ldr	r3, [pc, #20]	@ (80015d8 <throttle_shape_q31+0xbc>)
 80015c2:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80015c6:	601a      	str	r2, [r3, #0]
    return s_thr_filt_q31;
 80015c8:	4b03      	ldr	r3, [pc, #12]	@ (80015d8 <throttle_shape_q31+0xbc>)
 80015ca:	681b      	ldr	r3, [r3, #0]
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	3714      	adds	r7, #20
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd90      	pop	{r4, r7, pc}
 80015d4:	028f5c28 	.word	0x028f5c28
 80015d8:	20000278 	.word	0x20000278
 80015dc:	200002b0 	.word	0x200002b0
 80015e0:	00a3d70a 	.word	0x00a3d70a
 80015e4:	ff5c28f6 	.word	0xff5c28f6

080015e8 <speed_pi_to_iq_q31>:

// 速度PI（PLLのωを使って Iq_ref を作る）
static inline int32_t speed_pi_to_iq_q31(int32_t omega_ref_step_q31, int32_t omega_meas_step_q31)
{
 80015e8:	b590      	push	{r4, r7, lr}
 80015ea:	b085      	sub	sp, #20
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
 80015f0:	6039      	str	r1, [r7, #0]
    int32_t e = q31_sub_sat(omega_ref_step_q31, omega_meas_step_q31);
 80015f2:	6839      	ldr	r1, [r7, #0]
 80015f4:	6878      	ldr	r0, [r7, #4]
 80015f6:	f7ff fdc2 	bl	800117e <q31_sub_sat>
 80015fa:	60b8      	str	r0, [r7, #8]
    s_speed_int_q31 = q31_add_sat(s_speed_int_q31, q31_mul(SPEED_KI_Q31, e));
 80015fc:	4b1c      	ldr	r3, [pc, #112]	@ (8001670 <speed_pi_to_iq_q31+0x88>)
 80015fe:	681c      	ldr	r4, [r3, #0]
 8001600:	68b9      	ldr	r1, [r7, #8]
 8001602:	481c      	ldr	r0, [pc, #112]	@ (8001674 <speed_pi_to_iq_q31+0x8c>)
 8001604:	f7ff fd3e 	bl	8001084 <q31_mul>
 8001608:	4603      	mov	r3, r0
 800160a:	4619      	mov	r1, r3
 800160c:	4620      	mov	r0, r4
 800160e:	f7ff fd81 	bl	8001114 <q31_add_sat>
 8001612:	4603      	mov	r3, r0
 8001614:	4a16      	ldr	r2, [pc, #88]	@ (8001670 <speed_pi_to_iq_q31+0x88>)
 8001616:	6013      	str	r3, [r2, #0]

    // 積分アンチワインドアップ：Iqの範囲に収める
    if (s_speed_int_q31 > IQ_MAX_Q31) s_speed_int_q31 = IQ_MAX_Q31;
 8001618:	4b15      	ldr	r3, [pc, #84]	@ (8001670 <speed_pi_to_iq_q31+0x88>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a16      	ldr	r2, [pc, #88]	@ (8001678 <speed_pi_to_iq_q31+0x90>)
 800161e:	4293      	cmp	r3, r2
 8001620:	dd02      	ble.n	8001628 <speed_pi_to_iq_q31+0x40>
 8001622:	4b13      	ldr	r3, [pc, #76]	@ (8001670 <speed_pi_to_iq_q31+0x88>)
 8001624:	4a14      	ldr	r2, [pc, #80]	@ (8001678 <speed_pi_to_iq_q31+0x90>)
 8001626:	601a      	str	r2, [r3, #0]
    if (s_speed_int_q31 < 0)          s_speed_int_q31 = 0; // 順回転限定なら0～に
 8001628:	4b11      	ldr	r3, [pc, #68]	@ (8001670 <speed_pi_to_iq_q31+0x88>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	2b00      	cmp	r3, #0
 800162e:	da02      	bge.n	8001636 <speed_pi_to_iq_q31+0x4e>
 8001630:	4b0f      	ldr	r3, [pc, #60]	@ (8001670 <speed_pi_to_iq_q31+0x88>)
 8001632:	2200      	movs	r2, #0
 8001634:	601a      	str	r2, [r3, #0]

    int32_t out = q31_add_sat(q31_mul(SPEED_KP_Q31, e), s_speed_int_q31);
 8001636:	68b9      	ldr	r1, [r7, #8]
 8001638:	4810      	ldr	r0, [pc, #64]	@ (800167c <speed_pi_to_iq_q31+0x94>)
 800163a:	f7ff fd23 	bl	8001084 <q31_mul>
 800163e:	4602      	mov	r2, r0
 8001640:	4b0b      	ldr	r3, [pc, #44]	@ (8001670 <speed_pi_to_iq_q31+0x88>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4619      	mov	r1, r3
 8001646:	4610      	mov	r0, r2
 8001648:	f7ff fd64 	bl	8001114 <q31_add_sat>
 800164c:	60f8      	str	r0, [r7, #12]

    // 出力リミット
    if (out > IQ_MAX_Q31) out = IQ_MAX_Q31;
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	4a09      	ldr	r2, [pc, #36]	@ (8001678 <speed_pi_to_iq_q31+0x90>)
 8001652:	4293      	cmp	r3, r2
 8001654:	dd01      	ble.n	800165a <speed_pi_to_iq_q31+0x72>
 8001656:	4b08      	ldr	r3, [pc, #32]	@ (8001678 <speed_pi_to_iq_q31+0x90>)
 8001658:	60fb      	str	r3, [r7, #12]
    if (out < 0)          out = 0;
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	2b00      	cmp	r3, #0
 800165e:	da01      	bge.n	8001664 <speed_pi_to_iq_q31+0x7c>
 8001660:	2300      	movs	r3, #0
 8001662:	60fb      	str	r3, [r7, #12]
    return out; // Iq_ref
 8001664:	68fb      	ldr	r3, [r7, #12]
}
 8001666:	4618      	mov	r0, r3
 8001668:	3714      	adds	r7, #20
 800166a:	46bd      	mov	sp, r7
 800166c:	bd90      	pop	{r4, r7, pc}
 800166e:	bf00      	nop
 8001670:	20000280 	.word	0x20000280
 8001674:	00083127 	.word	0x00083127
 8001678:	1999999a 	.word	0x1999999a
 800167c:	028f5c29 	.word	0x028f5c29

08001680 <APP_Init>:


void APP_Init(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0
	FOC_Init(&s_foc);
 8001684:	481a      	ldr	r0, [pc, #104]	@ (80016f0 <APP_Init+0x70>)
 8001686:	f001 fc8f 	bl	8002fa8 <FOC_Init>
	BEMF_PLL_Init(&s_pll);
 800168a:	481a      	ldr	r0, [pc, #104]	@ (80016f4 <APP_Init+0x74>)
 800168c:	f000 fd5a 	bl	8002144 <BEMF_PLL_Init>

	s_pll.Ts_q31 = (int32_t) (((int64_t) 1 << 31) / (int64_t) PWM_FREQ_HZ);
 8001690:	4b18      	ldr	r3, [pc, #96]	@ (80016f4 <APP_Init+0x74>)
 8001692:	4a19      	ldr	r2, [pc, #100]	@ (80016f8 <APP_Init+0x78>)
 8001694:	61da      	str	r2, [r3, #28]
	s_pll.Rs_q31 = CONF_RS_Q31;
 8001696:	4b17      	ldr	r3, [pc, #92]	@ (80016f4 <APP_Init+0x74>)
 8001698:	4a18      	ldr	r2, [pc, #96]	@ (80016fc <APP_Init+0x7c>)
 800169a:	615a      	str	r2, [r3, #20]
	s_pll.Ls_q31 = CONF_LS_Q31;
 800169c:	4b15      	ldr	r3, [pc, #84]	@ (80016f4 <APP_Init+0x74>)
 800169e:	4a18      	ldr	r2, [pc, #96]	@ (8001700 <APP_Init+0x80>)
 80016a0:	619a      	str	r2, [r3, #24]
	s_pll.alpha_q31 = CONF_OBS_ALPHA_Q31;
 80016a2:	4b14      	ldr	r3, [pc, #80]	@ (80016f4 <APP_Init+0x74>)
 80016a4:	4a17      	ldr	r2, [pc, #92]	@ (8001704 <APP_Init+0x84>)
 80016a6:	625a      	str	r2, [r3, #36]	@ 0x24
	s_pll.kp_q31 = CONF_PLL_KP_Q31;
 80016a8:	4b12      	ldr	r3, [pc, #72]	@ (80016f4 <APP_Init+0x74>)
 80016aa:	4a17      	ldr	r2, [pc, #92]	@ (8001708 <APP_Init+0x88>)
 80016ac:	609a      	str	r2, [r3, #8]
	s_pll.ki_q31 = CONF_PLL_KI_Q31;
 80016ae:	4b11      	ldr	r3, [pc, #68]	@ (80016f4 <APP_Init+0x74>)
 80016b0:	4a16      	ldr	r2, [pc, #88]	@ (800170c <APP_Init+0x8c>)
 80016b2:	60da      	str	r2, [r3, #12]
	s_pll.omega_min_q31 = CONF_OMEGA_STEP_MIN_Q31;
 80016b4:	4b0f      	ldr	r3, [pc, #60]	@ (80016f4 <APP_Init+0x74>)
 80016b6:	4a16      	ldr	r2, [pc, #88]	@ (8001710 <APP_Init+0x90>)
 80016b8:	641a      	str	r2, [r3, #64]	@ 0x40
	s_pll.omega_max_q31 = CONF_OMEGA_STEP_MAX_Q31;
 80016ba:	4b0e      	ldr	r3, [pc, #56]	@ (80016f4 <APP_Init+0x74>)
 80016bc:	4a15      	ldr	r2, [pc, #84]	@ (8001714 <APP_Init+0x94>)
 80016be:	645a      	str	r2, [r3, #68]	@ 0x44
	s_pll.integ_min_q31 = CONF_PLL_INT_MIN_Q31;
 80016c0:	4b0c      	ldr	r3, [pc, #48]	@ (80016f4 <APP_Init+0x74>)
 80016c2:	4a15      	ldr	r2, [pc, #84]	@ (8001718 <APP_Init+0x98>)
 80016c4:	649a      	str	r2, [r3, #72]	@ 0x48
	s_pll.integ_max_q31 = CONF_PLL_INT_MAX_Q31;
 80016c6:	4b0b      	ldr	r3, [pc, #44]	@ (80016f4 <APP_Init+0x74>)
 80016c8:	4a0e      	ldr	r2, [pc, #56]	@ (8001704 <APP_Init+0x84>)
 80016ca:	64da      	str	r2, [r3, #76]	@ 0x4c

	s_st = ST_ALIGN;
 80016cc:	4b13      	ldr	r3, [pc, #76]	@ (800171c <APP_Init+0x9c>)
 80016ce:	2201      	movs	r2, #1
 80016d0:	701a      	strb	r2, [r3, #0]
	s_tick = 0;
 80016d2:	4b13      	ldr	r3, [pc, #76]	@ (8001720 <APP_Init+0xa0>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	601a      	str	r2, [r3, #0]
	s_th_forced = 0;
 80016d8:	4b12      	ldr	r3, [pc, #72]	@ (8001724 <APP_Init+0xa4>)
 80016da:	2200      	movs	r2, #0
 80016dc:	601a      	str	r2, [r3, #0]
	s_omg_step  = ST_OMEGA_STEP_INIT_Q31;
 80016de:	4b12      	ldr	r3, [pc, #72]	@ (8001728 <APP_Init+0xa8>)
 80016e0:	4a12      	ldr	r2, [pc, #72]	@ (800172c <APP_Init+0xac>)
 80016e2:	601a      	str	r2, [r3, #0]
	s_iq_cmd    = 0;
 80016e4:	4b12      	ldr	r3, [pc, #72]	@ (8001730 <APP_Init+0xb0>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	601a      	str	r2, [r3, #0]
}
 80016ea:	bf00      	nop
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	200001fc 	.word	0x200001fc
 80016f4:	20000228 	.word	0x20000228
 80016f8:	00018f75 	.word	0x00018f75
 80016fc:	13333333 	.word	0x13333333
 8001700:	00068db9 	.word	0x00068db9
 8001704:	1999999a 	.word	0x1999999a
 8001708:	0147ae14 	.word	0x0147ae14
 800170c:	0010624e 	.word	0x0010624e
 8001710:	fe0ded29 	.word	0xfe0ded29
 8001714:	01f212d7 	.word	0x01f212d7
 8001718:	e6666667 	.word	0xe6666667
 800171c:	200001e8 	.word	0x200001e8
 8001720:	200001f8 	.word	0x200001f8
 8001724:	200001ec 	.word	0x200001ec
 8001728:	200001f0 	.word	0x200001f0
 800172c:	0001a36e 	.word	0x0001a36e
 8001730:	200001f4 	.word	0x200001f4

08001734 <APP_OnCurrents>:

void APP_OnCurrents(uint16_t iU, uint16_t iV, uint16_t iW)
{
 8001734:	b480      	push	{r7}
 8001736:	b083      	sub	sp, #12
 8001738:	af00      	add	r7, sp, #0
 800173a:	4603      	mov	r3, r0
 800173c:	80fb      	strh	r3, [r7, #6]
 800173e:	460b      	mov	r3, r1
 8001740:	80bb      	strh	r3, [r7, #4]
 8001742:	4613      	mov	r3, r2
 8001744:	807b      	strh	r3, [r7, #2]
	s_iPacked = (uint32_t)(iV << 16) | (uint32_t)(iU);
 8001746:	88bb      	ldrh	r3, [r7, #4]
 8001748:	041a      	lsls	r2, r3, #16
 800174a:	88fb      	ldrh	r3, [r7, #6]
 800174c:	4313      	orrs	r3, r2
 800174e:	4a08      	ldr	r2, [pc, #32]	@ (8001770 <APP_OnCurrents+0x3c>)
 8001750:	6013      	str	r3, [r2, #0]

	s_current[0] = iU;
 8001752:	4a08      	ldr	r2, [pc, #32]	@ (8001774 <APP_OnCurrents+0x40>)
 8001754:	88fb      	ldrh	r3, [r7, #6]
 8001756:	8013      	strh	r3, [r2, #0]
	s_current[1] = iV;
 8001758:	4a06      	ldr	r2, [pc, #24]	@ (8001774 <APP_OnCurrents+0x40>)
 800175a:	88bb      	ldrh	r3, [r7, #4]
 800175c:	8053      	strh	r3, [r2, #2]
	s_current[2] = iW;
 800175e:	4a05      	ldr	r2, [pc, #20]	@ (8001774 <APP_OnCurrents+0x40>)
 8001760:	887b      	ldrh	r3, [r7, #2]
 8001762:	8093      	strh	r3, [r2, #4]
}
 8001764:	bf00      	nop
 8001766:	370c      	adds	r7, #12
 8001768:	46bd      	mov	sp, r7
 800176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176e:	4770      	bx	lr
 8001770:	20000298 	.word	0x20000298
 8001774:	20000290 	.word	0x20000290

08001778 <APP_OnVphase>:

void APP_OnVphase(uint16_t *v_adc)
{
 8001778:	b480      	push	{r7}
 800177a:	b083      	sub	sp, #12
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
	s_vphase_adc[0] = *v_adc;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	881a      	ldrh	r2, [r3, #0]
 8001784:	4b09      	ldr	r3, [pc, #36]	@ (80017ac <APP_OnVphase+0x34>)
 8001786:	801a      	strh	r2, [r3, #0]
	s_vphase_adc[1] = *(v_adc + 1);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	885a      	ldrh	r2, [r3, #2]
 800178c:	4b07      	ldr	r3, [pc, #28]	@ (80017ac <APP_OnVphase+0x34>)
 800178e:	805a      	strh	r2, [r3, #2]
	s_vphase_adc[2] = *(v_adc + 2);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	889a      	ldrh	r2, [r3, #4]
 8001794:	4b05      	ldr	r3, [pc, #20]	@ (80017ac <APP_OnVphase+0x34>)
 8001796:	809a      	strh	r2, [r3, #4]
	s_vphase_adc[3] = *(v_adc + 3);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	88da      	ldrh	r2, [r3, #6]
 800179c:	4b03      	ldr	r3, [pc, #12]	@ (80017ac <APP_OnVphase+0x34>)
 800179e:	80da      	strh	r2, [r3, #6]
}
 80017a0:	bf00      	nop
 80017a2:	370c      	adds	r7, #12
 80017a4:	46bd      	mov	sp, r7
 80017a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017aa:	4770      	bx	lr
 80017ac:	20000288 	.word	0x20000288

080017b0 <APP_OnVoltage>:

void APP_OnVoltage(uint16_t *v_adc)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b083      	sub	sp, #12
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
	s_voltage[0] = *v_adc;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	881a      	ldrh	r2, [r3, #0]
 80017bc:	4b05      	ldr	r3, [pc, #20]	@ (80017d4 <APP_OnVoltage+0x24>)
 80017be:	801a      	strh	r2, [r3, #0]
	s_voltage[1] = *(v_adc + 1);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	885a      	ldrh	r2, [r3, #2]
 80017c4:	4b03      	ldr	r3, [pc, #12]	@ (80017d4 <APP_OnVoltage+0x24>)
 80017c6:	805a      	strh	r2, [r3, #2]
}
 80017c8:	bf00      	nop
 80017ca:	370c      	adds	r7, #12
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr
 80017d4:	20000284 	.word	0x20000284

080017d8 <APP_Step>:

void APP_Step(void)
{
 80017d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80017dc:	b098      	sub	sp, #96	@ 0x60
 80017de:	af02      	add	r7, sp, #8
	uint8_t ocp_flag = 0;
 80017e0:	2300      	movs	r3, #0
 80017e2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	APP_VoltageConv();
 80017e6:	f000 f9d9 	bl	8001b9c <APP_VoltageConv>
	APP_CurrentConv();
 80017ea:	f000 fad7 	bl	8001d9c <APP_CurrentConv>

	for(size_t i = 0; i < 3; i++)
 80017ee:	2300      	movs	r3, #0
 80017f0:	653b      	str	r3, [r7, #80]	@ 0x50
 80017f2:	e00d      	b.n	8001810 <APP_Step+0x38>
	{
		if(motor_current_buff[i] > I_MAX)
 80017f4:	4a97      	ldr	r2, [pc, #604]	@ (8001a54 <APP_Step+0x27c>)
 80017f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80017f8:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80017fc:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 8001800:	4293      	cmp	r3, r2
 8001802:	dd02      	ble.n	800180a <APP_Step+0x32>
		{
			ocp_flag = 1;
 8001804:	2301      	movs	r3, #1
 8001806:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	for(size_t i = 0; i < 3; i++)
 800180a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800180c:	3301      	adds	r3, #1
 800180e:	653b      	str	r3, [r7, #80]	@ 0x50
 8001810:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001812:	2b02      	cmp	r3, #2
 8001814:	d9ee      	bls.n	80017f4 <APP_Step+0x1c>
		}
	}

	if(ocp_flag != 0)
 8001816:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800181a:	2b00      	cmp	r3, #0
 800181c:	d007      	beq.n	800182e <APP_Step+0x56>
	{
		FW_SetPWMDuties(0, 0, 0);
 800181e:	2200      	movs	r2, #0
 8001820:	2100      	movs	r1, #0
 8001822:	2000      	movs	r0, #0
 8001824:	f001 f8f2 	bl	8002a0c <FW_SetPWMDuties>
		APP_Init();
 8001828:	f7ff ff2a 	bl	8001680 <APP_Init>
		default: break;
		}

		FW_SetPWMDuties(c1, c2, c3);
	}
}
 800182c:	e1a7      	b.n	8001b7e <APP_Step+0x3a6>
		ENC_Update(&s_enc);
 800182e:	488a      	ldr	r0, [pc, #552]	@ (8001a58 <APP_Step+0x280>)
 8001830:	f000 fe54 	bl	80024dc <ENC_Update>
		uint16_t adc1 = (uint16_t)(s_iPacked & 0xFFFF);
 8001834:	4b89      	ldr	r3, [pc, #548]	@ (8001a5c <APP_Step+0x284>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
		uint16_t adc2 = (uint16_t)((s_iPacked >> 16) & 0xFFFF);
 800183c:	4b87      	ldr	r3, [pc, #540]	@ (8001a5c <APP_Step+0x284>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	0c1b      	lsrs	r3, r3, #16
 8001842:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
		int32_t ia = adc_to_q31(adc1);
 8001846:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800184a:	4618      	mov	r0, r3
 800184c:	f7ff fe34 	bl	80014b8 <adc_to_q31>
 8001850:	64b8      	str	r0, [r7, #72]	@ 0x48
		int32_t ib = adc_to_q31(adc2);
 8001852:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8001856:	4618      	mov	r0, r3
 8001858:	f7ff fe2e 	bl	80014b8 <adc_to_q31>
 800185c:	6478      	str	r0, [r7, #68]	@ 0x44
		int32_t ic = q31_sub_sat(0, q31_add_sat(ia, ib));
 800185e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8001860:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8001862:	f7ff fc57 	bl	8001114 <q31_add_sat>
 8001866:	4603      	mov	r3, r0
 8001868:	4619      	mov	r1, r3
 800186a:	2000      	movs	r0, #0
 800186c:	f7ff fc87 	bl	800117e <q31_sub_sat>
 8001870:	6438      	str	r0, [r7, #64]	@ 0x40
		clarke_q31(ia, ib, ic, &ialpha, &ibeta);
 8001872:	f107 0214 	add.w	r2, r7, #20
 8001876:	f107 0310 	add.w	r3, r7, #16
 800187a:	9300      	str	r3, [sp, #0]
 800187c:	4613      	mov	r3, r2
 800187e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001880:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8001882:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8001884:	f7ff fe28 	bl	80014d8 <clarke_q31>
		int32_t v_alpha = s_foc.v_alpha_q31;
 8001888:	4b75      	ldr	r3, [pc, #468]	@ (8001a60 <APP_Step+0x288>)
 800188a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800188c:	63fb      	str	r3, [r7, #60]	@ 0x3c
		int32_t v_beta = s_foc.v_beta_q31;
 800188e:	4b74      	ldr	r3, [pc, #464]	@ (8001a60 <APP_Step+0x288>)
 8001890:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001892:	63bb      	str	r3, [r7, #56]	@ 0x38
		BEMF_PLL_Step(&s_pll, v_alpha, v_beta, ialpha, ibeta);
 8001894:	697a      	ldr	r2, [r7, #20]
 8001896:	693b      	ldr	r3, [r7, #16]
 8001898:	9300      	str	r3, [sp, #0]
 800189a:	4613      	mov	r3, r2
 800189c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800189e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80018a0:	4870      	ldr	r0, [pc, #448]	@ (8001a64 <APP_Step+0x28c>)
 80018a2:	f000 fc74 	bl	800218e <BEMF_PLL_Step>
		FOC_CurrentLoopStep(&s_foc, ia, ib, ic, s_pll.theta_q31);
 80018a6:	4b6f      	ldr	r3, [pc, #444]	@ (8001a64 <APP_Step+0x28c>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	9300      	str	r3, [sp, #0]
 80018ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80018ae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80018b0:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80018b2:	486b      	ldr	r0, [pc, #428]	@ (8001a60 <APP_Step+0x288>)
 80018b4:	f001 fba8 	bl	8003008 <FOC_CurrentLoopStep>
	    int32_t thr01 = throttle_shape_q31(s_enc.current_q31);
 80018b8:	4b67      	ldr	r3, [pc, #412]	@ (8001a58 <APP_Step+0x280>)
 80018ba:	699b      	ldr	r3, [r3, #24]
 80018bc:	4618      	mov	r0, r3
 80018be:	f7ff fe2d 	bl	800151c <throttle_shape_q31>
 80018c2:	6378      	str	r0, [r7, #52]	@ 0x34
	    if (!s_mode_speed)
 80018c4:	4b68      	ldr	r3, [pc, #416]	@ (8001a68 <APP_Step+0x290>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d107      	bne.n	80018dc <APP_Step+0x104>
	        s_foc.Iq_ref_q31 = q31_mul(thr01, IQ_MAX_Q31);
 80018cc:	4967      	ldr	r1, [pc, #412]	@ (8001a6c <APP_Step+0x294>)
 80018ce:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80018d0:	f7ff fbd8 	bl	8001084 <q31_mul>
 80018d4:	4603      	mov	r3, r0
 80018d6:	4a62      	ldr	r2, [pc, #392]	@ (8001a60 <APP_Step+0x288>)
 80018d8:	6053      	str	r3, [r2, #4]
 80018da:	e00e      	b.n	80018fa <APP_Step+0x122>
	        int32_t omega_ref = q31_mul(thr01, CONF_OMEGA_STEP_MAX_Q31);
 80018dc:	4964      	ldr	r1, [pc, #400]	@ (8001a70 <APP_Step+0x298>)
 80018de:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80018e0:	f7ff fbd0 	bl	8001084 <q31_mul>
 80018e4:	6338      	str	r0, [r7, #48]	@ 0x30
	        int32_t omega_meas = s_pll.omega_q31;
 80018e6:	4b5f      	ldr	r3, [pc, #380]	@ (8001a64 <APP_Step+0x28c>)
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
	        s_foc.Iq_ref_q31 = speed_pi_to_iq_q31(omega_ref, omega_meas);
 80018ec:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80018ee:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80018f0:	f7ff fe7a 	bl	80015e8 <speed_pi_to_iq_q31>
 80018f4:	4603      	mov	r3, r0
 80018f6:	4a5a      	ldr	r2, [pc, #360]	@ (8001a60 <APP_Step+0x288>)
 80018f8:	6053      	str	r3, [r2, #4]
		FOC_AlphaBetaToSVPWM(&s_foc, &c1, &c2, &c3, (uint16_t) TIM1_ARR);
 80018fa:	f107 030a 	add.w	r3, r7, #10
 80018fe:	f107 020c 	add.w	r2, r7, #12
 8001902:	f107 010e 	add.w	r1, r7, #14
 8001906:	f640 709f 	movw	r0, #3999	@ 0xf9f
 800190a:	9000      	str	r0, [sp, #0]
 800190c:	4854      	ldr	r0, [pc, #336]	@ (8001a60 <APP_Step+0x288>)
 800190e:	f001 fc3f 	bl	8003190 <FOC_AlphaBetaToSVPWM>
		s_tick++;
 8001912:	4b58      	ldr	r3, [pc, #352]	@ (8001a74 <APP_Step+0x29c>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	3301      	adds	r3, #1
 8001918:	4a56      	ldr	r2, [pc, #344]	@ (8001a74 <APP_Step+0x29c>)
 800191a:	6013      	str	r3, [r2, #0]
		switch (s_st)
 800191c:	4b56      	ldr	r3, [pc, #344]	@ (8001a78 <APP_Step+0x2a0>)
 800191e:	781b      	ldrb	r3, [r3, #0]
 8001920:	3b01      	subs	r3, #1
 8001922:	2b04      	cmp	r3, #4
 8001924:	f200 8120 	bhi.w	8001b68 <APP_Step+0x390>
 8001928:	a201      	add	r2, pc, #4	@ (adr r2, 8001930 <APP_Step+0x158>)
 800192a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800192e:	bf00      	nop
 8001930:	08001945 	.word	0x08001945
 8001934:	0800197f 	.word	0x0800197f
 8001938:	08001aa5 	.word	0x08001aa5
 800193c:	08001b69 	.word	0x08001b69
 8001940:	08001b5b 	.word	0x08001b5b
		    s_foc.Id_ref_q31 = ST_ALIGN_ID_Q31;
 8001944:	4b46      	ldr	r3, [pc, #280]	@ (8001a60 <APP_Step+0x288>)
 8001946:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800194a:	601a      	str	r2, [r3, #0]
		    s_foc.Iq_ref_q31 = 0;
 800194c:	4b44      	ldr	r3, [pc, #272]	@ (8001a60 <APP_Step+0x288>)
 800194e:	2200      	movs	r2, #0
 8001950:	605a      	str	r2, [r3, #4]
		    s_th_forced = 0;
 8001952:	4b4a      	ldr	r3, [pc, #296]	@ (8001a7c <APP_Step+0x2a4>)
 8001954:	2200      	movs	r2, #0
 8001956:	601a      	str	r2, [r3, #0]
		    if (s_tick >= ST_ALIGN_TIME_TICKS) {
 8001958:	4b46      	ldr	r3, [pc, #280]	@ (8001a74 <APP_Step+0x29c>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8001960:	f0c0 8104 	bcc.w	8001b6c <APP_Step+0x394>
		        s_st   = ST_RAMP;
 8001964:	4b44      	ldr	r3, [pc, #272]	@ (8001a78 <APP_Step+0x2a0>)
 8001966:	2202      	movs	r2, #2
 8001968:	701a      	strb	r2, [r3, #0]
		        s_tick = 0;
 800196a:	4b42      	ldr	r3, [pc, #264]	@ (8001a74 <APP_Step+0x29c>)
 800196c:	2200      	movs	r2, #0
 800196e:	601a      	str	r2, [r3, #0]
		        s_iq_cmd   = 0;
 8001970:	4b43      	ldr	r3, [pc, #268]	@ (8001a80 <APP_Step+0x2a8>)
 8001972:	2200      	movs	r2, #0
 8001974:	601a      	str	r2, [r3, #0]
		        s_omg_step = ST_OMEGA_STEP_INIT_Q31;
 8001976:	4b43      	ldr	r3, [pc, #268]	@ (8001a84 <APP_Step+0x2ac>)
 8001978:	4a43      	ldr	r2, [pc, #268]	@ (8001a88 <APP_Step+0x2b0>)
 800197a:	601a      	str	r2, [r3, #0]
		    break;
 800197c:	e0f6      	b.n	8001b6c <APP_Step+0x394>
		    s_foc.Id_ref_q31 = ST_ALIGN_ID_Q31 >> 2; // 1/4へ
 800197e:	4b38      	ldr	r3, [pc, #224]	@ (8001a60 <APP_Step+0x288>)
 8001980:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 8001984:	601a      	str	r2, [r3, #0]
		    if (s_iq_cmd < ST_RAMP_IQ_Q31)
 8001986:	4b3e      	ldr	r3, [pc, #248]	@ (8001a80 <APP_Step+0x2a8>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4a40      	ldr	r2, [pc, #256]	@ (8001a8c <APP_Step+0x2b4>)
 800198c:	4293      	cmp	r3, r2
 800198e:	da0d      	bge.n	80019ac <APP_Step+0x1d4>
		        s_iq_cmd = q31_min(ST_RAMP_IQ_Q31, q31_add_sat(s_iq_cmd, ST_RAMP_DIDQ_TICK_Q31));
 8001990:	4b3b      	ldr	r3, [pc, #236]	@ (8001a80 <APP_Step+0x2a8>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	493e      	ldr	r1, [pc, #248]	@ (8001a90 <APP_Step+0x2b8>)
 8001996:	4618      	mov	r0, r3
 8001998:	f7ff fbbc 	bl	8001114 <q31_add_sat>
 800199c:	4603      	mov	r3, r0
 800199e:	4619      	mov	r1, r3
 80019a0:	483a      	ldr	r0, [pc, #232]	@ (8001a8c <APP_Step+0x2b4>)
 80019a2:	f7ff fc42 	bl	800122a <q31_min>
 80019a6:	4603      	mov	r3, r0
 80019a8:	4a35      	ldr	r2, [pc, #212]	@ (8001a80 <APP_Step+0x2a8>)
 80019aa:	6013      	str	r3, [r2, #0]
		    s_foc.Iq_ref_q31 = s_iq_cmd;
 80019ac:	4b34      	ldr	r3, [pc, #208]	@ (8001a80 <APP_Step+0x2a8>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a2b      	ldr	r2, [pc, #172]	@ (8001a60 <APP_Step+0x288>)
 80019b2:	6053      	str	r3, [r2, #4]
		    if (s_omg_step < ST_OMEGA_STEP_MAX_Q31)
 80019b4:	4b33      	ldr	r3, [pc, #204]	@ (8001a84 <APP_Step+0x2ac>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a36      	ldr	r2, [pc, #216]	@ (8001a94 <APP_Step+0x2bc>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	dc0e      	bgt.n	80019dc <APP_Step+0x204>
		        s_omg_step = q31_min(ST_OMEGA_STEP_MAX_Q31, q31_add_sat(s_omg_step, ST_OMEGA_STEP_SLEW_Q31));
 80019be:	4b31      	ldr	r3, [pc, #196]	@ (8001a84 <APP_Step+0x2ac>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f241 41f9 	movw	r1, #5369	@ 0x14f9
 80019c6:	4618      	mov	r0, r3
 80019c8:	f7ff fba4 	bl	8001114 <q31_add_sat>
 80019cc:	4603      	mov	r3, r0
 80019ce:	4619      	mov	r1, r3
 80019d0:	4831      	ldr	r0, [pc, #196]	@ (8001a98 <APP_Step+0x2c0>)
 80019d2:	f7ff fc2a 	bl	800122a <q31_min>
 80019d6:	4603      	mov	r3, r0
 80019d8:	4a2a      	ldr	r2, [pc, #168]	@ (8001a84 <APP_Step+0x2ac>)
 80019da:	6013      	str	r3, [r2, #0]
		    s_th_forced = angle_wrap_q31(q31_add_sat(s_th_forced, s_omg_step));
 80019dc:	4b27      	ldr	r3, [pc, #156]	@ (8001a7c <APP_Step+0x2a4>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a28      	ldr	r2, [pc, #160]	@ (8001a84 <APP_Step+0x2ac>)
 80019e2:	6812      	ldr	r2, [r2, #0]
 80019e4:	4611      	mov	r1, r2
 80019e6:	4618      	mov	r0, r3
 80019e8:	f7ff fb94 	bl	8001114 <q31_add_sat>
 80019ec:	4603      	mov	r3, r0
 80019ee:	4618      	mov	r0, r3
 80019f0:	f7ff fbfa 	bl	80011e8 <angle_wrap_q31>
 80019f4:	4603      	mov	r3, r0
 80019f6:	4a21      	ldr	r2, [pc, #132]	@ (8001a7c <APP_Step+0x2a4>)
 80019f8:	6013      	str	r3, [r2, #0]
		        int32_t s,c; sincos_q31(s_th_forced,&s,&c);
 80019fa:	4b20      	ldr	r3, [pc, #128]	@ (8001a7c <APP_Step+0x2a4>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	463a      	mov	r2, r7
 8001a00:	1d39      	adds	r1, r7, #4
 8001a02:	4618      	mov	r0, r3
 8001a04:	f7ff fcbc 	bl	8001380 <sincos_q31>
		    if (s_tick >= ST_HANDOFF_MIN_TICKS) {
 8001a08:	4b1a      	ldr	r3, [pc, #104]	@ (8001a74 <APP_Step+0x29c>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 8001a10:	d315      	bcc.n	8001a3e <APP_Step+0x266>
		        if (q31_abs(s_pll.omega_q31) >= ST_HANDOFF_OMEGA_MIN ||
 8001a12:	4b14      	ldr	r3, [pc, #80]	@ (8001a64 <APP_Step+0x28c>)
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	4618      	mov	r0, r3
 8001a18:	f7ff fbf9 	bl	800120e <q31_abs>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	4a1f      	ldr	r2, [pc, #124]	@ (8001a9c <APP_Step+0x2c4>)
 8001a20:	4293      	cmp	r3, r2
 8001a22:	dc06      	bgt.n	8001a32 <APP_Step+0x25a>
		            emf_strength_q31(&s_pll)  >= ST_HANDOFF_EMF_MIN) {
 8001a24:	480f      	ldr	r0, [pc, #60]	@ (8001a64 <APP_Step+0x28c>)
 8001a26:	f7ff fc10 	bl	800124a <emf_strength_q31>
 8001a2a:	4603      	mov	r3, r0
		        if (q31_abs(s_pll.omega_q31) >= ST_HANDOFF_OMEGA_MIN ||
 8001a2c:	4a1c      	ldr	r2, [pc, #112]	@ (8001aa0 <APP_Step+0x2c8>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	dd05      	ble.n	8001a3e <APP_Step+0x266>
		            s_st   = ST_BLEND;
 8001a32:	4b11      	ldr	r3, [pc, #68]	@ (8001a78 <APP_Step+0x2a0>)
 8001a34:	2203      	movs	r2, #3
 8001a36:	701a      	strb	r2, [r3, #0]
		            s_tick = 0;
 8001a38:	4b0e      	ldr	r3, [pc, #56]	@ (8001a74 <APP_Step+0x29c>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	601a      	str	r2, [r3, #0]
		    if (s_tick >= ST_TIMEOUT_TICKS) { s_st = ST_FAIL; }
 8001a3e:	4b0d      	ldr	r3, [pc, #52]	@ (8001a74 <APP_Step+0x29c>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 8001a46:	f0c0 8093 	bcc.w	8001b70 <APP_Step+0x398>
 8001a4a:	4b0b      	ldr	r3, [pc, #44]	@ (8001a78 <APP_Step+0x2a0>)
 8001a4c:	2205      	movs	r2, #5
 8001a4e:	701a      	strb	r2, [r3, #0]
		    break;
 8001a50:	e08e      	b.n	8001b70 <APP_Step+0x398>
 8001a52:	bf00      	nop
 8001a54:	200002a8 	.word	0x200002a8
 8001a58:	200002c4 	.word	0x200002c4
 8001a5c:	20000298 	.word	0x20000298
 8001a60:	200001fc 	.word	0x200001fc
 8001a64:	20000228 	.word	0x20000228
 8001a68:	2000027c 	.word	0x2000027c
 8001a6c:	1999999a 	.word	0x1999999a
 8001a70:	01f212d7 	.word	0x01f212d7
 8001a74:	200001f8 	.word	0x200001f8
 8001a78:	200001e8 	.word	0x200001e8
 8001a7c:	200001ec 	.word	0x200001ec
 8001a80:	200001f4 	.word	0x200001f4
 8001a84:	200001f0 	.word	0x200001f0
 8001a88:	0001a36e 	.word	0x0001a36e
 8001a8c:	06666666 	.word	0x06666666
 8001a90:	0051eb85 	.word	0x0051eb85
 8001a94:	0010624d 	.word	0x0010624d
 8001a98:	0010624e 	.word	0x0010624e
 8001a9c:	00083126 	.word	0x00083126
 8001aa0:	00a3d709 	.word	0x00a3d709
		    uint32_t n = (s_tick >= ST_BLEND_TICKS)? ST_BLEND_TICKS : s_tick;
 8001aa4:	4b38      	ldr	r3, [pc, #224]	@ (8001b88 <APP_Step+0x3b0>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	2bc8      	cmp	r3, #200	@ 0xc8
 8001aaa:	bf28      	it	cs
 8001aac:	23c8      	movcs	r3, #200	@ 0xc8
 8001aae:	62bb      	str	r3, [r7, #40]	@ 0x28
		    int32_t w  = (int32_t)((((int64_t)n << 31) + (ST_BLEND_TICKS/2)) / ST_BLEND_TICKS);
 8001ab0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	4698      	mov	r8, r3
 8001ab6:	4691      	mov	r9, r2
 8001ab8:	ea4f 0558 	mov.w	r5, r8, lsr #1
 8001abc:	ea4f 74c8 	mov.w	r4, r8, lsl #31
 8001ac0:	f114 0a64 	adds.w	sl, r4, #100	@ 0x64
 8001ac4:	f145 0b00 	adc.w	fp, r5, #0
 8001ac8:	f04f 02c8 	mov.w	r2, #200	@ 0xc8
 8001acc:	f04f 0300 	mov.w	r3, #0
 8001ad0:	4650      	mov	r0, sl
 8001ad2:	4659      	mov	r1, fp
 8001ad4:	f7ff f868 	bl	8000ba8 <__aeabi_ldivmod>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	460b      	mov	r3, r1
 8001adc:	4613      	mov	r3, r2
 8001ade:	627b      	str	r3, [r7, #36]	@ 0x24
		    int32_t w1 = q31_sub_sat(Q31_ONE, w);
 8001ae0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001ae2:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 8001ae6:	f7ff fb4a 	bl	800117e <q31_sub_sat>
 8001aea:	6238      	str	r0, [r7, #32]
		    int32_t th = q31_add_sat(q31_mul(w1, s_th_forced), q31_mul(w, s_pll.theta_q31));
 8001aec:	4b27      	ldr	r3, [pc, #156]	@ (8001b8c <APP_Step+0x3b4>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4619      	mov	r1, r3
 8001af2:	6a38      	ldr	r0, [r7, #32]
 8001af4:	f7ff fac6 	bl	8001084 <q31_mul>
 8001af8:	4604      	mov	r4, r0
 8001afa:	4b25      	ldr	r3, [pc, #148]	@ (8001b90 <APP_Step+0x3b8>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4619      	mov	r1, r3
 8001b00:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001b02:	f7ff fabf 	bl	8001084 <q31_mul>
 8001b06:	4603      	mov	r3, r0
 8001b08:	4619      	mov	r1, r3
 8001b0a:	4620      	mov	r0, r4
 8001b0c:	f7ff fb02 	bl	8001114 <q31_add_sat>
 8001b10:	61f8      	str	r0, [r7, #28]
		    if (s_foc.Id_ref_q31 > 0) {
 8001b12:	4b20      	ldr	r3, [pc, #128]	@ (8001b94 <APP_Step+0x3bc>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	dd12      	ble.n	8001b40 <APP_Step+0x368>
		        int32_t step = ST_ALIGN_ID_Q31 >> 4;
 8001b1a:	f04f 4378 	mov.w	r3, #4160749568	@ 0xf8000000
 8001b1e:	61bb      	str	r3, [r7, #24]
		        s_foc.Id_ref_q31 = (s_foc.Id_ref_q31 > step) ? q31_sub_sat(s_foc.Id_ref_q31, step) : 0;
 8001b20:	4b1c      	ldr	r3, [pc, #112]	@ (8001b94 <APP_Step+0x3bc>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	69ba      	ldr	r2, [r7, #24]
 8001b26:	429a      	cmp	r2, r3
 8001b28:	da07      	bge.n	8001b3a <APP_Step+0x362>
 8001b2a:	4b1a      	ldr	r3, [pc, #104]	@ (8001b94 <APP_Step+0x3bc>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	69b9      	ldr	r1, [r7, #24]
 8001b30:	4618      	mov	r0, r3
 8001b32:	f7ff fb24 	bl	800117e <q31_sub_sat>
 8001b36:	4603      	mov	r3, r0
 8001b38:	e000      	b.n	8001b3c <APP_Step+0x364>
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	4a15      	ldr	r2, [pc, #84]	@ (8001b94 <APP_Step+0x3bc>)
 8001b3e:	6013      	str	r3, [r2, #0]
		    if (s_tick >= ST_BLEND_TICKS) { s_st = ST_RUN; }
 8001b40:	4b11      	ldr	r3, [pc, #68]	@ (8001b88 <APP_Step+0x3b0>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	2bc7      	cmp	r3, #199	@ 0xc7
 8001b46:	d902      	bls.n	8001b4e <APP_Step+0x376>
 8001b48:	4b13      	ldr	r3, [pc, #76]	@ (8001b98 <APP_Step+0x3c0>)
 8001b4a:	2204      	movs	r2, #4
 8001b4c:	701a      	strb	r2, [r3, #0]
		    s_tick++;
 8001b4e:	4b0e      	ldr	r3, [pc, #56]	@ (8001b88 <APP_Step+0x3b0>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	3301      	adds	r3, #1
 8001b54:	4a0c      	ldr	r2, [pc, #48]	@ (8001b88 <APP_Step+0x3b0>)
 8001b56:	6013      	str	r3, [r2, #0]
		    } break;
 8001b58:	e00b      	b.n	8001b72 <APP_Step+0x39a>
		    s_foc.Id_ref_q31 = 0;
 8001b5a:	4b0e      	ldr	r3, [pc, #56]	@ (8001b94 <APP_Step+0x3bc>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	601a      	str	r2, [r3, #0]
		    s_foc.Iq_ref_q31 = 0;
 8001b60:	4b0c      	ldr	r3, [pc, #48]	@ (8001b94 <APP_Step+0x3bc>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	605a      	str	r2, [r3, #4]
		    break;
 8001b66:	e004      	b.n	8001b72 <APP_Step+0x39a>
		default: break;
 8001b68:	bf00      	nop
 8001b6a:	e002      	b.n	8001b72 <APP_Step+0x39a>
		    break;
 8001b6c:	bf00      	nop
 8001b6e:	e000      	b.n	8001b72 <APP_Step+0x39a>
		    break;
 8001b70:	bf00      	nop
		FW_SetPWMDuties(c1, c2, c3);
 8001b72:	89fb      	ldrh	r3, [r7, #14]
 8001b74:	89b9      	ldrh	r1, [r7, #12]
 8001b76:	897a      	ldrh	r2, [r7, #10]
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f000 ff47 	bl	8002a0c <FW_SetPWMDuties>
}
 8001b7e:	bf00      	nop
 8001b80:	3758      	adds	r7, #88	@ 0x58
 8001b82:	46bd      	mov	sp, r7
 8001b84:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b88:	200001f8 	.word	0x200001f8
 8001b8c:	200001ec 	.word	0x200001ec
 8001b90:	20000228 	.word	0x20000228
 8001b94:	200001fc 	.word	0x200001fc
 8001b98:	200001e8 	.word	0x200001e8

08001b9c <APP_VoltageConv>:

void APP_VoltageConv(void)
{
 8001b9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ba0:	b094      	sub	sp, #80	@ 0x50
 8001ba2:	af00      	add	r7, sp, #0
	uint32_t v_phase[4];
	uint32_t v_ref = (uint32_t)((((uint64_t)AD_MAX / (uint64_t)(s_voltage[0] << 16)) * (uint64_t)V_REF_AD) >> 16);
 8001ba4:	4b78      	ldr	r3, [pc, #480]	@ (8001d88 <APP_VoltageConv+0x1ec>)
 8001ba6:	881b      	ldrh	r3, [r3, #0]
 8001ba8:	b29b      	uxth	r3, r3
 8001baa:	041b      	lsls	r3, r3, #16
 8001bac:	17da      	asrs	r2, r3, #31
 8001bae:	4618      	mov	r0, r3
 8001bb0:	4611      	mov	r1, r2
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	460b      	mov	r3, r1
 8001bb6:	f640 70ff 	movw	r0, #4095	@ 0xfff
 8001bba:	f04f 0100 	mov.w	r1, #0
 8001bbe:	f7ff f843 	bl	8000c48 <__aeabi_uldivmod>
 8001bc2:	4602      	mov	r2, r0
 8001bc4:	460b      	mov	r3, r1
 8001bc6:	4971      	ldr	r1, [pc, #452]	@ (8001d8c <APP_VoltageConv+0x1f0>)
 8001bc8:	fb01 f003 	mul.w	r0, r1, r3
 8001bcc:	2100      	movs	r1, #0
 8001bce:	fb02 f101 	mul.w	r1, r2, r1
 8001bd2:	4408      	add	r0, r1
 8001bd4:	496d      	ldr	r1, [pc, #436]	@ (8001d8c <APP_VoltageConv+0x1f0>)
 8001bd6:	fba2 4501 	umull	r4, r5, r2, r1
 8001bda:	1943      	adds	r3, r0, r5
 8001bdc:	461d      	mov	r5, r3
 8001bde:	f04f 0200 	mov.w	r2, #0
 8001be2:	f04f 0300 	mov.w	r3, #0
 8001be6:	0c22      	lsrs	r2, r4, #16
 8001be8:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
 8001bec:	0c2b      	lsrs	r3, r5, #16
 8001bee:	4613      	mov	r3, r2
 8001bf0:	64bb      	str	r3, [r7, #72]	@ 0x48
	uint32_t v_battery = (uint32_t)((((((uint64_t)s_voltage[1] << 16 / (uint64_t)AD_MAX) * (uint64_t)v_ref) >> 16) * (uint64_t)V_DIV) >> 16);
 8001bf2:	4b65      	ldr	r3, [pc, #404]	@ (8001d88 <APP_VoltageConv+0x1ec>)
 8001bf4:	885b      	ldrh	r3, [r3, #2]
 8001bf6:	b29b      	uxth	r3, r3
 8001bf8:	b29b      	uxth	r3, r3
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	60bb      	str	r3, [r7, #8]
 8001bfe:	60fa      	str	r2, [r7, #12]
 8001c00:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001c02:	2200      	movs	r2, #0
 8001c04:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001c06:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001c08:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001c0c:	460b      	mov	r3, r1
 8001c0e:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 8001c12:	4622      	mov	r2, r4
 8001c14:	fb02 f203 	mul.w	r2, r2, r3
 8001c18:	e9c7 450a 	strd	r4, r5, [r7, #40]	@ 0x28
 8001c1c:	462b      	mov	r3, r5
 8001c1e:	4604      	mov	r4, r0
 8001c20:	460d      	mov	r5, r1
 8001c22:	4621      	mov	r1, r4
 8001c24:	fb01 f303 	mul.w	r3, r1, r3
 8001c28:	4413      	add	r3, r2
 8001c2a:	4622      	mov	r2, r4
 8001c2c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001c2e:	fba2 1201 	umull	r1, r2, r2, r1
 8001c32:	627a      	str	r2, [r7, #36]	@ 0x24
 8001c34:	460a      	mov	r2, r1
 8001c36:	623a      	str	r2, [r7, #32]
 8001c38:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c3a:	4413      	add	r3, r2
 8001c3c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c3e:	f04f 0200 	mov.w	r2, #0
 8001c42:	f04f 0300 	mov.w	r3, #0
 8001c46:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001c4a:	4621      	mov	r1, r4
 8001c4c:	0c0a      	lsrs	r2, r1, #16
 8001c4e:	4629      	mov	r1, r5
 8001c50:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001c54:	4629      	mov	r1, r5
 8001c56:	0c0b      	lsrs	r3, r1, #16
 8001c58:	f64c 1178 	movw	r1, #51576	@ 0xc978
 8001c5c:	fb01 f003 	mul.w	r0, r1, r3
 8001c60:	2100      	movs	r1, #0
 8001c62:	fb02 f101 	mul.w	r1, r2, r1
 8001c66:	4401      	add	r1, r0
 8001c68:	f64c 1078 	movw	r0, #51576	@ 0xc978
 8001c6c:	fba2 2300 	umull	r2, r3, r2, r0
 8001c70:	61fb      	str	r3, [r7, #28]
 8001c72:	4613      	mov	r3, r2
 8001c74:	61bb      	str	r3, [r7, #24]
 8001c76:	69fb      	ldr	r3, [r7, #28]
 8001c78:	18cb      	adds	r3, r1, r3
 8001c7a:	61fb      	str	r3, [r7, #28]
 8001c7c:	f04f 0200 	mov.w	r2, #0
 8001c80:	f04f 0300 	mov.w	r3, #0
 8001c84:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8001c88:	4621      	mov	r1, r4
 8001c8a:	0c0a      	lsrs	r2, r1, #16
 8001c8c:	4629      	mov	r1, r5
 8001c8e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001c92:	4629      	mov	r1, r5
 8001c94:	0c0b      	lsrs	r3, r1, #16
 8001c96:	4613      	mov	r3, r2
 8001c98:	647b      	str	r3, [r7, #68]	@ 0x44

	for(size_t i = 0; i < 4; i++)
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001c9e:	e061      	b.n	8001d64 <APP_VoltageConv+0x1c8>
	{
		v_phase[i] = (uint32_t)((((((uint64_t)s_vphase_adc[i] << 16 / (uint64_t)AD_MAX) * (uint64_t)v_ref) >> 16) * (uint64_t)V_DIV) >> 16);
 8001ca0:	4a3b      	ldr	r2, [pc, #236]	@ (8001d90 <APP_VoltageConv+0x1f4>)
 8001ca2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001ca4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001ca8:	b29b      	uxth	r3, r3
 8001caa:	b29b      	uxth	r3, r3
 8001cac:	2200      	movs	r2, #0
 8001cae:	603b      	str	r3, [r7, #0]
 8001cb0:	607a      	str	r2, [r7, #4]
 8001cb2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	613b      	str	r3, [r7, #16]
 8001cb8:	617a      	str	r2, [r7, #20]
 8001cba:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001cbe:	462b      	mov	r3, r5
 8001cc0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	fb02 f203 	mul.w	r2, r2, r3
 8001cca:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8001cce:	460b      	mov	r3, r1
 8001cd0:	4621      	mov	r1, r4
 8001cd2:	fb01 f303 	mul.w	r3, r1, r3
 8001cd6:	4413      	add	r3, r2
 8001cd8:	4622      	mov	r2, r4
 8001cda:	6939      	ldr	r1, [r7, #16]
 8001cdc:	fba2 8901 	umull	r8, r9, r2, r1
 8001ce0:	444b      	add	r3, r9
 8001ce2:	4699      	mov	r9, r3
 8001ce4:	f04f 0200 	mov.w	r2, #0
 8001ce8:	f04f 0300 	mov.w	r3, #0
 8001cec:	ea4f 4218 	mov.w	r2, r8, lsr #16
 8001cf0:	ea42 4209 	orr.w	r2, r2, r9, lsl #16
 8001cf4:	ea4f 4319 	mov.w	r3, r9, lsr #16
 8001cf8:	f64c 1178 	movw	r1, #51576	@ 0xc978
 8001cfc:	fb01 f003 	mul.w	r0, r1, r3
 8001d00:	2100      	movs	r1, #0
 8001d02:	fb02 f101 	mul.w	r1, r2, r1
 8001d06:	4401      	add	r1, r0
 8001d08:	f64c 1078 	movw	r0, #51576	@ 0xc978
 8001d0c:	fba2 ab00 	umull	sl, fp, r2, r0
 8001d10:	eb01 030b 	add.w	r3, r1, fp
 8001d14:	469b      	mov	fp, r3
 8001d16:	f04f 0200 	mov.w	r2, #0
 8001d1a:	f04f 0300 	mov.w	r3, #0
 8001d1e:	ea4f 421a 	mov.w	r2, sl, lsr #16
 8001d22:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
 8001d26:	ea4f 431b 	mov.w	r3, fp, lsr #16
 8001d2a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001d2c:	009b      	lsls	r3, r3, #2
 8001d2e:	3320      	adds	r3, #32
 8001d30:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8001d34:	440b      	add	r3, r1
 8001d36:	f843 2c1c 	str.w	r2, [r3, #-28]
		motor_voltage_buff[i] = (uint16_t)((v_phase[i] * 1000) >> 16);
 8001d3a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001d3c:	009b      	lsls	r3, r3, #2
 8001d3e:	3320      	adds	r3, #32
 8001d40:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8001d44:	4413      	add	r3, r2
 8001d46:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8001d4a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001d4e:	fb02 f303 	mul.w	r3, r2, r3
 8001d52:	0c1b      	lsrs	r3, r3, #16
 8001d54:	b299      	uxth	r1, r3
 8001d56:	4a0f      	ldr	r2, [pc, #60]	@ (8001d94 <APP_VoltageConv+0x1f8>)
 8001d58:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001d5a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(size_t i = 0; i < 4; i++)
 8001d5e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001d60:	3301      	adds	r3, #1
 8001d62:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001d64:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001d66:	2b03      	cmp	r3, #3
 8001d68:	d99a      	bls.n	8001ca0 <APP_VoltageConv+0x104>
	}

	bat_voltage_buff = (uint16_t)((v_battery * 1000) >> 16);
 8001d6a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001d6c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001d70:	fb02 f303 	mul.w	r3, r2, r3
 8001d74:	0c1b      	lsrs	r3, r3, #16
 8001d76:	b29a      	uxth	r2, r3
 8001d78:	4b07      	ldr	r3, [pc, #28]	@ (8001d98 <APP_VoltageConv+0x1fc>)
 8001d7a:	801a      	strh	r2, [r3, #0]
}
 8001d7c:	bf00      	nop
 8001d7e:	3750      	adds	r7, #80	@ 0x50
 8001d80:	46bd      	mov	sp, r7
 8001d82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001d86:	bf00      	nop
 8001d88:	20000284 	.word	0x20000284
 8001d8c:	00013c28 	.word	0x00013c28
 8001d90:	20000288 	.word	0x20000288
 8001d94:	200002a0 	.word	0x200002a0
 8001d98:	2000029c 	.word	0x2000029c

08001d9c <APP_CurrentConv>:

void APP_CurrentConv(void)
{
 8001d9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001da0:	b08c      	sub	sp, #48	@ 0x30
 8001da2:	af00      	add	r7, sp, #0
	int32_t i_phase;
	int32_t vi_phase;
	int32_t v_ref = (int32_t)((((int64_t)AD_MAX / (int64_t)(s_voltage[0] << 16)) * (int64_t)V_REF_AD) >> 16);
 8001da4:	4b66      	ldr	r3, [pc, #408]	@ (8001f40 <APP_CurrentConv+0x1a4>)
 8001da6:	881b      	ldrh	r3, [r3, #0]
 8001da8:	b29b      	uxth	r3, r3
 8001daa:	041b      	lsls	r3, r3, #16
 8001dac:	17da      	asrs	r2, r3, #31
 8001dae:	4618      	mov	r0, r3
 8001db0:	4611      	mov	r1, r2
 8001db2:	4602      	mov	r2, r0
 8001db4:	460b      	mov	r3, r1
 8001db6:	f640 70ff 	movw	r0, #4095	@ 0xfff
 8001dba:	f04f 0100 	mov.w	r1, #0
 8001dbe:	f7fe fef3 	bl	8000ba8 <__aeabi_ldivmod>
 8001dc2:	4602      	mov	r2, r0
 8001dc4:	460b      	mov	r3, r1
 8001dc6:	495f      	ldr	r1, [pc, #380]	@ (8001f44 <APP_CurrentConv+0x1a8>)
 8001dc8:	fb01 f003 	mul.w	r0, r1, r3
 8001dcc:	2100      	movs	r1, #0
 8001dce:	fb02 f101 	mul.w	r1, r2, r1
 8001dd2:	4408      	add	r0, r1
 8001dd4:	495b      	ldr	r1, [pc, #364]	@ (8001f44 <APP_CurrentConv+0x1a8>)
 8001dd6:	fba2 4501 	umull	r4, r5, r2, r1
 8001dda:	1943      	adds	r3, r0, r5
 8001ddc:	461d      	mov	r5, r3
 8001dde:	f04f 0200 	mov.w	r2, #0
 8001de2:	f04f 0300 	mov.w	r3, #0
 8001de6:	0c22      	lsrs	r2, r4, #16
 8001de8:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
 8001dec:	142b      	asrs	r3, r5, #16
 8001dee:	4613      	mov	r3, r2
 8001df0:	62bb      	str	r3, [r7, #40]	@ 0x28

	for(size_t i = 0; i < 3; i++)
 8001df2:	2300      	movs	r3, #0
 8001df4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001df6:	e098      	b.n	8001f2a <APP_CurrentConv+0x18e>
	{
		vi_phase =  (int32_t)((((int64_t)(s_current[i] << 16) / (int64_t)AD_MAX) * (int64_t)v_ref) >> 16);
 8001df8:	4a53      	ldr	r2, [pc, #332]	@ (8001f48 <APP_CurrentConv+0x1ac>)
 8001dfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001dfc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001e00:	b29b      	uxth	r3, r3
 8001e02:	041a      	lsls	r2, r3, #16
 8001e04:	4b51      	ldr	r3, [pc, #324]	@ (8001f4c <APP_CurrentConv+0x1b0>)
 8001e06:	fb83 1302 	smull	r1, r3, r3, r2
 8001e0a:	4413      	add	r3, r2
 8001e0c:	12d9      	asrs	r1, r3, #11
 8001e0e:	17d3      	asrs	r3, r2, #31
 8001e10:	1acb      	subs	r3, r1, r3
 8001e12:	17da      	asrs	r2, r3, #31
 8001e14:	60bb      	str	r3, [r7, #8]
 8001e16:	60fa      	str	r2, [r7, #12]
 8001e18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e1a:	17da      	asrs	r2, r3, #31
 8001e1c:	61bb      	str	r3, [r7, #24]
 8001e1e:	61fa      	str	r2, [r7, #28]
 8001e20:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001e24:	462b      	mov	r3, r5
 8001e26:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001e2a:	4602      	mov	r2, r0
 8001e2c:	fb02 f203 	mul.w	r2, r2, r3
 8001e30:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8001e34:	460b      	mov	r3, r1
 8001e36:	4621      	mov	r1, r4
 8001e38:	fb01 f303 	mul.w	r3, r1, r3
 8001e3c:	4413      	add	r3, r2
 8001e3e:	4622      	mov	r2, r4
 8001e40:	69b9      	ldr	r1, [r7, #24]
 8001e42:	fba2 ab01 	umull	sl, fp, r2, r1
 8001e46:	445b      	add	r3, fp
 8001e48:	469b      	mov	fp, r3
 8001e4a:	f04f 0200 	mov.w	r2, #0
 8001e4e:	f04f 0300 	mov.w	r3, #0
 8001e52:	ea4f 421a 	mov.w	r2, sl, lsr #16
 8001e56:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
 8001e5a:	ea4f 432b 	mov.w	r3, fp, asr #16
 8001e5e:	4613      	mov	r3, r2
 8001e60:	627b      	str	r3, [r7, #36]	@ 0x24
		i_phase = (int32_t)((((((int64_t)(vi_phase - V_CENTER)) * 1000) / 11) << 16) / (int64_t)(R_SHUNT));
 8001e62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e64:	f5a3 33d3 	sub.w	r3, r3, #108032	@ 0x1a600
 8001e68:	3b66      	subs	r3, #102	@ 0x66
 8001e6a:	17da      	asrs	r2, r3, #31
 8001e6c:	603b      	str	r3, [r7, #0]
 8001e6e:	607a      	str	r2, [r7, #4]
 8001e70:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001e74:	4622      	mov	r2, r4
 8001e76:	462b      	mov	r3, r5
 8001e78:	f04f 0000 	mov.w	r0, #0
 8001e7c:	f04f 0100 	mov.w	r1, #0
 8001e80:	0159      	lsls	r1, r3, #5
 8001e82:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e86:	0150      	lsls	r0, r2, #5
 8001e88:	4602      	mov	r2, r0
 8001e8a:	460b      	mov	r3, r1
 8001e8c:	4621      	mov	r1, r4
 8001e8e:	ebb2 0801 	subs.w	r8, r2, r1
 8001e92:	4629      	mov	r1, r5
 8001e94:	eb63 0901 	sbc.w	r9, r3, r1
 8001e98:	f04f 0200 	mov.w	r2, #0
 8001e9c:	f04f 0300 	mov.w	r3, #0
 8001ea0:	ea4f 0389 	mov.w	r3, r9, lsl #2
 8001ea4:	ea43 7398 	orr.w	r3, r3, r8, lsr #30
 8001ea8:	ea4f 0288 	mov.w	r2, r8, lsl #2
 8001eac:	4690      	mov	r8, r2
 8001eae:	4699      	mov	r9, r3
 8001eb0:	4623      	mov	r3, r4
 8001eb2:	eb18 0303 	adds.w	r3, r8, r3
 8001eb6:	613b      	str	r3, [r7, #16]
 8001eb8:	462b      	mov	r3, r5
 8001eba:	eb49 0303 	adc.w	r3, r9, r3
 8001ebe:	617b      	str	r3, [r7, #20]
 8001ec0:	f04f 0200 	mov.w	r2, #0
 8001ec4:	f04f 0300 	mov.w	r3, #0
 8001ec8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001ecc:	4629      	mov	r1, r5
 8001ece:	00cb      	lsls	r3, r1, #3
 8001ed0:	4621      	mov	r1, r4
 8001ed2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001ed6:	4621      	mov	r1, r4
 8001ed8:	00ca      	lsls	r2, r1, #3
 8001eda:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8001ede:	4610      	mov	r0, r2
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	f04f 020b 	mov.w	r2, #11
 8001ee6:	f04f 0300 	mov.w	r3, #0
 8001eea:	f7fe fe5d 	bl	8000ba8 <__aeabi_ldivmod>
 8001eee:	4602      	mov	r2, r0
 8001ef0:	460b      	mov	r3, r1
 8001ef2:	f04f 0000 	mov.w	r0, #0
 8001ef6:	f04f 0100 	mov.w	r1, #0
 8001efa:	0419      	lsls	r1, r3, #16
 8001efc:	ea41 4112 	orr.w	r1, r1, r2, lsr #16
 8001f00:	0410      	lsls	r0, r2, #16
 8001f02:	f640 42cc 	movw	r2, #3276	@ 0xccc
 8001f06:	f04f 0300 	mov.w	r3, #0
 8001f0a:	f7fe fe4d 	bl	8000ba8 <__aeabi_ldivmod>
 8001f0e:	4602      	mov	r2, r0
 8001f10:	460b      	mov	r3, r1
 8001f12:	4613      	mov	r3, r2
 8001f14:	623b      	str	r3, [r7, #32]
		motor_current_buff[i] = (int16_t)(i_phase >> 16);
 8001f16:	6a3b      	ldr	r3, [r7, #32]
 8001f18:	141b      	asrs	r3, r3, #16
 8001f1a:	b21b      	sxth	r3, r3
 8001f1c:	490c      	ldr	r1, [pc, #48]	@ (8001f50 <APP_CurrentConv+0x1b4>)
 8001f1e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001f20:	f821 3012 	strh.w	r3, [r1, r2, lsl #1]
	for(size_t i = 0; i < 3; i++)
 8001f24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f26:	3301      	adds	r3, #1
 8001f28:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001f2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f2c:	2b02      	cmp	r3, #2
 8001f2e:	f67f af63 	bls.w	8001df8 <APP_CurrentConv+0x5c>
	}
}
 8001f32:	bf00      	nop
 8001f34:	bf00      	nop
 8001f36:	3730      	adds	r7, #48	@ 0x30
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001f3e:	bf00      	nop
 8001f40:	20000284 	.word	0x20000284
 8001f44:	00013c28 	.word	0x00013c28
 8001f48:	20000290 	.word	0x20000290
 8001f4c:	80080081 	.word	0x80080081
 8001f50:	200002a8 	.word	0x200002a8

08001f54 <q31_mul>:
{
 8001f54:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 8001f58:	b085      	sub	sp, #20
 8001f5a:	af00      	add	r7, sp, #0
 8001f5c:	6078      	str	r0, [r7, #4]
 8001f5e:	6039      	str	r1, [r7, #0]
	int64_t t = (int64_t) a * (int64_t) b;
 8001f60:	6879      	ldr	r1, [r7, #4]
 8001f62:	17c8      	asrs	r0, r1, #31
 8001f64:	4688      	mov	r8, r1
 8001f66:	4681      	mov	r9, r0
 8001f68:	6839      	ldr	r1, [r7, #0]
 8001f6a:	17c8      	asrs	r0, r1, #31
 8001f6c:	460c      	mov	r4, r1
 8001f6e:	4605      	mov	r5, r0
 8001f70:	fb04 f009 	mul.w	r0, r4, r9
 8001f74:	fb08 f105 	mul.w	r1, r8, r5
 8001f78:	4401      	add	r1, r0
 8001f7a:	fba8 2304 	umull	r2, r3, r8, r4
 8001f7e:	4419      	add	r1, r3
 8001f80:	460b      	mov	r3, r1
 8001f82:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8001f86:	e9c7 2302 	strd	r2, r3, [r7, #8]
	t >>= 31;
 8001f8a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001f8e:	f04f 0200 	mov.w	r2, #0
 8001f92:	f04f 0300 	mov.w	r3, #0
 8001f96:	0fc2      	lsrs	r2, r0, #31
 8001f98:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8001f9c:	17cb      	asrs	r3, r1, #31
 8001f9e:	e9c7 2302 	strd	r2, r3, [r7, #8]
	if (t > 0x7FFFFFFFLL)
 8001fa2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001fa6:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8001faa:	f173 0300 	sbcs.w	r3, r3, #0
 8001fae:	db05      	blt.n	8001fbc <q31_mul+0x68>
		t = 0x7FFFFFFFLL;
 8001fb0:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8001fb4:	f04f 0300 	mov.w	r3, #0
 8001fb8:	e9c7 2302 	strd	r2, r3, [r7, #8]
	if (t < -0x80000000LL)
 8001fbc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001fc0:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8001fc4:	f173 33ff 	sbcs.w	r3, r3, #4294967295
 8001fc8:	da05      	bge.n	8001fd6 <q31_mul+0x82>
		t = -0x80000000LL;
 8001fca:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001fce:	f04f 33ff 	mov.w	r3, #4294967295
 8001fd2:	e9c7 2302 	strd	r2, r3, [r7, #8]
	return (int32_t) t;
 8001fd6:	68bb      	ldr	r3, [r7, #8]
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	3714      	adds	r7, #20
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 8001fe2:	4770      	bx	lr

08001fe4 <q31_div>:
{
 8001fe4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001fe8:	b084      	sub	sp, #16
 8001fea:	af00      	add	r7, sp, #0
 8001fec:	6078      	str	r0, [r7, #4]
 8001fee:	6039      	str	r1, [r7, #0]
	if (b == 0)
 8001ff0:	6839      	ldr	r1, [r7, #0]
 8001ff2:	2900      	cmp	r1, #0
 8001ff4:	d108      	bne.n	8002008 <q31_div+0x24>
		return (a >= 0) ? 0x7FFFFFFF : (int32_t) 0x80000000;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	db02      	blt.n	8002002 <q31_div+0x1e>
 8001ffc:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8002000:	e031      	b.n	8002066 <q31_div+0x82>
 8002002:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8002006:	e02e      	b.n	8002066 <q31_div+0x82>
	int64_t t = ((int64_t) a << 31) / (int64_t) b;
 8002008:	6879      	ldr	r1, [r7, #4]
 800200a:	17c8      	asrs	r0, r1, #31
 800200c:	460a      	mov	r2, r1
 800200e:	4603      	mov	r3, r0
 8002010:	1055      	asrs	r5, r2, #1
 8002012:	07d4      	lsls	r4, r2, #31
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	17da      	asrs	r2, r3, #31
 8002018:	4698      	mov	r8, r3
 800201a:	4691      	mov	r9, r2
 800201c:	4642      	mov	r2, r8
 800201e:	464b      	mov	r3, r9
 8002020:	4620      	mov	r0, r4
 8002022:	4629      	mov	r1, r5
 8002024:	f7fe fdc0 	bl	8000ba8 <__aeabi_ldivmod>
 8002028:	4602      	mov	r2, r0
 800202a:	460b      	mov	r3, r1
 800202c:	e9c7 2302 	strd	r2, r3, [r7, #8]
	if (t > 0x7FFFFFFFLL)
 8002030:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002034:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8002038:	f173 0300 	sbcs.w	r3, r3, #0
 800203c:	db05      	blt.n	800204a <q31_div+0x66>
		t = 0x7FFFFFFFLL;
 800203e:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8002042:	f04f 0300 	mov.w	r3, #0
 8002046:	e9c7 2302 	strd	r2, r3, [r7, #8]
	if (t < -0x80000000LL)
 800204a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800204e:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8002052:	f173 33ff 	sbcs.w	r3, r3, #4294967295
 8002056:	da05      	bge.n	8002064 <q31_div+0x80>
		t = -0x80000000LL;
 8002058:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800205c:	f04f 33ff 	mov.w	r3, #4294967295
 8002060:	e9c7 2302 	strd	r2, r3, [r7, #8]
	return (int32_t) t;
 8002064:	68bb      	ldr	r3, [r7, #8]
}
 8002066:	4618      	mov	r0, r3
 8002068:	3710      	adds	r7, #16
 800206a:	46bd      	mov	sp, r7
 800206c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08002070 <q31_add_sat>:
{
 8002070:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 8002074:	b085      	sub	sp, #20
 8002076:	af00      	add	r7, sp, #0
 8002078:	6078      	str	r0, [r7, #4]
 800207a:	6039      	str	r1, [r7, #0]
	int64_t t = (int64_t) a + (int64_t) b;
 800207c:	6879      	ldr	r1, [r7, #4]
 800207e:	17c8      	asrs	r0, r1, #31
 8002080:	460c      	mov	r4, r1
 8002082:	4605      	mov	r5, r0
 8002084:	6839      	ldr	r1, [r7, #0]
 8002086:	17c8      	asrs	r0, r1, #31
 8002088:	460a      	mov	r2, r1
 800208a:	4603      	mov	r3, r0
 800208c:	eb14 0802 	adds.w	r8, r4, r2
 8002090:	eb45 0903 	adc.w	r9, r5, r3
 8002094:	e9c7 8902 	strd	r8, r9, [r7, #8]
	if (t > 0x7FFFFFFFLL)
 8002098:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800209c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80020a0:	f173 0300 	sbcs.w	r3, r3, #0
 80020a4:	db05      	blt.n	80020b2 <q31_add_sat+0x42>
		t = 0x7FFFFFFFLL;
 80020a6:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 80020aa:	f04f 0300 	mov.w	r3, #0
 80020ae:	e9c7 2302 	strd	r2, r3, [r7, #8]
	if (t < -0x80000000LL)
 80020b2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80020b6:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80020ba:	f173 33ff 	sbcs.w	r3, r3, #4294967295
 80020be:	da05      	bge.n	80020cc <q31_add_sat+0x5c>
		t = -0x80000000LL;
 80020c0:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80020c4:	f04f 33ff 	mov.w	r3, #4294967295
 80020c8:	e9c7 2302 	strd	r2, r3, [r7, #8]
	return (int32_t) t;
 80020cc:	68bb      	ldr	r3, [r7, #8]
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	3714      	adds	r7, #20
 80020d2:	46bd      	mov	sp, r7
 80020d4:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 80020d8:	4770      	bx	lr

080020da <q31_sub_sat>:
{
 80020da:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 80020de:	b085      	sub	sp, #20
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
 80020e4:	6039      	str	r1, [r7, #0]
	int64_t t = (int64_t) a - (int64_t) b;
 80020e6:	6879      	ldr	r1, [r7, #4]
 80020e8:	17c8      	asrs	r0, r1, #31
 80020ea:	460c      	mov	r4, r1
 80020ec:	4605      	mov	r5, r0
 80020ee:	6839      	ldr	r1, [r7, #0]
 80020f0:	17c8      	asrs	r0, r1, #31
 80020f2:	460a      	mov	r2, r1
 80020f4:	4603      	mov	r3, r0
 80020f6:	ebb4 0802 	subs.w	r8, r4, r2
 80020fa:	eb65 0903 	sbc.w	r9, r5, r3
 80020fe:	e9c7 8902 	strd	r8, r9, [r7, #8]
	if (t > 0x7FFFFFFFLL)
 8002102:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002106:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 800210a:	f173 0300 	sbcs.w	r3, r3, #0
 800210e:	db05      	blt.n	800211c <q31_sub_sat+0x42>
		t = 0x7FFFFFFFLL;
 8002110:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8002114:	f04f 0300 	mov.w	r3, #0
 8002118:	e9c7 2302 	strd	r2, r3, [r7, #8]
	if (t < -0x80000000LL)
 800211c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002120:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8002124:	f173 33ff 	sbcs.w	r3, r3, #4294967295
 8002128:	da05      	bge.n	8002136 <q31_sub_sat+0x5c>
		t = -0x80000000LL;
 800212a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800212e:	f04f 33ff 	mov.w	r3, #4294967295
 8002132:	e9c7 2302 	strd	r2, r3, [r7, #8]
	return (int32_t) t;
 8002136:	68bb      	ldr	r3, [r7, #8]
}
 8002138:	4618      	mov	r0, r3
 800213a:	3714      	adds	r7, #20
 800213c:	46bd      	mov	sp, r7
 800213e:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 8002142:	4770      	bx	lr

08002144 <BEMF_PLL_Init>:
#include "bemf_pll.h"
#include "fixedpoint.h"


void BEMF_PLL_Init(BEMF_PLL_t *o)
{
 8002144:	b480      	push	{r7}
 8002146:	b083      	sub	sp, #12
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
	o->theta_q31 = 0;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2200      	movs	r2, #0
 8002150:	601a      	str	r2, [r3, #0]
	o->omega_q31 = 0;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2200      	movs	r2, #0
 8002156:	605a      	str	r2, [r3, #4]
	o->integ_q31 = 0;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2200      	movs	r2, #0
 800215c:	611a      	str	r2, [r3, #16]
	o->i_alpha_prev = 0;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2200      	movs	r2, #0
 8002162:	629a      	str	r2, [r3, #40]	@ 0x28
	o->i_beta_prev = 0;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2200      	movs	r2, #0
 8002168:	62da      	str	r2, [r3, #44]	@ 0x2c
	o->di_alpha_q31 = 0;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2200      	movs	r2, #0
 800216e:	631a      	str	r2, [r3, #48]	@ 0x30
	o->di_beta_q31 = 0;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2200      	movs	r2, #0
 8002174:	635a      	str	r2, [r3, #52]	@ 0x34
	o->e_alpha_q31 = 0;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2200      	movs	r2, #0
 800217a:	639a      	str	r2, [r3, #56]	@ 0x38
	o->e_beta_q31 = 0;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2200      	movs	r2, #0
 8002180:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8002182:	bf00      	nop
 8002184:	370c      	adds	r7, #12
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr

0800218e <BEMF_PLL_Step>:

void BEMF_PLL_Step(BEMF_PLL_t *o, int32_t v_alpha_q31, int32_t v_beta_q31,
		int32_t i_alpha_q31, int32_t i_beta_q31)
{
 800218e:	b590      	push	{r4, r7, lr}
 8002190:	b099      	sub	sp, #100	@ 0x64
 8002192:	af00      	add	r7, sp, #0
 8002194:	60f8      	str	r0, [r7, #12]
 8002196:	60b9      	str	r1, [r7, #8]
 8002198:	607a      	str	r2, [r7, #4]
 800219a:	603b      	str	r3, [r7, #0]
	int32_t di_a = q31_sub_sat(i_alpha_q31, o->i_alpha_prev);
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021a0:	4619      	mov	r1, r3
 80021a2:	6838      	ldr	r0, [r7, #0]
 80021a4:	f7ff ff99 	bl	80020da <q31_sub_sat>
 80021a8:	65f8      	str	r0, [r7, #92]	@ 0x5c
	int32_t di_b = q31_sub_sat(i_beta_q31, o->i_beta_prev);
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021ae:	4619      	mov	r1, r3
 80021b0:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 80021b2:	f7ff ff92 	bl	80020da <q31_sub_sat>
 80021b6:	65b8      	str	r0, [r7, #88]	@ 0x58

	int32_t di_alpha_inst = q31_div(di_a, o->Ts_q31);
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	69db      	ldr	r3, [r3, #28]
 80021bc:	4619      	mov	r1, r3
 80021be:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 80021c0:	f7ff ff10 	bl	8001fe4 <q31_div>
 80021c4:	6578      	str	r0, [r7, #84]	@ 0x54
	int32_t di_beta_inst = q31_div(di_b, o->Ts_q31);
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	69db      	ldr	r3, [r3, #28]
 80021ca:	4619      	mov	r1, r3
 80021cc:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80021ce:	f7ff ff09 	bl	8001fe4 <q31_div>
 80021d2:	6538      	str	r0, [r7, #80]	@ 0x50

	int32_t one_minus_alpha = q31_sub_sat(Q31_ONE, o->alpha_q31);
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021d8:	4619      	mov	r1, r3
 80021da:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 80021de:	f7ff ff7c 	bl	80020da <q31_sub_sat>
 80021e2:	64f8      	str	r0, [r7, #76]	@ 0x4c
	o->di_alpha_q31 = q31_add_sat(q31_mul(o->alpha_q31, di_alpha_inst),
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021e8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80021ea:	4618      	mov	r0, r3
 80021ec:	f7ff feb2 	bl	8001f54 <q31_mul>
 80021f0:	4604      	mov	r4, r0
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021f6:	4619      	mov	r1, r3
 80021f8:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80021fa:	f7ff feab 	bl	8001f54 <q31_mul>
 80021fe:	4603      	mov	r3, r0
 8002200:	4619      	mov	r1, r3
 8002202:	4620      	mov	r0, r4
 8002204:	f7ff ff34 	bl	8002070 <q31_add_sat>
 8002208:	4602      	mov	r2, r0
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	631a      	str	r2, [r3, #48]	@ 0x30
			q31_mul(one_minus_alpha, o->di_alpha_q31));
	o->di_beta_q31 = q31_add_sat(q31_mul(o->alpha_q31, di_beta_inst),
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002212:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8002214:	4618      	mov	r0, r3
 8002216:	f7ff fe9d 	bl	8001f54 <q31_mul>
 800221a:	4604      	mov	r4, r0
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002220:	4619      	mov	r1, r3
 8002222:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8002224:	f7ff fe96 	bl	8001f54 <q31_mul>
 8002228:	4603      	mov	r3, r0
 800222a:	4619      	mov	r1, r3
 800222c:	4620      	mov	r0, r4
 800222e:	f7ff ff1f 	bl	8002070 <q31_add_sat>
 8002232:	4602      	mov	r2, r0
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	635a      	str	r2, [r3, #52]	@ 0x34
			q31_mul(one_minus_alpha, o->di_beta_q31));

	o->i_alpha_prev = i_alpha_q31;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	683a      	ldr	r2, [r7, #0]
 800223c:	629a      	str	r2, [r3, #40]	@ 0x28
	o->i_beta_prev = i_beta_q31;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8002242:	62da      	str	r2, [r3, #44]	@ 0x2c

	int32_t Ri_a = q31_mul(o->Rs_q31, i_alpha_q31);
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	695b      	ldr	r3, [r3, #20]
 8002248:	6839      	ldr	r1, [r7, #0]
 800224a:	4618      	mov	r0, r3
 800224c:	f7ff fe82 	bl	8001f54 <q31_mul>
 8002250:	64b8      	str	r0, [r7, #72]	@ 0x48
	int32_t Ri_b = q31_mul(o->Rs_q31, i_beta_q31);
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	695b      	ldr	r3, [r3, #20]
 8002256:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8002258:	4618      	mov	r0, r3
 800225a:	f7ff fe7b 	bl	8001f54 <q31_mul>
 800225e:	6478      	str	r0, [r7, #68]	@ 0x44
	int32_t Ldidt_a = q31_mul(o->Ls_q31, o->di_alpha_q31);
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	699a      	ldr	r2, [r3, #24]
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002268:	4619      	mov	r1, r3
 800226a:	4610      	mov	r0, r2
 800226c:	f7ff fe72 	bl	8001f54 <q31_mul>
 8002270:	6438      	str	r0, [r7, #64]	@ 0x40
	int32_t Ldidt_b = q31_mul(o->Ls_q31, o->di_beta_q31);
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	699a      	ldr	r2, [r3, #24]
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800227a:	4619      	mov	r1, r3
 800227c:	4610      	mov	r0, r2
 800227e:	f7ff fe69 	bl	8001f54 <q31_mul>
 8002282:	63f8      	str	r0, [r7, #60]	@ 0x3c

	int32_t sub_a = q31_add_sat(Ri_a, Ldidt_a);
 8002284:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002286:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8002288:	f7ff fef2 	bl	8002070 <q31_add_sat>
 800228c:	63b8      	str	r0, [r7, #56]	@ 0x38
	int32_t sub_b = q31_add_sat(Ri_b, Ldidt_b);
 800228e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002290:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8002292:	f7ff feed 	bl	8002070 <q31_add_sat>
 8002296:	6378      	str	r0, [r7, #52]	@ 0x34

	int32_t e_a = q31_sub_sat(v_alpha_q31, sub_a);
 8002298:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800229a:	68b8      	ldr	r0, [r7, #8]
 800229c:	f7ff ff1d 	bl	80020da <q31_sub_sat>
 80022a0:	6338      	str	r0, [r7, #48]	@ 0x30
	int32_t e_b = q31_sub_sat(v_beta_q31, sub_b);
 80022a2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80022a4:	6878      	ldr	r0, [r7, #4]
 80022a6:	f7ff ff18 	bl	80020da <q31_sub_sat>
 80022aa:	62f8      	str	r0, [r7, #44]	@ 0x2c

	o->e_alpha_q31 = e_a;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80022b0:	639a      	str	r2, [r3, #56]	@ 0x38
	o->e_beta_q31 = e_b;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80022b6:	63da      	str	r2, [r3, #60]	@ 0x3c

	int32_t s, c;
	sincos_q31(o->theta_q31, &s, &c);
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f107 0210 	add.w	r2, r7, #16
 80022c0:	f107 0114 	add.w	r1, r7, #20
 80022c4:	4618      	mov	r0, r3
 80022c6:	f7ff f85b 	bl	8001380 <sincos_q31>
	int32_t e_q1 = q31_mul(e_a, -s);
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	425b      	negs	r3, r3
 80022ce:	4619      	mov	r1, r3
 80022d0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80022d2:	f7ff fe3f 	bl	8001f54 <q31_mul>
 80022d6:	62b8      	str	r0, [r7, #40]	@ 0x28
	int32_t e_q2 = q31_mul(e_b, c);
 80022d8:	693b      	ldr	r3, [r7, #16]
 80022da:	4619      	mov	r1, r3
 80022dc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80022de:	f7ff fe39 	bl	8001f54 <q31_mul>
 80022e2:	6278      	str	r0, [r7, #36]	@ 0x24
	int32_t eps = q31_add_sat(e_q1, e_q2);
 80022e4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80022e6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80022e8:	f7ff fec2 	bl	8002070 <q31_add_sat>
 80022ec:	6238      	str	r0, [r7, #32]

	o->integ_q31 = q31_add_sat(o->integ_q31, q31_mul(o->ki_q31, eps));
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	691c      	ldr	r4, [r3, #16]
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	68db      	ldr	r3, [r3, #12]
 80022f6:	6a39      	ldr	r1, [r7, #32]
 80022f8:	4618      	mov	r0, r3
 80022fa:	f7ff fe2b 	bl	8001f54 <q31_mul>
 80022fe:	4603      	mov	r3, r0
 8002300:	4619      	mov	r1, r3
 8002302:	4620      	mov	r0, r4
 8002304:	f7ff feb4 	bl	8002070 <q31_add_sat>
 8002308:	4602      	mov	r2, r0
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	611a      	str	r2, [r3, #16]
	if (o->integ_q31 > o->integ_max_q31)
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	691a      	ldr	r2, [r3, #16]
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002316:	429a      	cmp	r2, r3
 8002318:	dd03      	ble.n	8002322 <BEMF_PLL_Step+0x194>
		o->integ_q31 = o->integ_max_q31;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	611a      	str	r2, [r3, #16]
	if (o->integ_q31 < o->integ_min_q31)
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	691a      	ldr	r2, [r3, #16]
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800232a:	429a      	cmp	r2, r3
 800232c:	da03      	bge.n	8002336 <BEMF_PLL_Step+0x1a8>
		o->integ_q31 = o->integ_min_q31;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	611a      	str	r2, [r3, #16]

	int32_t prop = q31_mul(o->kp_q31, eps);
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	6a39      	ldr	r1, [r7, #32]
 800233c:	4618      	mov	r0, r3
 800233e:	f7ff fe09 	bl	8001f54 <q31_mul>
 8002342:	61f8      	str	r0, [r7, #28]
	int32_t domega = q31_add_sat(prop, o->integ_q31);
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	691b      	ldr	r3, [r3, #16]
 8002348:	4619      	mov	r1, r3
 800234a:	69f8      	ldr	r0, [r7, #28]
 800234c:	f7ff fe90 	bl	8002070 <q31_add_sat>
 8002350:	61b8      	str	r0, [r7, #24]
	o->omega_q31 = q31_add_sat(o->omega_q31, domega);
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	69b9      	ldr	r1, [r7, #24]
 8002358:	4618      	mov	r0, r3
 800235a:	f7ff fe89 	bl	8002070 <q31_add_sat>
 800235e:	4602      	mov	r2, r0
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	605a      	str	r2, [r3, #4]

	if (o->omega_q31 > o->omega_max_q31)
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	685a      	ldr	r2, [r3, #4]
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800236c:	429a      	cmp	r2, r3
 800236e:	dd03      	ble.n	8002378 <BEMF_PLL_Step+0x1ea>
		o->omega_q31 = o->omega_max_q31;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	605a      	str	r2, [r3, #4]
}
 8002378:	bf00      	nop
 800237a:	3764      	adds	r7, #100	@ 0x64
 800237c:	46bd      	mov	sp, r7
 800237e:	bd90      	pop	{r4, r7, pc}

08002380 <ENC_Init>:

#include "encoder.h"

// ---- 初期化 ----
void ENC_Init(Encoder_t *enc, int32_t step_q31, int32_t min_q31, int32_t max_q31)
{
 8002380:	b480      	push	{r7}
 8002382:	b085      	sub	sp, #20
 8002384:	af00      	add	r7, sp, #0
 8002386:	60f8      	str	r0, [r7, #12]
 8002388:	60b9      	str	r1, [r7, #8]
 800238a:	607a      	str	r2, [r7, #4]
 800238c:	603b      	str	r3, [r7, #0]
    enc->a = 0;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	2200      	movs	r2, #0
 8002392:	701a      	strb	r2, [r3, #0]
    enc->b = 0;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	2200      	movs	r2, #0
 8002398:	705a      	strb	r2, [r3, #1]
    enc->prev_state = 0;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	2200      	movs	r2, #0
 800239e:	709a      	strb	r2, [r3, #2]
    enc->counter = 0;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	2200      	movs	r2, #0
 80023a4:	605a      	str	r2, [r3, #4]
    enc->filt_counter = 0;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	2200      	movs	r2, #0
 80023aa:	609a      	str	r2, [r3, #8]
    enc->step_q31 = step_q31;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	68ba      	ldr	r2, [r7, #8]
 80023b0:	60da      	str	r2, [r3, #12]
    enc->min_q31 = min_q31;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	687a      	ldr	r2, [r7, #4]
 80023b6:	611a      	str	r2, [r3, #16]
    enc->max_q31 = max_q31;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	683a      	ldr	r2, [r7, #0]
 80023bc:	615a      	str	r2, [r3, #20]
    enc->current_q31 = 0;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	2200      	movs	r2, #0
 80023c2:	619a      	str	r2, [r3, #24]
    enc->stable_count = 0;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	2200      	movs	r2, #0
 80023c8:	771a      	strb	r2, [r3, #28]
    enc->debounce = 0;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	2200      	movs	r2, #0
 80023ce:	775a      	strb	r2, [r3, #29]
}
 80023d0:	bf00      	nop
 80023d2:	3714      	adds	r7, #20
 80023d4:	46bd      	mov	sp, r7
 80023d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023da:	4770      	bx	lr

080023dc <ENC_Scan>:

// ---- A/B入力から回転方向を算出する ----
// 呼び出し周期: 約1〜2ms（タイマ割り込み内）
void ENC_Scan(Encoder_t *enc, uint8_t pin_a, uint8_t pin_b)
{
 80023dc:	b480      	push	{r7}
 80023de:	b085      	sub	sp, #20
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
 80023e4:	460b      	mov	r3, r1
 80023e6:	70fb      	strb	r3, [r7, #3]
 80023e8:	4613      	mov	r3, r2
 80023ea:	70bb      	strb	r3, [r7, #2]
	static uint8_t buff0 = 0, buff1 = 0, buff2 = 0, buff3 = 0;
    uint8_t ab = ((pin_a ? 0 : 1) << 1) | (pin_b ? 0 : 1);
 80023ec:	78fb      	ldrb	r3, [r7, #3]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d101      	bne.n	80023f6 <ENC_Scan+0x1a>
 80023f2:	2202      	movs	r2, #2
 80023f4:	e000      	b.n	80023f8 <ENC_Scan+0x1c>
 80023f6:	2200      	movs	r2, #0
 80023f8:	78bb      	ldrb	r3, [r7, #2]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	bf0c      	ite	eq
 80023fe:	2301      	moveq	r3, #1
 8002400:	2300      	movne	r3, #0
 8002402:	b2db      	uxtb	r3, r3
 8002404:	b25b      	sxtb	r3, r3
 8002406:	4313      	orrs	r3, r2
 8002408:	b25b      	sxtb	r3, r3
 800240a:	73fb      	strb	r3, [r7, #15]
    uint8_t prev = buff1;
 800240c:	4b2f      	ldr	r3, [pc, #188]	@ (80024cc <ENC_Scan+0xf0>)
 800240e:	781b      	ldrb	r3, [r3, #0]
 8002410:	73bb      	strb	r3, [r7, #14]

    buff0 = ab;
 8002412:	4a2f      	ldr	r2, [pc, #188]	@ (80024d0 <ENC_Scan+0xf4>)
 8002414:	7bfb      	ldrb	r3, [r7, #15]
 8002416:	7013      	strb	r3, [r2, #0]
    buff2 &= (buff1 | buff0);
 8002418:	4b2c      	ldr	r3, [pc, #176]	@ (80024cc <ENC_Scan+0xf0>)
 800241a:	781a      	ldrb	r2, [r3, #0]
 800241c:	4b2c      	ldr	r3, [pc, #176]	@ (80024d0 <ENC_Scan+0xf4>)
 800241e:	781b      	ldrb	r3, [r3, #0]
 8002420:	4313      	orrs	r3, r2
 8002422:	b2da      	uxtb	r2, r3
 8002424:	4b2b      	ldr	r3, [pc, #172]	@ (80024d4 <ENC_Scan+0xf8>)
 8002426:	781b      	ldrb	r3, [r3, #0]
 8002428:	4013      	ands	r3, r2
 800242a:	b2da      	uxtb	r2, r3
 800242c:	4b29      	ldr	r3, [pc, #164]	@ (80024d4 <ENC_Scan+0xf8>)
 800242e:	701a      	strb	r2, [r3, #0]
    buff2 |= (buff1 & buff0);
 8002430:	4b26      	ldr	r3, [pc, #152]	@ (80024cc <ENC_Scan+0xf0>)
 8002432:	781a      	ldrb	r2, [r3, #0]
 8002434:	4b26      	ldr	r3, [pc, #152]	@ (80024d0 <ENC_Scan+0xf4>)
 8002436:	781b      	ldrb	r3, [r3, #0]
 8002438:	4013      	ands	r3, r2
 800243a:	b2da      	uxtb	r2, r3
 800243c:	4b25      	ldr	r3, [pc, #148]	@ (80024d4 <ENC_Scan+0xf8>)
 800243e:	781b      	ldrb	r3, [r3, #0]
 8002440:	4313      	orrs	r3, r2
 8002442:	b2da      	uxtb	r2, r3
 8002444:	4b23      	ldr	r3, [pc, #140]	@ (80024d4 <ENC_Scan+0xf8>)
 8002446:	701a      	strb	r2, [r3, #0]
    buff1 = buff0;
 8002448:	4b21      	ldr	r3, [pc, #132]	@ (80024d0 <ENC_Scan+0xf4>)
 800244a:	781a      	ldrb	r2, [r3, #0]
 800244c:	4b1f      	ldr	r3, [pc, #124]	@ (80024cc <ENC_Scan+0xf0>)
 800244e:	701a      	strb	r2, [r3, #0]
    buff3 &= (buff2 | buff1);
 8002450:	4b20      	ldr	r3, [pc, #128]	@ (80024d4 <ENC_Scan+0xf8>)
 8002452:	781a      	ldrb	r2, [r3, #0]
 8002454:	4b1d      	ldr	r3, [pc, #116]	@ (80024cc <ENC_Scan+0xf0>)
 8002456:	781b      	ldrb	r3, [r3, #0]
 8002458:	4313      	orrs	r3, r2
 800245a:	b2da      	uxtb	r2, r3
 800245c:	4b1e      	ldr	r3, [pc, #120]	@ (80024d8 <ENC_Scan+0xfc>)
 800245e:	781b      	ldrb	r3, [r3, #0]
 8002460:	4013      	ands	r3, r2
 8002462:	b2da      	uxtb	r2, r3
 8002464:	4b1c      	ldr	r3, [pc, #112]	@ (80024d8 <ENC_Scan+0xfc>)
 8002466:	701a      	strb	r2, [r3, #0]
    buff3 |= (buff2 & buff1);
 8002468:	4b1a      	ldr	r3, [pc, #104]	@ (80024d4 <ENC_Scan+0xf8>)
 800246a:	781a      	ldrb	r2, [r3, #0]
 800246c:	4b17      	ldr	r3, [pc, #92]	@ (80024cc <ENC_Scan+0xf0>)
 800246e:	781b      	ldrb	r3, [r3, #0]
 8002470:	4013      	ands	r3, r2
 8002472:	b2da      	uxtb	r2, r3
 8002474:	4b18      	ldr	r3, [pc, #96]	@ (80024d8 <ENC_Scan+0xfc>)
 8002476:	781b      	ldrb	r3, [r3, #0]
 8002478:	4313      	orrs	r3, r2
 800247a:	b2da      	uxtb	r2, r3
 800247c:	4b16      	ldr	r3, [pc, #88]	@ (80024d8 <ENC_Scan+0xfc>)
 800247e:	701a      	strb	r2, [r3, #0]
    buff2 = buff1;
 8002480:	4b12      	ldr	r3, [pc, #72]	@ (80024cc <ENC_Scan+0xf0>)
 8002482:	781a      	ldrb	r2, [r3, #0]
 8002484:	4b13      	ldr	r3, [pc, #76]	@ (80024d4 <ENC_Scan+0xf8>)
 8002486:	701a      	strb	r2, [r3, #0]


    if(prev != buff3)
 8002488:	4b13      	ldr	r3, [pc, #76]	@ (80024d8 <ENC_Scan+0xfc>)
 800248a:	781b      	ldrb	r3, [r3, #0]
 800248c:	7bba      	ldrb	r2, [r7, #14]
 800248e:	429a      	cmp	r2, r3
 8002490:	d016      	beq.n	80024c0 <ENC_Scan+0xe4>
    {
    	if((buff3 & 1) != 0)
 8002492:	4b11      	ldr	r3, [pc, #68]	@ (80024d8 <ENC_Scan+0xfc>)
 8002494:	781b      	ldrb	r3, [r3, #0]
 8002496:	f003 0301 	and.w	r3, r3, #1
 800249a:	2b00      	cmp	r3, #0
 800249c:	d010      	beq.n	80024c0 <ENC_Scan+0xe4>
    	{
    		if((buff3 & 2) != 0)
 800249e:	4b0e      	ldr	r3, [pc, #56]	@ (80024d8 <ENC_Scan+0xfc>)
 80024a0:	781b      	ldrb	r3, [r3, #0]
 80024a2:	f003 0302 	and.w	r3, r3, #2
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d005      	beq.n	80024b6 <ENC_Scan+0xda>
    		{
    			enc->counter++;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	1c5a      	adds	r2, r3, #1
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	605a      	str	r2, [r3, #4]
    		{
    			enc->counter--;
    		}
    	}
    }
}
 80024b4:	e004      	b.n	80024c0 <ENC_Scan+0xe4>
    			enc->counter--;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	1e5a      	subs	r2, r3, #1
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	605a      	str	r2, [r3, #4]
}
 80024c0:	bf00      	nop
 80024c2:	3714      	adds	r7, #20
 80024c4:	46bd      	mov	sp, r7
 80024c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ca:	4770      	bx	lr
 80024cc:	200002b4 	.word	0x200002b4
 80024d0:	200002b5 	.word	0x200002b5
 80024d4:	200002b6 	.word	0x200002b6
 80024d8:	200002b7 	.word	0x200002b7

080024dc <ENC_Update>:

// ---- カウント値からQ31出力へ更新 ----
void ENC_Update(Encoder_t *enc)
{
 80024dc:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 80024e0:	b087      	sub	sp, #28
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	6078      	str	r0, [r7, #4]
    // LPFで滑らかにする（フィルタ係数 α=1/8 固定）
    int32_t diff = enc->counter - enc->filt_counter;
 80024e6:	6879      	ldr	r1, [r7, #4]
 80024e8:	6848      	ldr	r0, [r1, #4]
 80024ea:	6879      	ldr	r1, [r7, #4]
 80024ec:	6889      	ldr	r1, [r1, #8]
 80024ee:	1a41      	subs	r1, r0, r1
 80024f0:	6139      	str	r1, [r7, #16]
    enc->filt_counter += diff >> 3;
 80024f2:	6879      	ldr	r1, [r7, #4]
 80024f4:	6888      	ldr	r0, [r1, #8]
 80024f6:	6939      	ldr	r1, [r7, #16]
 80024f8:	10c9      	asrs	r1, r1, #3
 80024fa:	4408      	add	r0, r1
 80024fc:	6879      	ldr	r1, [r7, #4]
 80024fe:	6088      	str	r0, [r1, #8]

    // Q31正規化：1クリックあたり step_q31 増減
    int64_t tmp = (int64_t)enc->filt_counter * (int64_t)enc->step_q31;
 8002500:	6879      	ldr	r1, [r7, #4]
 8002502:	6889      	ldr	r1, [r1, #8]
 8002504:	17c8      	asrs	r0, r1, #31
 8002506:	4688      	mov	r8, r1
 8002508:	4681      	mov	r9, r0
 800250a:	6879      	ldr	r1, [r7, #4]
 800250c:	68c9      	ldr	r1, [r1, #12]
 800250e:	17c8      	asrs	r0, r1, #31
 8002510:	460c      	mov	r4, r1
 8002512:	4605      	mov	r5, r0
 8002514:	fb04 f009 	mul.w	r0, r4, r9
 8002518:	fb08 f105 	mul.w	r1, r8, r5
 800251c:	4401      	add	r1, r0
 800251e:	fba8 2304 	umull	r2, r3, r8, r4
 8002522:	4419      	add	r1, r3
 8002524:	460b      	mov	r3, r1
 8002526:	e9c7 2302 	strd	r2, r3, [r7, #8]
 800252a:	e9c7 2302 	strd	r2, r3, [r7, #8]
    int32_t q31_val = (int32_t)tmp;
 800252e:	68bb      	ldr	r3, [r7, #8]
 8002530:	617b      	str	r3, [r7, #20]

    if (q31_val > enc->max_q31) q31_val = enc->max_q31;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	695b      	ldr	r3, [r3, #20]
 8002536:	697a      	ldr	r2, [r7, #20]
 8002538:	429a      	cmp	r2, r3
 800253a:	dd02      	ble.n	8002542 <ENC_Update+0x66>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	695b      	ldr	r3, [r3, #20]
 8002540:	617b      	str	r3, [r7, #20]
    if (q31_val < enc->min_q31) q31_val = enc->min_q31;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	691b      	ldr	r3, [r3, #16]
 8002546:	697a      	ldr	r2, [r7, #20]
 8002548:	429a      	cmp	r2, r3
 800254a:	da02      	bge.n	8002552 <ENC_Update+0x76>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	691b      	ldr	r3, [r3, #16]
 8002550:	617b      	str	r3, [r7, #20]

    enc->current_q31 = q31_val;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	697a      	ldr	r2, [r7, #20]
 8002556:	619a      	str	r2, [r3, #24]
}
 8002558:	bf00      	nop
 800255a:	371c      	adds	r7, #28
 800255c:	46bd      	mov	sp, r7
 800255e:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 8002562:	4770      	bx	lr

08002564 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002564:	b480      	push	{r7}
 8002566:	b083      	sub	sp, #12
 8002568:	af00      	add	r7, sp, #0
 800256a:	4603      	mov	r3, r0
 800256c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800256e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002572:	2b00      	cmp	r3, #0
 8002574:	db0b      	blt.n	800258e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002576:	79fb      	ldrb	r3, [r7, #7]
 8002578:	f003 021f 	and.w	r2, r3, #31
 800257c:	4907      	ldr	r1, [pc, #28]	@ (800259c <__NVIC_EnableIRQ+0x38>)
 800257e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002582:	095b      	lsrs	r3, r3, #5
 8002584:	2001      	movs	r0, #1
 8002586:	fa00 f202 	lsl.w	r2, r0, r2
 800258a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800258e:	bf00      	nop
 8002590:	370c      	adds	r7, #12
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr
 800259a:	bf00      	nop
 800259c:	e000e100 	.word	0xe000e100

080025a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b083      	sub	sp, #12
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	4603      	mov	r3, r0
 80025a8:	6039      	str	r1, [r7, #0]
 80025aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	db0a      	blt.n	80025ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	b2da      	uxtb	r2, r3
 80025b8:	490c      	ldr	r1, [pc, #48]	@ (80025ec <__NVIC_SetPriority+0x4c>)
 80025ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025be:	0112      	lsls	r2, r2, #4
 80025c0:	b2d2      	uxtb	r2, r2
 80025c2:	440b      	add	r3, r1
 80025c4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025c8:	e00a      	b.n	80025e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	b2da      	uxtb	r2, r3
 80025ce:	4908      	ldr	r1, [pc, #32]	@ (80025f0 <__NVIC_SetPriority+0x50>)
 80025d0:	79fb      	ldrb	r3, [r7, #7]
 80025d2:	f003 030f 	and.w	r3, r3, #15
 80025d6:	3b04      	subs	r3, #4
 80025d8:	0112      	lsls	r2, r2, #4
 80025da:	b2d2      	uxtb	r2, r2
 80025dc:	440b      	add	r3, r1
 80025de:	761a      	strb	r2, [r3, #24]
}
 80025e0:	bf00      	nop
 80025e2:	370c      	adds	r7, #12
 80025e4:	46bd      	mov	sp, r7
 80025e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ea:	4770      	bx	lr
 80025ec:	e000e100 	.word	0xe000e100
 80025f0:	e000ed00 	.word	0xe000ed00

080025f4 <FW_InitClocksAndGPIO>:

volatile uint8_t count_flag = 0;
Encoder_t s_enc;

void FW_InitClocksAndGPIO(void)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	af00      	add	r7, sp, #0
	FW_InitClock();
 80025f8:	f000 f81a 	bl	8002630 <FW_InitClock>
	FW_InitGPIO();
 80025fc:	f000 f894 	bl	8002728 <FW_InitGPIO>

	RCC->APB2ENR |= RCC_APB2ENR_TIM1EN | RCC_APB2ENR_ADC1EN;
 8002600:	4b0a      	ldr	r3, [pc, #40]	@ (800262c <FW_InitClocksAndGPIO+0x38>)
 8002602:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002604:	4a09      	ldr	r2, [pc, #36]	@ (800262c <FW_InitClocksAndGPIO+0x38>)
 8002606:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800260a:	f043 0301 	orr.w	r3, r3, #1
 800260e:	6453      	str	r3, [r2, #68]	@ 0x44
	RCC->AHB1ENR |= RCC_AHB1ENR_DMA2EN;
 8002610:	4b06      	ldr	r3, [pc, #24]	@ (800262c <FW_InitClocksAndGPIO+0x38>)
 8002612:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002614:	4a05      	ldr	r2, [pc, #20]	@ (800262c <FW_InitClocksAndGPIO+0x38>)
 8002616:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800261a:	6313      	str	r3, [r2, #48]	@ 0x30
	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN | RCC_APB1ENR_TIM3EN | RCC_APB1ENR_TIM7EN;
 800261c:	4b03      	ldr	r3, [pc, #12]	@ (800262c <FW_InitClocksAndGPIO+0x38>)
 800261e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002620:	4a02      	ldr	r2, [pc, #8]	@ (800262c <FW_InitClocksAndGPIO+0x38>)
 8002622:	f043 0323 	orr.w	r3, r3, #35	@ 0x23
 8002626:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8002628:	bf00      	nop
 800262a:	bd80      	pop	{r7, pc}
 800262c:	40023800 	.word	0x40023800

08002630 <FW_InitClock>:

void FW_InitClock(void)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b082      	sub	sp, #8
 8002634:	af00      	add	r7, sp, #0
	RCC->CR |= RCC_CR_HSEON;
 8002636:	4b3b      	ldr	r3, [pc, #236]	@ (8002724 <FW_InitClock+0xf4>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a3a      	ldr	r2, [pc, #232]	@ (8002724 <FW_InitClock+0xf4>)
 800263c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002640:	6013      	str	r3, [r2, #0]
	while((RCC->CR) & RCC_CR_HSERDY)
 8002642:	bf00      	nop
 8002644:	4b37      	ldr	r3, [pc, #220]	@ (8002724 <FW_InitClock+0xf4>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800264c:	2b00      	cmp	r3, #0
 800264e:	d1f9      	bne.n	8002644 <FW_InitClock+0x14>
	{
		// 何もしない
	}

	RCC->PLLCFGR |= RCC_PLLCFGR_PLLSRC;
 8002650:	4b34      	ldr	r3, [pc, #208]	@ (8002724 <FW_InitClock+0xf4>)
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	4a33      	ldr	r2, [pc, #204]	@ (8002724 <FW_InitClock+0xf4>)
 8002656:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800265a:	6053      	str	r3, [r2, #4]

	RCC->PLLCFGR &= (~(63 << RCC_PLLCFGR_PLLM_Pos));
 800265c:	4b31      	ldr	r3, [pc, #196]	@ (8002724 <FW_InitClock+0xf4>)
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	4a30      	ldr	r2, [pc, #192]	@ (8002724 <FW_InitClock+0xf4>)
 8002662:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002666:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= (12 << RCC_PLLCFGR_PLLM_Pos);
 8002668:	4b2e      	ldr	r3, [pc, #184]	@ (8002724 <FW_InitClock+0xf4>)
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	4a2d      	ldr	r2, [pc, #180]	@ (8002724 <FW_InitClock+0xf4>)
 800266e:	f043 030c 	orr.w	r3, r3, #12
 8002672:	6053      	str	r3, [r2, #4]

	RCC->PLLCFGR &= (~(511 << RCC_PLLCFGR_PLLN_Pos));
 8002674:	4b2b      	ldr	r3, [pc, #172]	@ (8002724 <FW_InitClock+0xf4>)
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	4a2a      	ldr	r2, [pc, #168]	@ (8002724 <FW_InitClock+0xf4>)
 800267a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800267e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002682:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= (168 << RCC_PLLCFGR_PLLN_Pos);
 8002684:	4b27      	ldr	r3, [pc, #156]	@ (8002724 <FW_InitClock+0xf4>)
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	4a26      	ldr	r2, [pc, #152]	@ (8002724 <FW_InitClock+0xf4>)
 800268a:	f443 5328 	orr.w	r3, r3, #10752	@ 0x2a00
 800268e:	6053      	str	r3, [r2, #4]

	RCC->PLLCFGR &= (3 << RCC_PLLCFGR_PLLP_Pos);
 8002690:	4b24      	ldr	r3, [pc, #144]	@ (8002724 <FW_InitClock+0xf4>)
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	4a23      	ldr	r2, [pc, #140]	@ (8002724 <FW_InitClock+0xf4>)
 8002696:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800269a:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= (0 << RCC_PLLCFGR_PLLP_Pos);
 800269c:	4b21      	ldr	r3, [pc, #132]	@ (8002724 <FW_InitClock+0xf4>)
 800269e:	4a21      	ldr	r2, [pc, #132]	@ (8002724 <FW_InitClock+0xf4>)
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	6053      	str	r3, [r2, #4]

	RCC->PLLCFGR &= (~(15 << RCC_PLLCFGR_PLLQ_Pos));
 80026a4:	4b1f      	ldr	r3, [pc, #124]	@ (8002724 <FW_InitClock+0xf4>)
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	4a1e      	ldr	r2, [pc, #120]	@ (8002724 <FW_InitClock+0xf4>)
 80026aa:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 80026ae:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= (7 << RCC_PLLCFGR_PLLQ_Pos);
 80026b0:	4b1c      	ldr	r3, [pc, #112]	@ (8002724 <FW_InitClock+0xf4>)
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	4a1b      	ldr	r2, [pc, #108]	@ (8002724 <FW_InitClock+0xf4>)
 80026b6:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80026ba:	6053      	str	r3, [r2, #4]

	RCC->CFGR |= (5 << RCC_CFGR_PPRE1_Pos);	// 4分周
 80026bc:	4b19      	ldr	r3, [pc, #100]	@ (8002724 <FW_InitClock+0xf4>)
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	4a18      	ldr	r2, [pc, #96]	@ (8002724 <FW_InitClock+0xf4>)
 80026c2:	f443 53a0 	orr.w	r3, r3, #5120	@ 0x1400
 80026c6:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= (4 << RCC_CFGR_PPRE2_Pos);	// 2分周
 80026c8:	4b16      	ldr	r3, [pc, #88]	@ (8002724 <FW_InitClock+0xf4>)
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	4a15      	ldr	r2, [pc, #84]	@ (8002724 <FW_InitClock+0xf4>)
 80026ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80026d2:	6093      	str	r3, [r2, #8]

	RCC->CR |= RCC_CR_PLLON;
 80026d4:	4b13      	ldr	r3, [pc, #76]	@ (8002724 <FW_InitClock+0xf4>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a12      	ldr	r2, [pc, #72]	@ (8002724 <FW_InitClock+0xf4>)
 80026da:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80026de:	6013      	str	r3, [r2, #0]
	while((RCC->CR) & RCC_CR_PLLRDY)
 80026e0:	bf00      	nop
 80026e2:	4b10      	ldr	r3, [pc, #64]	@ (8002724 <FW_InitClock+0xf4>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d1f9      	bne.n	80026e2 <FW_InitClock+0xb2>
	{
		// 何もしない
	}

	uint32_t tmp = (RCC->CFGR);
 80026ee:	4b0d      	ldr	r3, [pc, #52]	@ (8002724 <FW_InitClock+0xf4>)
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	607b      	str	r3, [r7, #4]
	tmp &= (~(RCC_CFGR_SW_Msk));
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	f023 0303 	bic.w	r3, r3, #3
 80026fa:	607b      	str	r3, [r7, #4]
	tmp |= (RCC_CFGR_SW_PLL);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	f043 0302 	orr.w	r3, r3, #2
 8002702:	607b      	str	r3, [r7, #4]
	RCC->CFGR = tmp;
 8002704:	4a07      	ldr	r2, [pc, #28]	@ (8002724 <FW_InitClock+0xf4>)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6093      	str	r3, [r2, #8]
	while(((RCC->CFGR) & RCC_CFGR_SWS) == RCC_CFGR_SWS_PLL)
 800270a:	bf00      	nop
 800270c:	4b05      	ldr	r3, [pc, #20]	@ (8002724 <FW_InitClock+0xf4>)
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	f003 030c 	and.w	r3, r3, #12
 8002714:	2b08      	cmp	r3, #8
 8002716:	d0f9      	beq.n	800270c <FW_InitClock+0xdc>
	{
		// 何もしない
	}

	SystemCoreClockUpdate();
 8002718:	f7fe fc3e 	bl	8000f98 <SystemCoreClockUpdate>
}
 800271c:	bf00      	nop
 800271e:	3708      	adds	r7, #8
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}
 8002724:	40023800 	.word	0x40023800

08002728 <FW_InitGPIO>:

void FW_InitGPIO(void)
{
 8002728:	b480      	push	{r7}
 800272a:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOAEN | RCC_AHB1ENR_GPIOBEN |
 800272c:	4b15      	ldr	r3, [pc, #84]	@ (8002784 <FW_InitGPIO+0x5c>)
 800272e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002730:	4a14      	ldr	r2, [pc, #80]	@ (8002784 <FW_InitGPIO+0x5c>)
 8002732:	f043 030b 	orr.w	r3, r3, #11
 8002736:	6313      	str	r3, [r2, #48]	@ 0x30
			RCC_AHB1ENR_GPIODEN);

	GPIOA->MODER = 0x282Affff;
 8002738:	4b13      	ldr	r3, [pc, #76]	@ (8002788 <FW_InitGPIO+0x60>)
 800273a:	4a14      	ldr	r2, [pc, #80]	@ (800278c <FW_InitGPIO+0x64>)
 800273c:	601a      	str	r2, [r3, #0]
	GPIOA->OSPEEDR = 0x0C3F0000;
 800273e:	4b12      	ldr	r3, [pc, #72]	@ (8002788 <FW_InitGPIO+0x60>)
 8002740:	4a13      	ldr	r2, [pc, #76]	@ (8002790 <FW_InitGPIO+0x68>)
 8002742:	609a      	str	r2, [r3, #8]
	GPIOA->AFR[0] = 0x00000000;
 8002744:	4b10      	ldr	r3, [pc, #64]	@ (8002788 <FW_InitGPIO+0x60>)
 8002746:	2200      	movs	r2, #0
 8002748:	621a      	str	r2, [r3, #32]
	GPIOA->AFR[1] = 0x00000111;
 800274a:	4b0f      	ldr	r3, [pc, #60]	@ (8002788 <FW_InitGPIO+0x60>)
 800274c:	f240 1211 	movw	r2, #273	@ 0x111
 8002750:	625a      	str	r2, [r3, #36]	@ 0x24

	GPIOB->MODER = 0xA800A003;
 8002752:	4b10      	ldr	r3, [pc, #64]	@ (8002794 <FW_InitGPIO+0x6c>)
 8002754:	4a10      	ldr	r2, [pc, #64]	@ (8002798 <FW_InitGPIO+0x70>)
 8002756:	601a      	str	r2, [r3, #0]
	GPIOB->OSPEEDR = 0xFC003000;
 8002758:	4b0e      	ldr	r3, [pc, #56]	@ (8002794 <FW_InitGPIO+0x6c>)
 800275a:	4a10      	ldr	r2, [pc, #64]	@ (800279c <FW_InitGPIO+0x74>)
 800275c:	609a      	str	r2, [r3, #8]
	GPIOB->AFR[0] = 0x77000000;
 800275e:	4b0d      	ldr	r3, [pc, #52]	@ (8002794 <FW_InitGPIO+0x6c>)
 8002760:	f04f 42ee 	mov.w	r2, #1996488704	@ 0x77000000
 8002764:	621a      	str	r2, [r3, #32]
	GPIOB->AFR[1] = 0x11100000;
 8002766:	4b0b      	ldr	r3, [pc, #44]	@ (8002794 <FW_InitGPIO+0x6c>)
 8002768:	4a0d      	ldr	r2, [pc, #52]	@ (80027a0 <FW_InitGPIO+0x78>)
 800276a:	625a      	str	r2, [r3, #36]	@ 0x24

	GPIOD->MODER = 0x00000010;
 800276c:	4b0d      	ldr	r3, [pc, #52]	@ (80027a4 <FW_InitGPIO+0x7c>)
 800276e:	2210      	movs	r2, #16
 8002770:	601a      	str	r2, [r3, #0]
	GPIOD->OSPEEDR = 0x00000000;
 8002772:	4b0c      	ldr	r3, [pc, #48]	@ (80027a4 <FW_InitGPIO+0x7c>)
 8002774:	2200      	movs	r2, #0
 8002776:	609a      	str	r2, [r3, #8]
}
 8002778:	bf00      	nop
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr
 8002782:	bf00      	nop
 8002784:	40023800 	.word	0x40023800
 8002788:	40020000 	.word	0x40020000
 800278c:	282affff 	.word	0x282affff
 8002790:	0c3f0000 	.word	0x0c3f0000
 8002794:	40020400 	.word	0x40020400
 8002798:	a800a003 	.word	0xa800a003
 800279c:	fc003000 	.word	0xfc003000
 80027a0:	11100000 	.word	0x11100000
 80027a4:	40020c00 	.word	0x40020c00

080027a8 <FW_TIM1_InitPWM>:

void FW_TIM1_InitPWM(void)
{
 80027a8:	b480      	push	{r7}
 80027aa:	af00      	add	r7, sp, #0
	TIM1->PSC = 0;
 80027ac:	4b44      	ldr	r3, [pc, #272]	@ (80028c0 <FW_TIM1_InitPWM+0x118>)
 80027ae:	2200      	movs	r2, #0
 80027b0:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM1->ARR = TIM1_ARR;
 80027b2:	4b43      	ldr	r3, [pc, #268]	@ (80028c0 <FW_TIM1_InitPWM+0x118>)
 80027b4:	f640 729f 	movw	r2, #3999	@ 0xf9f
 80027b8:	62da      	str	r2, [r3, #44]	@ 0x2c

	TIM1->CR1 &= ~TIM_CR1_DIR;
 80027ba:	4b41      	ldr	r3, [pc, #260]	@ (80028c0 <FW_TIM1_InitPWM+0x118>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a40      	ldr	r2, [pc, #256]	@ (80028c0 <FW_TIM1_InitPWM+0x118>)
 80027c0:	f023 0310 	bic.w	r3, r3, #16
 80027c4:	6013      	str	r3, [r2, #0]
	TIM1->CR1 &= ~TIM_CR1_CMS;
 80027c6:	4b3e      	ldr	r3, [pc, #248]	@ (80028c0 <FW_TIM1_InitPWM+0x118>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a3d      	ldr	r2, [pc, #244]	@ (80028c0 <FW_TIM1_InitPWM+0x118>)
 80027cc:	f023 0360 	bic.w	r3, r3, #96	@ 0x60
 80027d0:	6013      	str	r3, [r2, #0]
	TIM1->CR1 |= (1 << TIM_CR1_CMS_Pos); // center-aligned mode 1
 80027d2:	4b3b      	ldr	r3, [pc, #236]	@ (80028c0 <FW_TIM1_InitPWM+0x118>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a3a      	ldr	r2, [pc, #232]	@ (80028c0 <FW_TIM1_InitPWM+0x118>)
 80027d8:	f043 0320 	orr.w	r3, r3, #32
 80027dc:	6013      	str	r3, [r2, #0]
	TIM1->CR1 |= TIM_CR1_ARPE;
 80027de:	4b38      	ldr	r3, [pc, #224]	@ (80028c0 <FW_TIM1_InitPWM+0x118>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a37      	ldr	r2, [pc, #220]	@ (80028c0 <FW_TIM1_InitPWM+0x118>)
 80027e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80027e8:	6013      	str	r3, [r2, #0]

	// 出力比較: CH1..3 = PWM1 + preload
	TIM1->CCMR1 = 0;
 80027ea:	4b35      	ldr	r3, [pc, #212]	@ (80028c0 <FW_TIM1_InitPWM+0x118>)
 80027ec:	2200      	movs	r2, #0
 80027ee:	619a      	str	r2, [r3, #24]
	TIM1->CCMR1 |= (6<<TIM_CCMR1_OC1M_Pos)|TIM_CCMR1_OC1PE;
 80027f0:	4b33      	ldr	r3, [pc, #204]	@ (80028c0 <FW_TIM1_InitPWM+0x118>)
 80027f2:	699b      	ldr	r3, [r3, #24]
 80027f4:	4a32      	ldr	r2, [pc, #200]	@ (80028c0 <FW_TIM1_InitPWM+0x118>)
 80027f6:	f043 0368 	orr.w	r3, r3, #104	@ 0x68
 80027fa:	6193      	str	r3, [r2, #24]
	TIM1->CCMR1 |= (6<<TIM_CCMR1_OC2M_Pos)|TIM_CCMR1_OC2PE;
 80027fc:	4b30      	ldr	r3, [pc, #192]	@ (80028c0 <FW_TIM1_InitPWM+0x118>)
 80027fe:	699b      	ldr	r3, [r3, #24]
 8002800:	4a2f      	ldr	r2, [pc, #188]	@ (80028c0 <FW_TIM1_InitPWM+0x118>)
 8002802:	f443 43d0 	orr.w	r3, r3, #26624	@ 0x6800
 8002806:	6193      	str	r3, [r2, #24]
	TIM1->CCMR2 = 0;
 8002808:	4b2d      	ldr	r3, [pc, #180]	@ (80028c0 <FW_TIM1_InitPWM+0x118>)
 800280a:	2200      	movs	r2, #0
 800280c:	61da      	str	r2, [r3, #28]
	TIM1->CCMR2 |= (6<<TIM_CCMR2_OC3M_Pos)|TIM_CCMR2_OC3PE;
 800280e:	4b2c      	ldr	r3, [pc, #176]	@ (80028c0 <FW_TIM1_InitPWM+0x118>)
 8002810:	69db      	ldr	r3, [r3, #28]
 8002812:	4a2b      	ldr	r2, [pc, #172]	@ (80028c0 <FW_TIM1_InitPWM+0x118>)
 8002814:	f043 0368 	orr.w	r3, r3, #104	@ 0x68
 8002818:	61d3      	str	r3, [r2, #28]

	// CH4 は内部トリガ用 (OC4REF)。ピン出力は使わない＝CC4Eは後で0のまま。
	// ここでは強制アクティブ + preload で基準パルスを作る例
	TIM1->CCMR2 |= (7<<TIM_CCMR2_OC4M_Pos)|TIM_CCMR2_OC4PE;
 800281a:	4b29      	ldr	r3, [pc, #164]	@ (80028c0 <FW_TIM1_InitPWM+0x118>)
 800281c:	69db      	ldr	r3, [r3, #28]
 800281e:	4a28      	ldr	r2, [pc, #160]	@ (80028c0 <FW_TIM1_InitPWM+0x118>)
 8002820:	f443 43f0 	orr.w	r3, r3, #30720	@ 0x7800
 8002824:	61d3      	str	r3, [r2, #28]

	// デューティ初期値（50%で開始推奨）
	TIM1->CCR1 = TIM1_ARR/2;
 8002826:	4b26      	ldr	r3, [pc, #152]	@ (80028c0 <FW_TIM1_InitPWM+0x118>)
 8002828:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 800282c:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM1->CCR2 = TIM1_ARR/2;
 800282e:	4b24      	ldr	r3, [pc, #144]	@ (80028c0 <FW_TIM1_InitPWM+0x118>)
 8002830:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8002834:	639a      	str	r2, [r3, #56]	@ 0x38
	TIM1->CCR3 = TIM1_ARR/2;
 8002836:	4b22      	ldr	r3, [pc, #136]	@ (80028c0 <FW_TIM1_InitPWM+0x118>)
 8002838:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 800283c:	63da      	str	r2, [r3, #60]	@ 0x3c

	// --- CCER: メイン＋コンプリメンタリを両方有効化 ---
	// 極性はまず非反転（H=ON）で開始。必要なら後述の「極性」参照。
	TIM1->CCER = 0;
 800283e:	4b20      	ldr	r3, [pc, #128]	@ (80028c0 <FW_TIM1_InitPWM+0x118>)
 8002840:	2200      	movs	r2, #0
 8002842:	621a      	str	r2, [r3, #32]
	TIM1->CCER |= TIM_CCER_CC1E | TIM_CCER_CC1NE;  // CH1/CH1N
 8002844:	4b1e      	ldr	r3, [pc, #120]	@ (80028c0 <FW_TIM1_InitPWM+0x118>)
 8002846:	6a1b      	ldr	r3, [r3, #32]
 8002848:	4a1d      	ldr	r2, [pc, #116]	@ (80028c0 <FW_TIM1_InitPWM+0x118>)
 800284a:	f043 0305 	orr.w	r3, r3, #5
 800284e:	6213      	str	r3, [r2, #32]
	TIM1->CCER |= TIM_CCER_CC2E | TIM_CCER_CC2NE;  // CH2/CH2N
 8002850:	4b1b      	ldr	r3, [pc, #108]	@ (80028c0 <FW_TIM1_InitPWM+0x118>)
 8002852:	6a1b      	ldr	r3, [r3, #32]
 8002854:	4a1a      	ldr	r2, [pc, #104]	@ (80028c0 <FW_TIM1_InitPWM+0x118>)
 8002856:	f043 0350 	orr.w	r3, r3, #80	@ 0x50
 800285a:	6213      	str	r3, [r2, #32]
	TIM1->CCER |= TIM_CCER_CC3E | TIM_CCER_CC3NE;  // CH3/CH3N
 800285c:	4b18      	ldr	r3, [pc, #96]	@ (80028c0 <FW_TIM1_InitPWM+0x118>)
 800285e:	6a1b      	ldr	r3, [r3, #32]
 8002860:	4a17      	ldr	r2, [pc, #92]	@ (80028c0 <FW_TIM1_InitPWM+0x118>)
 8002862:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 8002866:	6213      	str	r3, [r2, #32]
	// CH4ピンは無効のまま（OC4REFは内部利用）

	// --- TRGO: OC4REF を外部へ（TIM3ブリッジ・ADC用） ---
	TIM1->CR2 &= ~TIM_CR2_MMS;
 8002868:	4b15      	ldr	r3, [pc, #84]	@ (80028c0 <FW_TIM1_InitPWM+0x118>)
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	4a14      	ldr	r2, [pc, #80]	@ (80028c0 <FW_TIM1_InitPWM+0x118>)
 800286e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002872:	6053      	str	r3, [r2, #4]
	TIM1->CR2 |=  (7<<TIM_CR2_MMS_Pos);  // TRGO = OC4REF
 8002874:	4b12      	ldr	r3, [pc, #72]	@ (80028c0 <FW_TIM1_InitPWM+0x118>)
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	4a11      	ldr	r2, [pc, #68]	@ (80028c0 <FW_TIM1_InitPWM+0x118>)
 800287a:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 800287e:	6053      	str	r3, [r2, #4]

	// --- 停止/非常時の安全レベル（OSSR/OSSI + OISx/OISxN） ---
	// H=ONなドライバ前提 → 停止時は LOW=OFF にしたいので OISx=0 / OISxN=0
	TIM1->CR2 &= ~(TIM_CR2_OIS1|TIM_CR2_OIS1N|TIM_CR2_OIS2|TIM_CR2_OIS2N|
 8002880:	4b0f      	ldr	r3, [pc, #60]	@ (80028c0 <FW_TIM1_InitPWM+0x118>)
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	4a0e      	ldr	r2, [pc, #56]	@ (80028c0 <FW_TIM1_InitPWM+0x118>)
 8002886:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800288a:	6053      	str	r3, [r2, #4]
	               TIM_CR2_OIS3|TIM_CR2_OIS3N|TIM_CR2_OIS4);

	TIM1->BDTR = 0;
 800288c:	4b0c      	ldr	r3, [pc, #48]	@ (80028c0 <FW_TIM1_InitPWM+0x118>)
 800288e:	2200      	movs	r2, #0
 8002890:	645a      	str	r2, [r3, #68]	@ 0x44
	TIM1->BDTR |= (DTG_TICKS << TIM_BDTR_DTG_Pos);
 8002892:	4b0b      	ldr	r3, [pc, #44]	@ (80028c0 <FW_TIM1_InitPWM+0x118>)
 8002894:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002896:	4a0a      	ldr	r2, [pc, #40]	@ (80028c0 <FW_TIM1_InitPWM+0x118>)
 8002898:	f043 033c 	orr.w	r3, r3, #60	@ 0x3c
 800289c:	6453      	str	r3, [r2, #68]	@ 0x44
	TIM1->BDTR |= TIM_BDTR_OSSR | TIM_BDTR_OSSI;   // ★強く推奨（停止/ブレークでOISレベルを適用）
 800289e:	4b08      	ldr	r3, [pc, #32]	@ (80028c0 <FW_TIM1_InitPWM+0x118>)
 80028a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028a2:	4a07      	ldr	r2, [pc, #28]	@ (80028c0 <FW_TIM1_InitPWM+0x118>)
 80028a4:	f443 6340 	orr.w	r3, r3, #3072	@ 0xc00
 80028a8:	6453      	str	r3, [r2, #68]	@ 0x44

	TIM1->BDTR |= TIM_BDTR_MOE;
 80028aa:	4b05      	ldr	r3, [pc, #20]	@ (80028c0 <FW_TIM1_InitPWM+0x118>)
 80028ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028ae:	4a04      	ldr	r2, [pc, #16]	@ (80028c0 <FW_TIM1_InitPWM+0x118>)
 80028b0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80028b4:	6453      	str	r3, [r2, #68]	@ 0x44
}
 80028b6:	bf00      	nop
 80028b8:	46bd      	mov	sp, r7
 80028ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028be:	4770      	bx	lr
 80028c0:	40010000 	.word	0x40010000

080028c4 <FW_TIM2_Init>:

void FW_TIM2_Init(void)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	af00      	add	r7, sp, #0
	TIM2->PSC = 8 - 1;
 80028c8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80028cc:	2207      	movs	r2, #7
 80028ce:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM2->ARR = 1000 - 1;
 80028d0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80028d4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80028d8:	62da      	str	r2, [r3, #44]	@ 0x2c

	TIM2->DIER = 0x00000001;
 80028da:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80028de:	2201      	movs	r2, #1
 80028e0:	60da      	str	r2, [r3, #12]

	NVIC_SetPriority(TIM2_IRQn, 0);
 80028e2:	2100      	movs	r1, #0
 80028e4:	201c      	movs	r0, #28
 80028e6:	f7ff fe5b 	bl	80025a0 <__NVIC_SetPriority>
	NVIC_EnableIRQ(TIM2_IRQn);
 80028ea:	201c      	movs	r0, #28
 80028ec:	f7ff fe3a 	bl	8002564 <__NVIC_EnableIRQ>
}
 80028f0:	bf00      	nop
 80028f2:	bd80      	pop	{r7, pc}

080028f4 <FW_TIM3_InitBridge>:

void FW_TIM3_InitBridge(void)
{
 80028f4:	b480      	push	{r7}
 80028f6:	af00      	add	r7, sp, #0
	// TIM1: TRGO=OC4REF（firmware内のInjected初期化で設定）
	TIM3->PSC = 0;
 80028f8:	4b16      	ldr	r3, [pc, #88]	@ (8002954 <FW_TIM3_InitBridge+0x60>)
 80028fa:	2200      	movs	r2, #0
 80028fc:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM3->ARR = 1;
 80028fe:	4b15      	ldr	r3, [pc, #84]	@ (8002954 <FW_TIM3_InitBridge+0x60>)
 8002900:	2201      	movs	r2, #1
 8002902:	62da      	str	r2, [r3, #44]	@ 0x2c

	TIM3->SMCR &= ~(TIM_SMCR_TS | TIM_SMCR_SMS);
 8002904:	4b13      	ldr	r3, [pc, #76]	@ (8002954 <FW_TIM3_InitBridge+0x60>)
 8002906:	689b      	ldr	r3, [r3, #8]
 8002908:	4a12      	ldr	r2, [pc, #72]	@ (8002954 <FW_TIM3_InitBridge+0x60>)
 800290a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800290e:	6093      	str	r3, [r2, #8]
	TIM3->SMCR |= (0 << TIM_SMCR_TS_Pos); // TS = ITR0 (多くのF4で TIM1)
 8002910:	4b10      	ldr	r3, [pc, #64]	@ (8002954 <FW_TIM3_InitBridge+0x60>)
 8002912:	4a10      	ldr	r2, [pc, #64]	@ (8002954 <FW_TIM3_InitBridge+0x60>)
 8002914:	689b      	ldr	r3, [r3, #8]
 8002916:	6093      	str	r3, [r2, #8]
	TIM3->SMCR |= (6 << TIM_SMCR_SMS_Pos); // Trigger mode: TRGI↑でUG
 8002918:	4b0e      	ldr	r3, [pc, #56]	@ (8002954 <FW_TIM3_InitBridge+0x60>)
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	4a0d      	ldr	r2, [pc, #52]	@ (8002954 <FW_TIM3_InitBridge+0x60>)
 800291e:	f043 0306 	orr.w	r3, r3, #6
 8002922:	6093      	str	r3, [r2, #8]

	TIM3->CR2 &= ~TIM_CR2_MMS;
 8002924:	4b0b      	ldr	r3, [pc, #44]	@ (8002954 <FW_TIM3_InitBridge+0x60>)
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	4a0a      	ldr	r2, [pc, #40]	@ (8002954 <FW_TIM3_InitBridge+0x60>)
 800292a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800292e:	6053      	str	r3, [r2, #4]
	TIM3->CR2 |= (2 << TIM_CR2_MMS_Pos); // TRGO=Update
 8002930:	4b08      	ldr	r3, [pc, #32]	@ (8002954 <FW_TIM3_InitBridge+0x60>)
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	4a07      	ldr	r2, [pc, #28]	@ (8002954 <FW_TIM3_InitBridge+0x60>)
 8002936:	f043 0320 	orr.w	r3, r3, #32
 800293a:	6053      	str	r3, [r2, #4]

	TIM3->EGR |= TIM_EGR_UG;
 800293c:	4b05      	ldr	r3, [pc, #20]	@ (8002954 <FW_TIM3_InitBridge+0x60>)
 800293e:	695b      	ldr	r3, [r3, #20]
 8002940:	4a04      	ldr	r2, [pc, #16]	@ (8002954 <FW_TIM3_InitBridge+0x60>)
 8002942:	f043 0301 	orr.w	r3, r3, #1
 8002946:	6153      	str	r3, [r2, #20]
}
 8002948:	bf00      	nop
 800294a:	46bd      	mov	sp, r7
 800294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002950:	4770      	bx	lr
 8002952:	bf00      	nop
 8002954:	40000400 	.word	0x40000400

08002958 <FW_TIM7_Init>:

void FW_TIM7_Init(void)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	af00      	add	r7, sp, #0
	ENC_Init(&s_enc, ENC_STEP_Q31, ENC_MIN_Q31, ENC_MAX_Q31);
 800295c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8002960:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8002964:	490b      	ldr	r1, [pc, #44]	@ (8002994 <FW_TIM7_Init+0x3c>)
 8002966:	480c      	ldr	r0, [pc, #48]	@ (8002998 <FW_TIM7_Init+0x40>)
 8002968:	f7ff fd0a 	bl	8002380 <ENC_Init>

	TIM7->PSC = 42 - 1;
 800296c:	4b0b      	ldr	r3, [pc, #44]	@ (800299c <FW_TIM7_Init+0x44>)
 800296e:	2229      	movs	r2, #41	@ 0x29
 8002970:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM7->ARR = 1000 - 1;
 8002972:	4b0a      	ldr	r3, [pc, #40]	@ (800299c <FW_TIM7_Init+0x44>)
 8002974:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002978:	62da      	str	r2, [r3, #44]	@ 0x2c

	TIM7->DIER = 0x00000001;
 800297a:	4b08      	ldr	r3, [pc, #32]	@ (800299c <FW_TIM7_Init+0x44>)
 800297c:	2201      	movs	r2, #1
 800297e:	60da      	str	r2, [r3, #12]

	NVIC_SetPriority(TIM7_IRQn, 0);
 8002980:	2100      	movs	r1, #0
 8002982:	2037      	movs	r0, #55	@ 0x37
 8002984:	f7ff fe0c 	bl	80025a0 <__NVIC_SetPriority>
	NVIC_EnableIRQ(TIM7_IRQn);
 8002988:	2037      	movs	r0, #55	@ 0x37
 800298a:	f7ff fdeb 	bl	8002564 <__NVIC_EnableIRQ>
}
 800298e:	bf00      	nop
 8002990:	bd80      	pop	{r7, pc}
 8002992:	bf00      	nop
 8002994:	06666666 	.word	0x06666666
 8002998:	200002c4 	.word	0x200002c4
 800299c:	40001400 	.word	0x40001400

080029a0 <FW_StartAll>:
	NVIC_EnableIRQ(DMA2_Stream0_IRQn);
	DMA2_Stream0->CR |= DMA_SxCR_EN;
}

void FW_StartAll(void)
{
 80029a0:	b480      	push	{r7}
 80029a2:	af00      	add	r7, sp, #0
	TIM1->EGR |= TIM_EGR_UG;
 80029a4:	4b16      	ldr	r3, [pc, #88]	@ (8002a00 <FW_StartAll+0x60>)
 80029a6:	695b      	ldr	r3, [r3, #20]
 80029a8:	4a15      	ldr	r2, [pc, #84]	@ (8002a00 <FW_StartAll+0x60>)
 80029aa:	f043 0301 	orr.w	r3, r3, #1
 80029ae:	6153      	str	r3, [r2, #20]
	TIM1->CR1 |= TIM_CR1_CEN;
 80029b0:	4b13      	ldr	r3, [pc, #76]	@ (8002a00 <FW_StartAll+0x60>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a12      	ldr	r2, [pc, #72]	@ (8002a00 <FW_StartAll+0x60>)
 80029b6:	f043 0301 	orr.w	r3, r3, #1
 80029ba:	6013      	str	r3, [r2, #0]

	TIM2->CR1 |= TIM_CR1_CEN;
 80029bc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80029c6:	f043 0301 	orr.w	r3, r3, #1
 80029ca:	6013      	str	r3, [r2, #0]

	TIM3->EGR |= TIM_EGR_UG;
 80029cc:	4b0d      	ldr	r3, [pc, #52]	@ (8002a04 <FW_StartAll+0x64>)
 80029ce:	695b      	ldr	r3, [r3, #20]
 80029d0:	4a0c      	ldr	r2, [pc, #48]	@ (8002a04 <FW_StartAll+0x64>)
 80029d2:	f043 0301 	orr.w	r3, r3, #1
 80029d6:	6153      	str	r3, [r2, #20]
	TIM3->CR1 |= TIM_CR1_CEN;
 80029d8:	4b0a      	ldr	r3, [pc, #40]	@ (8002a04 <FW_StartAll+0x64>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a09      	ldr	r2, [pc, #36]	@ (8002a04 <FW_StartAll+0x64>)
 80029de:	f043 0301 	orr.w	r3, r3, #1
 80029e2:	6013      	str	r3, [r2, #0]

	TIM7->CR1 |= TIM_CR1_CEN;
 80029e4:	4b08      	ldr	r3, [pc, #32]	@ (8002a08 <FW_StartAll+0x68>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a07      	ldr	r2, [pc, #28]	@ (8002a08 <FW_StartAll+0x68>)
 80029ea:	f043 0301 	orr.w	r3, r3, #1
 80029ee:	6013      	str	r3, [r2, #0]
  \details Enables IRQ interrupts by clearing special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80029f0:	b662      	cpsie	i
}
 80029f2:	bf00      	nop

	__enable_irq();
}
 80029f4:	bf00      	nop
 80029f6:	46bd      	mov	sp, r7
 80029f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fc:	4770      	bx	lr
 80029fe:	bf00      	nop
 8002a00:	40010000 	.word	0x40010000
 8002a04:	40000400 	.word	0x40000400
 8002a08:	40001400 	.word	0x40001400

08002a0c <FW_SetPWMDuties>:

void FW_SetPWMDuties(uint16_t ccr1, uint16_t ccr2, uint16_t ccr3)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b083      	sub	sp, #12
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	4603      	mov	r3, r0
 8002a14:	80fb      	strh	r3, [r7, #6]
 8002a16:	460b      	mov	r3, r1
 8002a18:	80bb      	strh	r3, [r7, #4]
 8002a1a:	4613      	mov	r3, r2
 8002a1c:	807b      	strh	r3, [r7, #2]
	TIM1->CCR1 = ccr1;
 8002a1e:	4a07      	ldr	r2, [pc, #28]	@ (8002a3c <FW_SetPWMDuties+0x30>)
 8002a20:	88fb      	ldrh	r3, [r7, #6]
 8002a22:	6353      	str	r3, [r2, #52]	@ 0x34
	TIM1->CCR2 = ccr2;
 8002a24:	4a05      	ldr	r2, [pc, #20]	@ (8002a3c <FW_SetPWMDuties+0x30>)
 8002a26:	88bb      	ldrh	r3, [r7, #4]
 8002a28:	6393      	str	r3, [r2, #56]	@ 0x38
	TIM1->CCR3 = ccr3;
 8002a2a:	4a04      	ldr	r2, [pc, #16]	@ (8002a3c <FW_SetPWMDuties+0x30>)
 8002a2c:	887b      	ldrh	r3, [r7, #2]
 8002a2e:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8002a30:	bf00      	nop
 8002a32:	370c      	adds	r7, #12
 8002a34:	46bd      	mov	sp, r7
 8002a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3a:	4770      	bx	lr
 8002a3c:	40010000 	.word	0x40010000

08002a40 <FW_SetSampleMarker>:

void FW_SetSampleMarker(uint16_t ccr4)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b083      	sub	sp, #12
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	4603      	mov	r3, r0
 8002a48:	80fb      	strh	r3, [r7, #6]
	TIM1->CCR4 = ccr4;
 8002a4a:	4a04      	ldr	r2, [pc, #16]	@ (8002a5c <FW_SetSampleMarker+0x1c>)
 8002a4c:	88fb      	ldrh	r3, [r7, #6]
 8002a4e:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8002a50:	bf00      	nop
 8002a52:	370c      	adds	r7, #12
 8002a54:	46bd      	mov	sp, r7
 8002a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5a:	4770      	bx	lr
 8002a5c:	40010000 	.word	0x40010000

08002a60 <DMA2_Stream0_IRQHandler>:


// ===== 割り込み =====
void DMA2_Stream0_IRQHandler(void);
void DMA2_Stream0_IRQHandler(void)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b082      	sub	sp, #8
 8002a64:	af00      	add	r7, sp, #0
	ADC1->SR &= ~ADC_SR_EOC;
 8002a66:	4b17      	ldr	r3, [pc, #92]	@ (8002ac4 <DMA2_Stream0_IRQHandler+0x64>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a16      	ldr	r2, [pc, #88]	@ (8002ac4 <DMA2_Stream0_IRQHandler+0x64>)
 8002a6c:	f023 0302 	bic.w	r3, r3, #2
 8002a70:	6013      	str	r3, [r2, #0]
	ADC1->SR &= ~ADC_SR_STRT;
 8002a72:	4b14      	ldr	r3, [pc, #80]	@ (8002ac4 <DMA2_Stream0_IRQHandler+0x64>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a13      	ldr	r2, [pc, #76]	@ (8002ac4 <DMA2_Stream0_IRQHandler+0x64>)
 8002a78:	f023 0310 	bic.w	r3, r3, #16
 8002a7c:	6013      	str	r3, [r2, #0]

	uint16_t buff[2] = {0, 0};
 8002a7e:	2300      	movs	r3, #0
 8002a80:	80bb      	strh	r3, [r7, #4]
 8002a82:	2300      	movs	r3, #0
 8002a84:	80fb      	strh	r3, [r7, #6]

	DMA2->LIFCR = DMA_LIFCR_CTCIF0;
 8002a86:	4b10      	ldr	r3, [pc, #64]	@ (8002ac8 <DMA2_Stream0_IRQHandler+0x68>)
 8002a88:	2220      	movs	r2, #32
 8002a8a:	609a      	str	r2, [r3, #8]

	buff[0] = s_AdcBuf[0];
 8002a8c:	4b0f      	ldr	r3, [pc, #60]	@ (8002acc <DMA2_Stream0_IRQHandler+0x6c>)
 8002a8e:	881b      	ldrh	r3, [r3, #0]
 8002a90:	b29b      	uxth	r3, r3
 8002a92:	80bb      	strh	r3, [r7, #4]
	buff[1] = s_AdcBuf[1];
 8002a94:	4b0d      	ldr	r3, [pc, #52]	@ (8002acc <DMA2_Stream0_IRQHandler+0x6c>)
 8002a96:	885b      	ldrh	r3, [r3, #2]
 8002a98:	b29b      	uxth	r3, r3
 8002a9a:	80fb      	strh	r3, [r7, #6]

	APP_OnVoltage(&buff[0]);
 8002a9c:	1d3b      	adds	r3, r7, #4
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f7fe fe86 	bl	80017b0 <APP_OnVoltage>
	APP_OnCurrents(s_AdcBuf[2], s_AdcBuf[3], s_AdcBuf[4]);
 8002aa4:	4b09      	ldr	r3, [pc, #36]	@ (8002acc <DMA2_Stream0_IRQHandler+0x6c>)
 8002aa6:	889b      	ldrh	r3, [r3, #4]
 8002aa8:	b29b      	uxth	r3, r3
 8002aaa:	4a08      	ldr	r2, [pc, #32]	@ (8002acc <DMA2_Stream0_IRQHandler+0x6c>)
 8002aac:	88d2      	ldrh	r2, [r2, #6]
 8002aae:	b291      	uxth	r1, r2
 8002ab0:	4a06      	ldr	r2, [pc, #24]	@ (8002acc <DMA2_Stream0_IRQHandler+0x6c>)
 8002ab2:	8912      	ldrh	r2, [r2, #8]
 8002ab4:	b292      	uxth	r2, r2
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f7fe fe3c 	bl	8001734 <APP_OnCurrents>
}
 8002abc:	bf00      	nop
 8002abe:	3708      	adds	r7, #8
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}
 8002ac4:	40012000 	.word	0x40012000
 8002ac8:	40026400 	.word	0x40026400
 8002acc:	200002b8 	.word	0x200002b8

08002ad0 <ADC_IRQHandler>:

void ADC_IRQHandler(void);
void ADC_IRQHandler(void)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b082      	sub	sp, #8
 8002ad4:	af00      	add	r7, sp, #0
	if (ADC1->SR & ADC_SR_JEOC)
 8002ad6:	4b15      	ldr	r3, [pc, #84]	@ (8002b2c <ADC_IRQHandler+0x5c>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 0304 	and.w	r3, r3, #4
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d01f      	beq.n	8002b22 <ADC_IRQHandler+0x52>
	{
		uint16_t v[ADC_INJBUF_LEN] = {(uint16_t)ADC1->JDR1, (uint16_t)ADC1->JDR2, (uint16_t)ADC1->JDR3, (uint16_t)ADC1->JDR4};
 8002ae2:	4b12      	ldr	r3, [pc, #72]	@ (8002b2c <ADC_IRQHandler+0x5c>)
 8002ae4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ae6:	b29b      	uxth	r3, r3
 8002ae8:	803b      	strh	r3, [r7, #0]
 8002aea:	4b10      	ldr	r3, [pc, #64]	@ (8002b2c <ADC_IRQHandler+0x5c>)
 8002aec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aee:	b29b      	uxth	r3, r3
 8002af0:	807b      	strh	r3, [r7, #2]
 8002af2:	4b0e      	ldr	r3, [pc, #56]	@ (8002b2c <ADC_IRQHandler+0x5c>)
 8002af4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002af6:	b29b      	uxth	r3, r3
 8002af8:	80bb      	strh	r3, [r7, #4]
 8002afa:	4b0c      	ldr	r3, [pc, #48]	@ (8002b2c <ADC_IRQHandler+0x5c>)
 8002afc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002afe:	b29b      	uxth	r3, r3
 8002b00:	80fb      	strh	r3, [r7, #6]

		APP_OnVphase(v);
 8002b02:	463b      	mov	r3, r7
 8002b04:	4618      	mov	r0, r3
 8002b06:	f7fe fe37 	bl	8001778 <APP_OnVphase>

		ADC1->SR &= ~ADC_SR_JEOC;
 8002b0a:	4b08      	ldr	r3, [pc, #32]	@ (8002b2c <ADC_IRQHandler+0x5c>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a07      	ldr	r2, [pc, #28]	@ (8002b2c <ADC_IRQHandler+0x5c>)
 8002b10:	f023 0304 	bic.w	r3, r3, #4
 8002b14:	6013      	str	r3, [r2, #0]
		ADC1->SR &= ~ADC_SR_JSTRT;
 8002b16:	4b05      	ldr	r3, [pc, #20]	@ (8002b2c <ADC_IRQHandler+0x5c>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a04      	ldr	r2, [pc, #16]	@ (8002b2c <ADC_IRQHandler+0x5c>)
 8002b1c:	f023 0308 	bic.w	r3, r3, #8
 8002b20:	6013      	str	r3, [r2, #0]
	}
}
 8002b22:	bf00      	nop
 8002b24:	3708      	adds	r7, #8
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}
 8002b2a:	bf00      	nop
 8002b2c:	40012000 	.word	0x40012000

08002b30 <TIM2_IRQHandler>:

void TIM2_IRQHandler(void);
void TIM2_IRQHandler(void)
{
 8002b30:	b480      	push	{r7}
 8002b32:	af00      	add	r7, sp, #0
	TIM2->SR = 0x00000000;
 8002b34:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002b38:	2200      	movs	r2, #0
 8002b3a:	611a      	str	r2, [r3, #16]

	count_flag = 1;
 8002b3c:	4b03      	ldr	r3, [pc, #12]	@ (8002b4c <TIM2_IRQHandler+0x1c>)
 8002b3e:	2201      	movs	r2, #1
 8002b40:	701a      	strb	r2, [r3, #0]
}
 8002b42:	bf00      	nop
 8002b44:	46bd      	mov	sp, r7
 8002b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4a:	4770      	bx	lr
 8002b4c:	200002c2 	.word	0x200002c2

08002b50 <TIM7_IRQHandler>:

void TIM7_IRQHandler(void);
void TIM7_IRQHandler(void) // 1〜2ms周期で呼ばれるタイマ割り込み
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b082      	sub	sp, #8
 8002b54:	af00      	add	r7, sp, #0
	TIM7->SR = 0x00000000;
 8002b56:	4b0d      	ldr	r3, [pc, #52]	@ (8002b8c <TIM7_IRQHandler+0x3c>)
 8002b58:	2200      	movs	r2, #0
 8002b5a:	611a      	str	r2, [r3, #16]

    // 例：GPIOAのbit0/bit1をA/B相とする場合
    uint8_t pin_a = (GPIOB->IDR >> 8) & 1;
 8002b5c:	4b0c      	ldr	r3, [pc, #48]	@ (8002b90 <TIM7_IRQHandler+0x40>)
 8002b5e:	691b      	ldr	r3, [r3, #16]
 8002b60:	0a1b      	lsrs	r3, r3, #8
 8002b62:	b2db      	uxtb	r3, r3
 8002b64:	f003 0301 	and.w	r3, r3, #1
 8002b68:	71fb      	strb	r3, [r7, #7]
    uint8_t pin_b = (GPIOB->IDR >> 9) & 1;
 8002b6a:	4b09      	ldr	r3, [pc, #36]	@ (8002b90 <TIM7_IRQHandler+0x40>)
 8002b6c:	691b      	ldr	r3, [r3, #16]
 8002b6e:	0a5b      	lsrs	r3, r3, #9
 8002b70:	b2db      	uxtb	r3, r3
 8002b72:	f003 0301 	and.w	r3, r3, #1
 8002b76:	71bb      	strb	r3, [r7, #6]

    ENC_Scan(&s_enc, pin_a, pin_b);
 8002b78:	79ba      	ldrb	r2, [r7, #6]
 8002b7a:	79fb      	ldrb	r3, [r7, #7]
 8002b7c:	4619      	mov	r1, r3
 8002b7e:	4805      	ldr	r0, [pc, #20]	@ (8002b94 <TIM7_IRQHandler+0x44>)
 8002b80:	f7ff fc2c 	bl	80023dc <ENC_Scan>
}
 8002b84:	bf00      	nop
 8002b86:	3708      	adds	r7, #8
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}
 8002b8c:	40001400 	.word	0x40001400
 8002b90:	40020400 	.word	0x40020400
 8002b94:	200002c4 	.word	0x200002c4

08002b98 <HardFault_Handler>:

void HardFault_Handler(void);
void HardFault_Handler(void)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	af00      	add	r7, sp, #0
	while(1)
 8002b9c:	bf00      	nop
 8002b9e:	e7fd      	b.n	8002b9c <HardFault_Handler+0x4>

08002ba0 <MemManage_Handler>:
	}
}

void MemManage_Handler(void);
void MemManage_Handler(void)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	af00      	add	r7, sp, #0
	while(1)
 8002ba4:	bf00      	nop
 8002ba6:	e7fd      	b.n	8002ba4 <MemManage_Handler+0x4>

08002ba8 <BusFault_Handler>:
	}
}

void BusFault_Handler(void);
void BusFault_Handler(void)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	af00      	add	r7, sp, #0
	while(1)
 8002bac:	bf00      	nop
 8002bae:	e7fd      	b.n	8002bac <BusFault_Handler+0x4>

08002bb0 <UsageFault_Handler>:
	}
}

void UsageFault_Handler(void);
void UsageFault_Handler(void)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	af00      	add	r7, sp, #0
	while(1)
 8002bb4:	bf00      	nop
 8002bb6:	e7fd      	b.n	8002bb4 <UsageFault_Handler+0x4>

08002bb8 <q31_mul>:
{
 8002bb8:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 8002bbc:	b085      	sub	sp, #20
 8002bbe:	af00      	add	r7, sp, #0
 8002bc0:	6078      	str	r0, [r7, #4]
 8002bc2:	6039      	str	r1, [r7, #0]
	int64_t t = (int64_t) a * (int64_t) b;
 8002bc4:	6879      	ldr	r1, [r7, #4]
 8002bc6:	17c8      	asrs	r0, r1, #31
 8002bc8:	4688      	mov	r8, r1
 8002bca:	4681      	mov	r9, r0
 8002bcc:	6839      	ldr	r1, [r7, #0]
 8002bce:	17c8      	asrs	r0, r1, #31
 8002bd0:	460c      	mov	r4, r1
 8002bd2:	4605      	mov	r5, r0
 8002bd4:	fb04 f009 	mul.w	r0, r4, r9
 8002bd8:	fb08 f105 	mul.w	r1, r8, r5
 8002bdc:	4401      	add	r1, r0
 8002bde:	fba8 2304 	umull	r2, r3, r8, r4
 8002be2:	4419      	add	r1, r3
 8002be4:	460b      	mov	r3, r1
 8002be6:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8002bea:	e9c7 2302 	strd	r2, r3, [r7, #8]
	t >>= 31;
 8002bee:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002bf2:	f04f 0200 	mov.w	r2, #0
 8002bf6:	f04f 0300 	mov.w	r3, #0
 8002bfa:	0fc2      	lsrs	r2, r0, #31
 8002bfc:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8002c00:	17cb      	asrs	r3, r1, #31
 8002c02:	e9c7 2302 	strd	r2, r3, [r7, #8]
	if (t > 0x7FFFFFFFLL)
 8002c06:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002c0a:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8002c0e:	f173 0300 	sbcs.w	r3, r3, #0
 8002c12:	db05      	blt.n	8002c20 <q31_mul+0x68>
		t = 0x7FFFFFFFLL;
 8002c14:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8002c18:	f04f 0300 	mov.w	r3, #0
 8002c1c:	e9c7 2302 	strd	r2, r3, [r7, #8]
	if (t < -0x80000000LL)
 8002c20:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002c24:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8002c28:	f173 33ff 	sbcs.w	r3, r3, #4294967295
 8002c2c:	da05      	bge.n	8002c3a <q31_mul+0x82>
		t = -0x80000000LL;
 8002c2e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8002c32:	f04f 33ff 	mov.w	r3, #4294967295
 8002c36:	e9c7 2302 	strd	r2, r3, [r7, #8]
	return (int32_t) t;
 8002c3a:	68bb      	ldr	r3, [r7, #8]
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	3714      	adds	r7, #20
 8002c40:	46bd      	mov	sp, r7
 8002c42:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 8002c46:	4770      	bx	lr

08002c48 <q31_add_sat>:
{
 8002c48:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 8002c4c:	b085      	sub	sp, #20
 8002c4e:	af00      	add	r7, sp, #0
 8002c50:	6078      	str	r0, [r7, #4]
 8002c52:	6039      	str	r1, [r7, #0]
	int64_t t = (int64_t) a + (int64_t) b;
 8002c54:	6879      	ldr	r1, [r7, #4]
 8002c56:	17c8      	asrs	r0, r1, #31
 8002c58:	460c      	mov	r4, r1
 8002c5a:	4605      	mov	r5, r0
 8002c5c:	6839      	ldr	r1, [r7, #0]
 8002c5e:	17c8      	asrs	r0, r1, #31
 8002c60:	460a      	mov	r2, r1
 8002c62:	4603      	mov	r3, r0
 8002c64:	eb14 0802 	adds.w	r8, r4, r2
 8002c68:	eb45 0903 	adc.w	r9, r5, r3
 8002c6c:	e9c7 8902 	strd	r8, r9, [r7, #8]
	if (t > 0x7FFFFFFFLL)
 8002c70:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002c74:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8002c78:	f173 0300 	sbcs.w	r3, r3, #0
 8002c7c:	db05      	blt.n	8002c8a <q31_add_sat+0x42>
		t = 0x7FFFFFFFLL;
 8002c7e:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8002c82:	f04f 0300 	mov.w	r3, #0
 8002c86:	e9c7 2302 	strd	r2, r3, [r7, #8]
	if (t < -0x80000000LL)
 8002c8a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002c8e:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8002c92:	f173 33ff 	sbcs.w	r3, r3, #4294967295
 8002c96:	da05      	bge.n	8002ca4 <q31_add_sat+0x5c>
		t = -0x80000000LL;
 8002c98:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8002c9c:	f04f 33ff 	mov.w	r3, #4294967295
 8002ca0:	e9c7 2302 	strd	r2, r3, [r7, #8]
	return (int32_t) t;
 8002ca4:	68bb      	ldr	r3, [r7, #8]
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	3714      	adds	r7, #20
 8002caa:	46bd      	mov	sp, r7
 8002cac:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 8002cb0:	4770      	bx	lr

08002cb2 <q31_sub_sat>:
{
 8002cb2:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 8002cb6:	b085      	sub	sp, #20
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
 8002cbc:	6039      	str	r1, [r7, #0]
	int64_t t = (int64_t) a - (int64_t) b;
 8002cbe:	6879      	ldr	r1, [r7, #4]
 8002cc0:	17c8      	asrs	r0, r1, #31
 8002cc2:	460c      	mov	r4, r1
 8002cc4:	4605      	mov	r5, r0
 8002cc6:	6839      	ldr	r1, [r7, #0]
 8002cc8:	17c8      	asrs	r0, r1, #31
 8002cca:	460a      	mov	r2, r1
 8002ccc:	4603      	mov	r3, r0
 8002cce:	ebb4 0802 	subs.w	r8, r4, r2
 8002cd2:	eb65 0903 	sbc.w	r9, r5, r3
 8002cd6:	e9c7 8902 	strd	r8, r9, [r7, #8]
	if (t > 0x7FFFFFFFLL)
 8002cda:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002cde:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8002ce2:	f173 0300 	sbcs.w	r3, r3, #0
 8002ce6:	db05      	blt.n	8002cf4 <q31_sub_sat+0x42>
		t = 0x7FFFFFFFLL;
 8002ce8:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8002cec:	f04f 0300 	mov.w	r3, #0
 8002cf0:	e9c7 2302 	strd	r2, r3, [r7, #8]
	if (t < -0x80000000LL)
 8002cf4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002cf8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8002cfc:	f173 33ff 	sbcs.w	r3, r3, #4294967295
 8002d00:	da05      	bge.n	8002d0e <q31_sub_sat+0x5c>
		t = -0x80000000LL;
 8002d02:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8002d06:	f04f 33ff 	mov.w	r3, #4294967295
 8002d0a:	e9c7 2302 	strd	r2, r3, [r7, #8]
	return (int32_t) t;
 8002d0e:	68bb      	ldr	r3, [r7, #8]
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	3714      	adds	r7, #20
 8002d14:	46bd      	mov	sp, r7
 8002d16:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 8002d1a:	4770      	bx	lr

08002d1c <svm_sector_from_alphabeta_q31>:
}

// --- SVM セクタ算出（αβ→abcの符号で判定, 1..6） ---
static inline uint8_t svm_sector_from_alphabeta_q31(int32_t v_alpha,
		int32_t v_beta)
{
 8002d1c:	b590      	push	{r4, r7, lr}
 8002d1e:	b087      	sub	sp, #28
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
 8002d24:	6039      	str	r1, [r7, #0]
	int32_t va = v_alpha;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	617b      	str	r3, [r7, #20]
	int32_t vb = q31_add_sat(q31_mul(-(Q31_HALF), v_alpha),
 8002d2a:	6879      	ldr	r1, [r7, #4]
 8002d2c:	4832      	ldr	r0, [pc, #200]	@ (8002df8 <svm_sector_from_alphabeta_q31+0xdc>)
 8002d2e:	f7ff ff43 	bl	8002bb8 <q31_mul>
 8002d32:	4604      	mov	r4, r0
 8002d34:	6839      	ldr	r1, [r7, #0]
 8002d36:	4831      	ldr	r0, [pc, #196]	@ (8002dfc <svm_sector_from_alphabeta_q31+0xe0>)
 8002d38:	f7ff ff3e 	bl	8002bb8 <q31_mul>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	4619      	mov	r1, r3
 8002d40:	4620      	mov	r0, r4
 8002d42:	f7ff ff81 	bl	8002c48 <q31_add_sat>
 8002d46:	6138      	str	r0, [r7, #16]
			q31_mul(Q31_SQRT3_OVER_2, v_beta));
	int32_t vc = q31_sub_sat(q31_mul(-(Q31_HALF), v_alpha),
 8002d48:	6879      	ldr	r1, [r7, #4]
 8002d4a:	482b      	ldr	r0, [pc, #172]	@ (8002df8 <svm_sector_from_alphabeta_q31+0xdc>)
 8002d4c:	f7ff ff34 	bl	8002bb8 <q31_mul>
 8002d50:	4604      	mov	r4, r0
 8002d52:	6839      	ldr	r1, [r7, #0]
 8002d54:	4829      	ldr	r0, [pc, #164]	@ (8002dfc <svm_sector_from_alphabeta_q31+0xe0>)
 8002d56:	f7ff ff2f 	bl	8002bb8 <q31_mul>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	4619      	mov	r1, r3
 8002d5e:	4620      	mov	r0, r4
 8002d60:	f7ff ffa7 	bl	8002cb2 <q31_sub_sat>
 8002d64:	60f8      	str	r0, [r7, #12]
			q31_mul(Q31_SQRT3_OVER_2, v_beta));

	uint8_t a = (va > 0);
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	bfcc      	ite	gt
 8002d6c:	2301      	movgt	r3, #1
 8002d6e:	2300      	movle	r3, #0
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	72fb      	strb	r3, [r7, #11]
	uint8_t b = (vb > 0);
 8002d74:	693b      	ldr	r3, [r7, #16]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	bfcc      	ite	gt
 8002d7a:	2301      	movgt	r3, #1
 8002d7c:	2300      	movle	r3, #0
 8002d7e:	b2db      	uxtb	r3, r3
 8002d80:	72bb      	strb	r3, [r7, #10]
	uint8_t c = (vc > 0);
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	bfcc      	ite	gt
 8002d88:	2301      	movgt	r3, #1
 8002d8a:	2300      	movle	r3, #0
 8002d8c:	b2db      	uxtb	r3, r3
 8002d8e:	727b      	strb	r3, [r7, #9]
	uint8_t code = (a << 2) | (b << 1) | c;
 8002d90:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8002d94:	009b      	lsls	r3, r3, #2
 8002d96:	b25a      	sxtb	r2, r3
 8002d98:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8002d9c:	005b      	lsls	r3, r3, #1
 8002d9e:	b25b      	sxtb	r3, r3
 8002da0:	4313      	orrs	r3, r2
 8002da2:	b25a      	sxtb	r2, r3
 8002da4:	f997 3009 	ldrsb.w	r3, [r7, #9]
 8002da8:	4313      	orrs	r3, r2
 8002daa:	b25b      	sxtb	r3, r3
 8002dac:	723b      	strb	r3, [r7, #8]

	switch (code)
 8002dae:	7a3b      	ldrb	r3, [r7, #8]
 8002db0:	3b01      	subs	r3, #1
 8002db2:	2b05      	cmp	r3, #5
 8002db4:	d81a      	bhi.n	8002dec <svm_sector_from_alphabeta_q31+0xd0>
 8002db6:	a201      	add	r2, pc, #4	@ (adr r2, 8002dbc <svm_sector_from_alphabeta_q31+0xa0>)
 8002db8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dbc:	08002de5 	.word	0x08002de5
 8002dc0:	08002de1 	.word	0x08002de1
 8002dc4:	08002ddd 	.word	0x08002ddd
 8002dc8:	08002de9 	.word	0x08002de9
 8002dcc:	08002dd9 	.word	0x08002dd9
 8002dd0:	08002dd5 	.word	0x08002dd5
	{
	case 0b110:
		return 1;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	e00a      	b.n	8002dee <svm_sector_from_alphabeta_q31+0xd2>
	case 0b101:
		return 2;
 8002dd8:	2302      	movs	r3, #2
 8002dda:	e008      	b.n	8002dee <svm_sector_from_alphabeta_q31+0xd2>
	case 0b011:
		return 3;
 8002ddc:	2303      	movs	r3, #3
 8002dde:	e006      	b.n	8002dee <svm_sector_from_alphabeta_q31+0xd2>
	case 0b010:
		return 4;
 8002de0:	2304      	movs	r3, #4
 8002de2:	e004      	b.n	8002dee <svm_sector_from_alphabeta_q31+0xd2>
	case 0b001:
		return 5;
 8002de4:	2305      	movs	r3, #5
 8002de6:	e002      	b.n	8002dee <svm_sector_from_alphabeta_q31+0xd2>
	case 0b100:
		return 6;
 8002de8:	2306      	movs	r3, #6
 8002dea:	e000      	b.n	8002dee <svm_sector_from_alphabeta_q31+0xd2>
	case 0b111:
	case 0b000:
	default:
		return 1;
 8002dec:	2301      	movs	r3, #1
	}
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	371c      	adds	r7, #28
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd90      	pop	{r4, r7, pc}
 8002df6:	bf00      	nop
 8002df8:	c0000001 	.word	0xc0000001
 8002dfc:	6ed9eba2 	.word	0x6ed9eba2

08002e00 <svpwm_compute_T012_q31>:

// --- T0,T1,T2 と相デューティ生成（半キャリア正規化, Q31） ---
static inline void svpwm_compute_T012_q31(int32_t v_alpha, int32_t v_beta,
		uint8_t sector, int32_t *T0_q31, int32_t *T1_q31, int32_t *T2_q31,
		int32_t *Da_q31, int32_t *Db_q31, int32_t *Dc_q31)
{
 8002e00:	b590      	push	{r4, r7, lr}
 8002e02:	b09b      	sub	sp, #108	@ 0x6c
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	60f8      	str	r0, [r7, #12]
 8002e08:	60b9      	str	r1, [r7, #8]
 8002e0a:	603b      	str	r3, [r7, #0]
 8002e0c:	4613      	mov	r3, r2
 8002e0e:	71fb      	strb	r3, [r7, #7]
	// 逆Clarke（相対値でOK）
	int32_t va = v_alpha;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	65bb      	str	r3, [r7, #88]	@ 0x58
	int32_t vb = q31_add_sat(q31_mul(-(Q31_HALF), v_alpha),
 8002e14:	68f9      	ldr	r1, [r7, #12]
 8002e16:	4862      	ldr	r0, [pc, #392]	@ (8002fa0 <svpwm_compute_T012_q31+0x1a0>)
 8002e18:	f7ff fece 	bl	8002bb8 <q31_mul>
 8002e1c:	4604      	mov	r4, r0
 8002e1e:	68b9      	ldr	r1, [r7, #8]
 8002e20:	4860      	ldr	r0, [pc, #384]	@ (8002fa4 <svpwm_compute_T012_q31+0x1a4>)
 8002e22:	f7ff fec9 	bl	8002bb8 <q31_mul>
 8002e26:	4603      	mov	r3, r0
 8002e28:	4619      	mov	r1, r3
 8002e2a:	4620      	mov	r0, r4
 8002e2c:	f7ff ff0c 	bl	8002c48 <q31_add_sat>
 8002e30:	6578      	str	r0, [r7, #84]	@ 0x54
			q31_mul(Q31_SQRT3_OVER_2, v_beta));
	int32_t vc = q31_sub_sat(q31_mul(-(Q31_HALF), v_alpha),
 8002e32:	68f9      	ldr	r1, [r7, #12]
 8002e34:	485a      	ldr	r0, [pc, #360]	@ (8002fa0 <svpwm_compute_T012_q31+0x1a0>)
 8002e36:	f7ff febf 	bl	8002bb8 <q31_mul>
 8002e3a:	4604      	mov	r4, r0
 8002e3c:	68b9      	ldr	r1, [r7, #8]
 8002e3e:	4859      	ldr	r0, [pc, #356]	@ (8002fa4 <svpwm_compute_T012_q31+0x1a4>)
 8002e40:	f7ff feba 	bl	8002bb8 <q31_mul>
 8002e44:	4603      	mov	r3, r0
 8002e46:	4619      	mov	r1, r3
 8002e48:	4620      	mov	r0, r4
 8002e4a:	f7ff ff32 	bl	8002cb2 <q31_sub_sat>
 8002e4e:	6538      	str	r0, [r7, #80]	@ 0x50
			q31_mul(Q31_SQRT3_OVER_2, v_beta));

	// 最小値で平行移動 → [0, ...]
	int32_t min_ab = (va < vb) ? va : vb;
 8002e50:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002e52:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002e54:	4293      	cmp	r3, r2
 8002e56:	bfa8      	it	ge
 8002e58:	4613      	movge	r3, r2
 8002e5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
	int32_t min_all = (min_ab < vc) ? min_ab : vc;
 8002e5c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8002e5e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002e60:	4293      	cmp	r3, r2
 8002e62:	bfa8      	it	ge
 8002e64:	4613      	movge	r3, r2
 8002e66:	64bb      	str	r3, [r7, #72]	@ 0x48
	int32_t da = q31_sub_sat(va, min_all);
 8002e68:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8002e6a:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8002e6c:	f7ff ff21 	bl	8002cb2 <q31_sub_sat>
 8002e70:	6478      	str	r0, [r7, #68]	@ 0x44
	int32_t db = q31_sub_sat(vb, min_all);
 8002e72:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8002e74:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8002e76:	f7ff ff1c 	bl	8002cb2 <q31_sub_sat>
 8002e7a:	6438      	str	r0, [r7, #64]	@ 0x40
	int32_t dc = q31_sub_sat(vc, min_all);
 8002e7c:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8002e7e:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8002e80:	f7ff ff17 	bl	8002cb2 <q31_sub_sat>
 8002e84:	63f8      	str	r0, [r7, #60]	@ 0x3c

	int32_t sum = q31_add_sat(q31_add_sat(da, db), dc); // = T1+T2
 8002e86:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002e88:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8002e8a:	f7ff fedd 	bl	8002c48 <q31_add_sat>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002e92:	4618      	mov	r0, r3
 8002e94:	f7ff fed8 	bl	8002c48 <q31_add_sat>
 8002e98:	63b8      	str	r0, [r7, #56]	@ 0x38
	if (sum > Q31_ONE)
		sum = Q31_ONE; // クリップ

	int32_t offset = q31_mul(q31_sub_sat(Q31_ONE, sum), Q31_HALF);
 8002e9a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002e9c:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 8002ea0:	f7ff ff07 	bl	8002cb2 <q31_sub_sat>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	f06f 4140 	mvn.w	r1, #3221225472	@ 0xc0000000
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f7ff fe84 	bl	8002bb8 <q31_mul>
 8002eb0:	6378      	str	r0, [r7, #52]	@ 0x34

	int32_t Da = q31_add_sat(da, offset);
 8002eb2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8002eb4:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8002eb6:	f7ff fec7 	bl	8002c48 <q31_add_sat>
 8002eba:	6338      	str	r0, [r7, #48]	@ 0x30
	int32_t Db = q31_add_sat(db, offset);
 8002ebc:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8002ebe:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8002ec0:	f7ff fec2 	bl	8002c48 <q31_add_sat>
 8002ec4:	62f8      	str	r0, [r7, #44]	@ 0x2c
	int32_t Dc = q31_add_sat(dc, offset);
 8002ec6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8002ec8:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8002eca:	f7ff febd 	bl	8002c48 <q31_add_sat>
 8002ece:	62b8      	str	r0, [r7, #40]	@ 0x28

	// 並び替えで T1/T2 を取得
	int32_t Dmax = Da, Dmid = Db, Dmin = Dc;
 8002ed0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ed2:	667b      	str	r3, [r7, #100]	@ 0x64
 8002ed4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ed6:	663b      	str	r3, [r7, #96]	@ 0x60
 8002ed8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002eda:	65fb      	str	r3, [r7, #92]	@ 0x5c
	if (Dmax < Dmid)
 8002edc:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8002ede:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	da05      	bge.n	8002ef0 <svpwm_compute_T012_q31+0xf0>
	{
		int32_t t = Dmax;
 8002ee4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002ee6:	627b      	str	r3, [r7, #36]	@ 0x24
		Dmax = Dmid;
 8002ee8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002eea:	667b      	str	r3, [r7, #100]	@ 0x64
		Dmid = t;
 8002eec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eee:	663b      	str	r3, [r7, #96]	@ 0x60
	}
	if (Dmid < Dmin)
 8002ef0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002ef2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002ef4:	429a      	cmp	r2, r3
 8002ef6:	da05      	bge.n	8002f04 <svpwm_compute_T012_q31+0x104>
	{
		int32_t t = Dmid;
 8002ef8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002efa:	623b      	str	r3, [r7, #32]
		Dmid = Dmin;
 8002efc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002efe:	663b      	str	r3, [r7, #96]	@ 0x60
		Dmin = t;
 8002f00:	6a3b      	ldr	r3, [r7, #32]
 8002f02:	65fb      	str	r3, [r7, #92]	@ 0x5c
	}
	if (Dmax < Dmid)
 8002f04:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8002f06:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002f08:	429a      	cmp	r2, r3
 8002f0a:	da05      	bge.n	8002f18 <svpwm_compute_T012_q31+0x118>
	{
		int32_t t = Dmax;
 8002f0c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002f0e:	61fb      	str	r3, [r7, #28]
		Dmax = Dmid;
 8002f10:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002f12:	667b      	str	r3, [r7, #100]	@ 0x64
		Dmid = t;
 8002f14:	69fb      	ldr	r3, [r7, #28]
 8002f16:	663b      	str	r3, [r7, #96]	@ 0x60
	}

	int32_t T1 = q31_sub_sat(Dmid, Dmin);
 8002f18:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8002f1a:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8002f1c:	f7ff fec9 	bl	8002cb2 <q31_sub_sat>
 8002f20:	61b8      	str	r0, [r7, #24]
	int32_t T2 = q31_sub_sat(Dmax, Dmid);
 8002f22:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8002f24:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8002f26:	f7ff fec4 	bl	8002cb2 <q31_sub_sat>
 8002f2a:	6178      	str	r0, [r7, #20]
	int32_t T0 = q31_sub_sat(Q31_ONE, q31_add_sat(T1, T2));
 8002f2c:	6979      	ldr	r1, [r7, #20]
 8002f2e:	69b8      	ldr	r0, [r7, #24]
 8002f30:	f7ff fe8a 	bl	8002c48 <q31_add_sat>
 8002f34:	4603      	mov	r3, r0
 8002f36:	4619      	mov	r1, r3
 8002f38:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 8002f3c:	f7ff feb9 	bl	8002cb2 <q31_sub_sat>
 8002f40:	6138      	str	r0, [r7, #16]

	if (T0_q31)
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d002      	beq.n	8002f4e <svpwm_compute_T012_q31+0x14e>
		*T0_q31 = T0;
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	693a      	ldr	r2, [r7, #16]
 8002f4c:	601a      	str	r2, [r3, #0]
	if (T1_q31)
 8002f4e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d002      	beq.n	8002f5a <svpwm_compute_T012_q31+0x15a>
		*T1_q31 = T1;
 8002f54:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002f56:	69ba      	ldr	r2, [r7, #24]
 8002f58:	601a      	str	r2, [r3, #0]
	if (T2_q31)
 8002f5a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d002      	beq.n	8002f66 <svpwm_compute_T012_q31+0x166>
		*T2_q31 = T2;
 8002f60:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002f62:	697a      	ldr	r2, [r7, #20]
 8002f64:	601a      	str	r2, [r3, #0]
	if (Da_q31)
 8002f66:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d003      	beq.n	8002f76 <svpwm_compute_T012_q31+0x176>
		*Da_q31 = Da;
 8002f6e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002f72:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002f74:	601a      	str	r2, [r3, #0]
	if (Db_q31)
 8002f76:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d003      	beq.n	8002f86 <svpwm_compute_T012_q31+0x186>
		*Db_q31 = Db;
 8002f7e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002f82:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002f84:	601a      	str	r2, [r3, #0]
	if (Dc_q31)
 8002f86:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d003      	beq.n	8002f96 <svpwm_compute_T012_q31+0x196>
		*Dc_q31 = Dc;
 8002f8e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002f92:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002f94:	601a      	str	r2, [r3, #0]
}
 8002f96:	bf00      	nop
 8002f98:	376c      	adds	r7, #108	@ 0x6c
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd90      	pop	{r4, r7, pc}
 8002f9e:	bf00      	nop
 8002fa0:	c0000001 	.word	0xc0000001
 8002fa4:	6ed9eba2 	.word	0x6ed9eba2

08002fa8 <FOC_Init>:

void FOC_Init(FOC_t *foc)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b083      	sub	sp, #12
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
	foc->Id_ref_q31 = Q31_FROM_FLOAT(0.0f);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	601a      	str	r2, [r3, #0]
	foc->Iq_ref_q31 = Q31_FROM_FLOAT(0.0f);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	605a      	str	r2, [r3, #4]

	foc->Kp_d_q31 = Q31_FROM_FLOAT(0.1f);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	4a10      	ldr	r2, [pc, #64]	@ (8003000 <FOC_Init+0x58>)
 8002fc0:	609a      	str	r2, [r3, #8]
	foc->Ki_d_q31 = Q31_FROM_FLOAT(0.01f);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	4a0f      	ldr	r2, [pc, #60]	@ (8003004 <FOC_Init+0x5c>)
 8002fc6:	60da      	str	r2, [r3, #12]
	foc->Kp_q_q31 = Q31_FROM_FLOAT(0.1f);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	4a0d      	ldr	r2, [pc, #52]	@ (8003000 <FOC_Init+0x58>)
 8002fcc:	611a      	str	r2, [r3, #16]
	foc->Ki_q_q31 = Q31_FROM_FLOAT(0.01f);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	4a0c      	ldr	r2, [pc, #48]	@ (8003004 <FOC_Init+0x5c>)
 8002fd2:	615a      	str	r2, [r3, #20]

	foc->Id_i_q31 = 0;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	619a      	str	r2, [r3, #24]
	foc->Iq_i_q31 = 0;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	61da      	str	r2, [r3, #28]

	foc->Vbus_q31 = Q31_FROM_FLOAT(24.0f);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8002fe6:	621a      	str	r2, [r3, #32]
	foc->v_alpha_q31 = 0;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2200      	movs	r2, #0
 8002fec:	625a      	str	r2, [r3, #36]	@ 0x24
	foc->v_beta_q31 = 0;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002ff4:	bf00      	nop
 8002ff6:	370c      	adds	r7, #12
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffe:	4770      	bx	lr
 8003000:	0cccccd0 	.word	0x0cccccd0
 8003004:	0147ae14 	.word	0x0147ae14

08003008 <FOC_CurrentLoopStep>:

void FOC_CurrentLoopStep(FOC_t *foc, int32_t i_a_q31, int32_t i_b_q31,
		int32_t i_c_q31, int32_t theta_q31)
{
 8003008:	b590      	push	{r4, r7, lr}
 800300a:	b09d      	sub	sp, #116	@ 0x74
 800300c:	af00      	add	r7, sp, #0
 800300e:	60f8      	str	r0, [r7, #12]
 8003010:	60b9      	str	r1, [r7, #8]
 8003012:	607a      	str	r2, [r7, #4]
 8003014:	603b      	str	r3, [r7, #0]
	int32_t i_alpha = i_a_q31;
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	66fb      	str	r3, [r7, #108]	@ 0x6c
	int32_t two_ib = q31_add_sat(i_b_q31, i_b_q31);
 800301a:	6879      	ldr	r1, [r7, #4]
 800301c:	6878      	ldr	r0, [r7, #4]
 800301e:	f7ff fe13 	bl	8002c48 <q31_add_sat>
 8003022:	66b8      	str	r0, [r7, #104]	@ 0x68
	int32_t sum = q31_add_sat(i_a_q31, two_ib);
 8003024:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003026:	68b8      	ldr	r0, [r7, #8]
 8003028:	f7ff fe0e 	bl	8002c48 <q31_add_sat>
 800302c:	6678      	str	r0, [r7, #100]	@ 0x64
	int32_t i_beta = q31_mul(sum, Q31_INV_SQRT3);
 800302e:	4957      	ldr	r1, [pc, #348]	@ (800318c <FOC_CurrentLoopStep+0x184>)
 8003030:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8003032:	f7ff fdc1 	bl	8002bb8 <q31_mul>
 8003036:	6638      	str	r0, [r7, #96]	@ 0x60

	int32_t s, c;
	sincos_q31(theta_q31, &s, &c);
 8003038:	f107 0218 	add.w	r2, r7, #24
 800303c:	f107 031c 	add.w	r3, r7, #28
 8003040:	4619      	mov	r1, r3
 8003042:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8003046:	f7fe f99b 	bl	8001380 <sincos_q31>

	// Park
	int32_t d1 = q31_mul(c, i_alpha);
 800304a:	69bb      	ldr	r3, [r7, #24]
 800304c:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800304e:	4618      	mov	r0, r3
 8003050:	f7ff fdb2 	bl	8002bb8 <q31_mul>
 8003054:	65f8      	str	r0, [r7, #92]	@ 0x5c
	int32_t d2 = q31_mul(s, i_beta);
 8003056:	69fb      	ldr	r3, [r7, #28]
 8003058:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800305a:	4618      	mov	r0, r3
 800305c:	f7ff fdac 	bl	8002bb8 <q31_mul>
 8003060:	65b8      	str	r0, [r7, #88]	@ 0x58
	int32_t id = q31_add_sat(d1, d2);
 8003062:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8003064:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8003066:	f7ff fdef 	bl	8002c48 <q31_add_sat>
 800306a:	6578      	str	r0, [r7, #84]	@ 0x54

	int32_t q1 = q31_mul(-s, i_alpha);
 800306c:	69fb      	ldr	r3, [r7, #28]
 800306e:	425b      	negs	r3, r3
 8003070:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8003072:	4618      	mov	r0, r3
 8003074:	f7ff fda0 	bl	8002bb8 <q31_mul>
 8003078:	6538      	str	r0, [r7, #80]	@ 0x50
	int32_t q2 = q31_mul(c, i_beta);
 800307a:	69bb      	ldr	r3, [r7, #24]
 800307c:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800307e:	4618      	mov	r0, r3
 8003080:	f7ff fd9a 	bl	8002bb8 <q31_mul>
 8003084:	64f8      	str	r0, [r7, #76]	@ 0x4c
	int32_t iq = q31_add_sat(q1, q2);
 8003086:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8003088:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800308a:	f7ff fddd 	bl	8002c48 <q31_add_sat>
 800308e:	64b8      	str	r0, [r7, #72]	@ 0x48

	// PI
	int32_t ed = q31_sub_sat(foc->Id_ref_q31, id);
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003096:	4618      	mov	r0, r3
 8003098:	f7ff fe0b 	bl	8002cb2 <q31_sub_sat>
 800309c:	6478      	str	r0, [r7, #68]	@ 0x44
	int32_t eq = q31_sub_sat(foc->Iq_ref_q31, iq);
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80030a4:	4618      	mov	r0, r3
 80030a6:	f7ff fe04 	bl	8002cb2 <q31_sub_sat>
 80030aa:	6438      	str	r0, [r7, #64]	@ 0x40

	foc->Id_i_q31 = q31_add_sat(foc->Id_i_q31, q31_mul(foc->Ki_d_q31, ed));
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	699c      	ldr	r4, [r3, #24]
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	68db      	ldr	r3, [r3, #12]
 80030b4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80030b6:	4618      	mov	r0, r3
 80030b8:	f7ff fd7e 	bl	8002bb8 <q31_mul>
 80030bc:	4603      	mov	r3, r0
 80030be:	4619      	mov	r1, r3
 80030c0:	4620      	mov	r0, r4
 80030c2:	f7ff fdc1 	bl	8002c48 <q31_add_sat>
 80030c6:	4602      	mov	r2, r0
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	619a      	str	r2, [r3, #24]
	foc->Iq_i_q31 = q31_add_sat(foc->Iq_i_q31, q31_mul(foc->Ki_q_q31, eq));
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	69dc      	ldr	r4, [r3, #28]
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	695b      	ldr	r3, [r3, #20]
 80030d4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80030d6:	4618      	mov	r0, r3
 80030d8:	f7ff fd6e 	bl	8002bb8 <q31_mul>
 80030dc:	4603      	mov	r3, r0
 80030de:	4619      	mov	r1, r3
 80030e0:	4620      	mov	r0, r4
 80030e2:	f7ff fdb1 	bl	8002c48 <q31_add_sat>
 80030e6:	4602      	mov	r2, r0
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	61da      	str	r2, [r3, #28]

	int32_t vd = q31_add_sat(q31_mul(foc->Kp_d_q31, ed), foc->Id_i_q31);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80030f2:	4618      	mov	r0, r3
 80030f4:	f7ff fd60 	bl	8002bb8 <q31_mul>
 80030f8:	4602      	mov	r2, r0
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	699b      	ldr	r3, [r3, #24]
 80030fe:	4619      	mov	r1, r3
 8003100:	4610      	mov	r0, r2
 8003102:	f7ff fda1 	bl	8002c48 <q31_add_sat>
 8003106:	63f8      	str	r0, [r7, #60]	@ 0x3c
	int32_t vq = q31_add_sat(q31_mul(foc->Kp_q_q31, eq), foc->Iq_i_q31);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	691b      	ldr	r3, [r3, #16]
 800310c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800310e:	4618      	mov	r0, r3
 8003110:	f7ff fd52 	bl	8002bb8 <q31_mul>
 8003114:	4602      	mov	r2, r0
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	69db      	ldr	r3, [r3, #28]
 800311a:	4619      	mov	r1, r3
 800311c:	4610      	mov	r0, r2
 800311e:	f7ff fd93 	bl	8002c48 <q31_add_sat>
 8003122:	63b8      	str	r0, [r7, #56]	@ 0x38

	// 逆Park
	int32_t a1 = q31_mul(c, vd);
 8003124:	69bb      	ldr	r3, [r7, #24]
 8003126:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003128:	4618      	mov	r0, r3
 800312a:	f7ff fd45 	bl	8002bb8 <q31_mul>
 800312e:	6378      	str	r0, [r7, #52]	@ 0x34
	int32_t a2 = q31_mul(-s, vq);
 8003130:	69fb      	ldr	r3, [r7, #28]
 8003132:	425b      	negs	r3, r3
 8003134:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003136:	4618      	mov	r0, r3
 8003138:	f7ff fd3e 	bl	8002bb8 <q31_mul>
 800313c:	6338      	str	r0, [r7, #48]	@ 0x30
	int32_t v_alpha = q31_add_sat(a1, a2);
 800313e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003140:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8003142:	f7ff fd81 	bl	8002c48 <q31_add_sat>
 8003146:	62f8      	str	r0, [r7, #44]	@ 0x2c

	int32_t b1 = q31_mul(s, vd);
 8003148:	69fb      	ldr	r3, [r7, #28]
 800314a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800314c:	4618      	mov	r0, r3
 800314e:	f7ff fd33 	bl	8002bb8 <q31_mul>
 8003152:	62b8      	str	r0, [r7, #40]	@ 0x28
	int32_t b2 = q31_mul(c, vq);
 8003154:	69bb      	ldr	r3, [r7, #24]
 8003156:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003158:	4618      	mov	r0, r3
 800315a:	f7ff fd2d 	bl	8002bb8 <q31_mul>
 800315e:	6278      	str	r0, [r7, #36]	@ 0x24
	int32_t v_beta = q31_add_sat(b1, b2);
 8003160:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003162:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003164:	f7ff fd70 	bl	8002c48 <q31_add_sat>
 8003168:	6238      	str	r0, [r7, #32]

	foc->v_alpha_q31 = v_alpha;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800316e:	625a      	str	r2, [r3, #36]	@ 0x24
	foc->v_beta_q31 = v_beta;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	6a3a      	ldr	r2, [r7, #32]
 8003174:	629a      	str	r2, [r3, #40]	@ 0x28

	// （任意）ここでセクタを参照できる
	volatile uint8_t sector = svm_sector_from_alphabeta_q31(v_alpha, v_beta);
 8003176:	6a39      	ldr	r1, [r7, #32]
 8003178:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800317a:	f7ff fdcf 	bl	8002d1c <svm_sector_from_alphabeta_q31>
 800317e:	4603      	mov	r3, r0
 8003180:	75fb      	strb	r3, [r7, #23]
	(void) sector;
 8003182:	7dfb      	ldrb	r3, [r7, #23]
}
 8003184:	bf00      	nop
 8003186:	3774      	adds	r7, #116	@ 0x74
 8003188:	46bd      	mov	sp, r7
 800318a:	bd90      	pop	{r4, r7, pc}
 800318c:	49e69d16 	.word	0x49e69d16

08003190 <FOC_AlphaBetaToSVPWM>:

void FOC_AlphaBetaToSVPWM(FOC_t *foc, uint16_t *ccr1, uint16_t *ccr2,
		uint16_t *ccr3, uint16_t arr)
{
 8003190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003194:	b0ab      	sub	sp, #172	@ 0xac
 8003196:	af06      	add	r7, sp, #24
 8003198:	6578      	str	r0, [r7, #84]	@ 0x54
 800319a:	6539      	str	r1, [r7, #80]	@ 0x50
 800319c:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800319e:	64bb      	str	r3, [r7, #72]	@ 0x48
	// vαβ から T0,T1,T2 と相デューティを生成（半キャリア正規化）
	uint8_t sector = svm_sector_from_alphabeta_q31(foc->v_alpha_q31,
 80031a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031a2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80031a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031a8:	4619      	mov	r1, r3
 80031aa:	4610      	mov	r0, r2
 80031ac:	f7ff fdb6 	bl	8002d1c <svm_sector_from_alphabeta_q31>
 80031b0:	4603      	mov	r3, r0
 80031b2:	f887 308b 	strb.w	r3, [r7, #139]	@ 0x8b
			foc->v_beta_q31);

	int32_t T0, T1, T2, Da, Db, Dc; // Q31
	svpwm_compute_T012_q31(foc->v_alpha_q31, foc->v_beta_q31, sector, &T0, &T1,
 80031b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031b8:	6a5e      	ldr	r6, [r3, #36]	@ 0x24
 80031ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031bc:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80031be:	f107 0170 	add.w	r1, r7, #112	@ 0x70
 80031c2:	f897 208b 	ldrb.w	r2, [r7, #139]	@ 0x8b
 80031c6:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80031ca:	9304      	str	r3, [sp, #16]
 80031cc:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80031d0:	9303      	str	r3, [sp, #12]
 80031d2:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80031d6:	9302      	str	r3, [sp, #8]
 80031d8:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80031dc:	9301      	str	r3, [sp, #4]
 80031de:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80031e2:	9300      	str	r3, [sp, #0]
 80031e4:	460b      	mov	r3, r1
 80031e6:	4601      	mov	r1, r0
 80031e8:	4630      	mov	r0, r6
 80031ea:	f7ff fe09 	bl	8002e00 <svpwm_compute_T012_q31>
			&T2, &Da, &Db, &Dc);

	// デューティを [0..ARR] へマップ
	uint16_t d1 = (uint16_t) ((((int64_t) Da) * arr) >> 31);
 80031ee:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80031f0:	17da      	asrs	r2, r3, #31
 80031f2:	643b      	str	r3, [r7, #64]	@ 0x40
 80031f4:	647a      	str	r2, [r7, #68]	@ 0x44
 80031f6:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	@ 0xb8
 80031fa:	2200      	movs	r2, #0
 80031fc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80031fe:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003200:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8003204:	460b      	mov	r3, r1
 8003206:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003208:	fb02 f203 	mul.w	r2, r2, r3
 800320c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800320e:	e9c7 0110 	strd	r0, r1, [r7, #64]	@ 0x40
 8003212:	4601      	mov	r1, r0
 8003214:	fb01 f303 	mul.w	r3, r1, r3
 8003218:	4413      	add	r3, r2
 800321a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800321c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800321e:	fba2 4501 	umull	r4, r5, r2, r1
 8003222:	442b      	add	r3, r5
 8003224:	461d      	mov	r5, r3
 8003226:	f04f 0200 	mov.w	r2, #0
 800322a:	f04f 0300 	mov.w	r3, #0
 800322e:	0fe2      	lsrs	r2, r4, #31
 8003230:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
 8003234:	17eb      	asrs	r3, r5, #31
 8003236:	4613      	mov	r3, r2
 8003238:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
	uint16_t d2 = (uint16_t) ((((int64_t) Db) * arr) >> 31);
 800323c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800323e:	17da      	asrs	r2, r3, #31
 8003240:	623b      	str	r3, [r7, #32]
 8003242:	627a      	str	r2, [r7, #36]	@ 0x24
 8003244:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	@ 0xb8
 8003248:	2200      	movs	r2, #0
 800324a:	633b      	str	r3, [r7, #48]	@ 0x30
 800324c:	637a      	str	r2, [r7, #52]	@ 0x34
 800324e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003252:	460b      	mov	r3, r1
 8003254:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003258:	4622      	mov	r2, r4
 800325a:	fb02 f203 	mul.w	r2, r2, r3
 800325e:	e9c7 450c 	strd	r4, r5, [r7, #48]	@ 0x30
 8003262:	462b      	mov	r3, r5
 8003264:	4604      	mov	r4, r0
 8003266:	460d      	mov	r5, r1
 8003268:	4621      	mov	r1, r4
 800326a:	fb01 f303 	mul.w	r3, r1, r3
 800326e:	4413      	add	r3, r2
 8003270:	4622      	mov	r2, r4
 8003272:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003274:	fba2 8901 	umull	r8, r9, r2, r1
 8003278:	444b      	add	r3, r9
 800327a:	4699      	mov	r9, r3
 800327c:	f04f 0200 	mov.w	r2, #0
 8003280:	f04f 0300 	mov.w	r3, #0
 8003284:	ea4f 72d8 	mov.w	r2, r8, lsr #31
 8003288:	ea42 0249 	orr.w	r2, r2, r9, lsl #1
 800328c:	ea4f 73e9 	mov.w	r3, r9, asr #31
 8003290:	4613      	mov	r3, r2
 8003292:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
	uint16_t d3 = (uint16_t) ((((int64_t) Dc) * arr) >> 31);
 8003296:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003298:	17da      	asrs	r2, r3, #31
 800329a:	61bb      	str	r3, [r7, #24]
 800329c:	61fa      	str	r2, [r7, #28]
 800329e:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	@ 0xb8
 80032a2:	2200      	movs	r2, #0
 80032a4:	613b      	str	r3, [r7, #16]
 80032a6:	617a      	str	r2, [r7, #20]
 80032a8:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 80032ac:	462b      	mov	r3, r5
 80032ae:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80032b2:	4642      	mov	r2, r8
 80032b4:	fb02 f203 	mul.w	r2, r2, r3
 80032b8:	464b      	mov	r3, r9
 80032ba:	4621      	mov	r1, r4
 80032bc:	fb01 f303 	mul.w	r3, r1, r3
 80032c0:	4413      	add	r3, r2
 80032c2:	4622      	mov	r2, r4
 80032c4:	4641      	mov	r1, r8
 80032c6:	fba2 1201 	umull	r1, r2, r2, r1
 80032ca:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80032cc:	460a      	mov	r2, r1
 80032ce:	62ba      	str	r2, [r7, #40]	@ 0x28
 80032d0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80032d2:	4413      	add	r3, r2
 80032d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80032d6:	f04f 0200 	mov.w	r2, #0
 80032da:	f04f 0300 	mov.w	r3, #0
 80032de:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 80032e2:	4621      	mov	r1, r4
 80032e4:	0fca      	lsrs	r2, r1, #31
 80032e6:	4629      	mov	r1, r5
 80032e8:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 80032ec:	4629      	mov	r1, r5
 80032ee:	17cb      	asrs	r3, r1, #31
 80032f0:	4613      	mov	r3, r2
 80032f2:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84

	*ccr1 = d1;
 80032f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80032f8:	f8b7 2088 	ldrh.w	r2, [r7, #136]	@ 0x88
 80032fc:	801a      	strh	r2, [r3, #0]
	*ccr2 = d2;
 80032fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003300:	f8b7 2086 	ldrh.w	r2, [r7, #134]	@ 0x86
 8003304:	801a      	strh	r2, [r3, #0]
	*ccr3 = d3;
 8003306:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003308:	f8b7 2084 	ldrh.w	r2, [r7, #132]	@ 0x84
 800330c:	801a      	strh	r2, [r3, #0]

	// --- CCR4（サンプルマーカ）自動更新 ---
	// 半キャリア: T0/2, T1, T2, T0/2 → 長いアクティブベクトル中央に配置
	int32_t Tmid_center = 0;
 800330e:	2300      	movs	r3, #0
 8003310:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
	if (T1 >= T2)
 8003314:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003316:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003318:	429a      	cmp	r2, r3
 800331a:	db14      	blt.n	8003346 <FOC_AlphaBetaToSVPWM+0x1b6>
	{
		Tmid_center = q31_add_sat(q31_mul(T0, Q31_HALF), q31_mul(T1, Q31_HALF));
 800331c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800331e:	f06f 4140 	mvn.w	r1, #3221225472	@ 0xc0000000
 8003322:	4618      	mov	r0, r3
 8003324:	f7ff fc48 	bl	8002bb8 <q31_mul>
 8003328:	4604      	mov	r4, r0
 800332a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800332c:	f06f 4140 	mvn.w	r1, #3221225472	@ 0xc0000000
 8003330:	4618      	mov	r0, r3
 8003332:	f7ff fc41 	bl	8002bb8 <q31_mul>
 8003336:	4603      	mov	r3, r0
 8003338:	4619      	mov	r1, r3
 800333a:	4620      	mov	r0, r4
 800333c:	f7ff fc84 	bl	8002c48 <q31_add_sat>
 8003340:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
 8003344:	e01b      	b.n	800337e <FOC_AlphaBetaToSVPWM+0x1ee>
	}
	else
	{
		int32_t t0h = q31_mul(T0, Q31_HALF);
 8003346:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003348:	f06f 4140 	mvn.w	r1, #3221225472	@ 0xc0000000
 800334c:	4618      	mov	r0, r3
 800334e:	f7ff fc33 	bl	8002bb8 <q31_mul>
 8003352:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
		int32_t t2h = q31_mul(T2, Q31_HALF);
 8003356:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003358:	f06f 4140 	mvn.w	r1, #3221225472	@ 0xc0000000
 800335c:	4618      	mov	r0, r3
 800335e:	f7ff fc2b 	bl	8002bb8 <q31_mul>
 8003362:	67f8      	str	r0, [r7, #124]	@ 0x7c
		Tmid_center = q31_add_sat(q31_add_sat(t0h, T1), t2h);
 8003364:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003366:	4619      	mov	r1, r3
 8003368:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 800336c:	f7ff fc6c 	bl	8002c48 <q31_add_sat>
 8003370:	4603      	mov	r3, r0
 8003372:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003374:	4618      	mov	r0, r3
 8003376:	f7ff fc67 	bl	8002c48 <q31_add_sat>
 800337a:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
	}

	// セーフティマージン（例：2%）
	int32_t margin = Q31_MARGIN_2PCT;
 800337e:	4b1b      	ldr	r3, [pc, #108]	@ (80033ec <FOC_AlphaBetaToSVPWM+0x25c>)
 8003380:	67bb      	str	r3, [r7, #120]	@ 0x78
	// 必要なら Tmid_center にマージン調整を加える（ここでは中心不変）

	uint16_t c4 = (uint16_t) ((((int64_t) Tmid_center) * arr) >> 31);
 8003382:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003386:	17da      	asrs	r2, r3, #31
 8003388:	60bb      	str	r3, [r7, #8]
 800338a:	60fa      	str	r2, [r7, #12]
 800338c:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	@ 0xb8
 8003390:	2200      	movs	r2, #0
 8003392:	603b      	str	r3, [r7, #0]
 8003394:	607a      	str	r2, [r7, #4]
 8003396:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800339a:	462b      	mov	r3, r5
 800339c:	e9d7 8900 	ldrd	r8, r9, [r7]
 80033a0:	4642      	mov	r2, r8
 80033a2:	fb02 f203 	mul.w	r2, r2, r3
 80033a6:	464b      	mov	r3, r9
 80033a8:	4621      	mov	r1, r4
 80033aa:	fb01 f303 	mul.w	r3, r1, r3
 80033ae:	4413      	add	r3, r2
 80033b0:	4622      	mov	r2, r4
 80033b2:	4641      	mov	r1, r8
 80033b4:	fba2 ab01 	umull	sl, fp, r2, r1
 80033b8:	445b      	add	r3, fp
 80033ba:	469b      	mov	fp, r3
 80033bc:	f04f 0200 	mov.w	r2, #0
 80033c0:	f04f 0300 	mov.w	r3, #0
 80033c4:	ea4f 72da 	mov.w	r2, sl, lsr #31
 80033c8:	ea42 024b 	orr.w	r2, r2, fp, lsl #1
 80033cc:	ea4f 73eb 	mov.w	r3, fp, asr #31
 80033d0:	4613      	mov	r3, r2
 80033d2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
	FW_SetSampleMarker(c4);
 80033d6:	f8b7 3076 	ldrh.w	r3, [r7, #118]	@ 0x76
 80033da:	4618      	mov	r0, r3
 80033dc:	f7ff fb30 	bl	8002a40 <FW_SetSampleMarker>

	(void)margin;
}
 80033e0:	bf00      	nop
 80033e2:	3794      	adds	r7, #148	@ 0x94
 80033e4:	46bd      	mov	sp, r7
 80033e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80033ea:	bf00      	nop
 80033ec:	028f5c29 	.word	0x028f5c29

080033f0 <main>:
#include "app.h"

extern volatile uint8_t count_flag;

int main(void)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	af00      	add	r7, sp, #0
	FW_InitClocksAndGPIO();
 80033f4:	f7ff f8fe 	bl	80025f4 <FW_InitClocksAndGPIO>
	FW_TIM1_InitPWM();
 80033f8:	f7ff f9d6 	bl	80027a8 <FW_TIM1_InitPWM>
	FW_TIM2_Init();
 80033fc:	f7ff fa62 	bl	80028c4 <FW_TIM2_Init>
	FW_TIM3_InitBridge();
 8003400:	f7ff fa78 	bl	80028f4 <FW_TIM3_InitBridge>
	FW_TIM7_Init();
 8003404:	f7ff faa8 	bl	8002958 <FW_TIM7_Init>

	APP_Init();
 8003408:	f7fe f93a 	bl	8001680 <APP_Init>

	// サンプル位相：周期中央
	FW_SetSampleMarker((uint16_t) (TIM1_ARR / 2));
 800340c:	f240 70cf 	movw	r0, #1999	@ 0x7cf
 8003410:	f7ff fb16 	bl	8002a40 <FW_SetSampleMarker>

	FW_StartAll();
 8003414:	f7ff fac4 	bl	80029a0 <FW_StartAll>

	while (1)
	{
		if(count_flag == 1)
 8003418:	4b05      	ldr	r3, [pc, #20]	@ (8003430 <main+0x40>)
 800341a:	781b      	ldrb	r3, [r3, #0]
 800341c:	b2db      	uxtb	r3, r3
 800341e:	2b01      	cmp	r3, #1
 8003420:	d1fa      	bne.n	8003418 <main+0x28>
		{
			count_flag = 0;
 8003422:	4b03      	ldr	r3, [pc, #12]	@ (8003430 <main+0x40>)
 8003424:	2200      	movs	r2, #0
 8003426:	701a      	strb	r2, [r3, #0]
			APP_Step();
 8003428:	f7fe f9d6 	bl	80017d8 <APP_Step>
		if(count_flag == 1)
 800342c:	e7f4      	b.n	8003418 <main+0x28>
 800342e:	bf00      	nop
 8003430:	200002c2 	.word	0x200002c2

08003434 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003434:	b480      	push	{r7}
 8003436:	af00      	add	r7, sp, #0
  return 1;
 8003438:	2301      	movs	r3, #1
}
 800343a:	4618      	mov	r0, r3
 800343c:	46bd      	mov	sp, r7
 800343e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003442:	4770      	bx	lr

08003444 <_kill>:

int _kill(int pid, int sig)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b082      	sub	sp, #8
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
 800344c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800344e:	f000 fe8d 	bl	800416c <__errno>
 8003452:	4603      	mov	r3, r0
 8003454:	2216      	movs	r2, #22
 8003456:	601a      	str	r2, [r3, #0]
  return -1;
 8003458:	f04f 33ff 	mov.w	r3, #4294967295
}
 800345c:	4618      	mov	r0, r3
 800345e:	3708      	adds	r7, #8
 8003460:	46bd      	mov	sp, r7
 8003462:	bd80      	pop	{r7, pc}

08003464 <_exit>:

void _exit (int status)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b082      	sub	sp, #8
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800346c:	f04f 31ff 	mov.w	r1, #4294967295
 8003470:	6878      	ldr	r0, [r7, #4]
 8003472:	f7ff ffe7 	bl	8003444 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003476:	bf00      	nop
 8003478:	e7fd      	b.n	8003476 <_exit+0x12>

0800347a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800347a:	b580      	push	{r7, lr}
 800347c:	b086      	sub	sp, #24
 800347e:	af00      	add	r7, sp, #0
 8003480:	60f8      	str	r0, [r7, #12]
 8003482:	60b9      	str	r1, [r7, #8]
 8003484:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003486:	2300      	movs	r3, #0
 8003488:	617b      	str	r3, [r7, #20]
 800348a:	e00a      	b.n	80034a2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800348c:	f3af 8000 	nop.w
 8003490:	4601      	mov	r1, r0
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	1c5a      	adds	r2, r3, #1
 8003496:	60ba      	str	r2, [r7, #8]
 8003498:	b2ca      	uxtb	r2, r1
 800349a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800349c:	697b      	ldr	r3, [r7, #20]
 800349e:	3301      	adds	r3, #1
 80034a0:	617b      	str	r3, [r7, #20]
 80034a2:	697a      	ldr	r2, [r7, #20]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	429a      	cmp	r2, r3
 80034a8:	dbf0      	blt.n	800348c <_read+0x12>
  }

  return len;
 80034aa:	687b      	ldr	r3, [r7, #4]
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	3718      	adds	r7, #24
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bd80      	pop	{r7, pc}

080034b4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b086      	sub	sp, #24
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	60f8      	str	r0, [r7, #12]
 80034bc:	60b9      	str	r1, [r7, #8]
 80034be:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034c0:	2300      	movs	r3, #0
 80034c2:	617b      	str	r3, [r7, #20]
 80034c4:	e009      	b.n	80034da <_write+0x26>
  {
    __io_putchar(*ptr++);
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	1c5a      	adds	r2, r3, #1
 80034ca:	60ba      	str	r2, [r7, #8]
 80034cc:	781b      	ldrb	r3, [r3, #0]
 80034ce:	4618      	mov	r0, r3
 80034d0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	3301      	adds	r3, #1
 80034d8:	617b      	str	r3, [r7, #20]
 80034da:	697a      	ldr	r2, [r7, #20]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	429a      	cmp	r2, r3
 80034e0:	dbf1      	blt.n	80034c6 <_write+0x12>
  }
  return len;
 80034e2:	687b      	ldr	r3, [r7, #4]
}
 80034e4:	4618      	mov	r0, r3
 80034e6:	3718      	adds	r7, #24
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}

080034ec <_close>:

int _close(int file)
{
 80034ec:	b480      	push	{r7}
 80034ee:	b083      	sub	sp, #12
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80034f4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	370c      	adds	r7, #12
 80034fc:	46bd      	mov	sp, r7
 80034fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003502:	4770      	bx	lr

08003504 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003504:	b480      	push	{r7}
 8003506:	b083      	sub	sp, #12
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
 800350c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003514:	605a      	str	r2, [r3, #4]
  return 0;
 8003516:	2300      	movs	r3, #0
}
 8003518:	4618      	mov	r0, r3
 800351a:	370c      	adds	r7, #12
 800351c:	46bd      	mov	sp, r7
 800351e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003522:	4770      	bx	lr

08003524 <_isatty>:

int _isatty(int file)
{
 8003524:	b480      	push	{r7}
 8003526:	b083      	sub	sp, #12
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800352c:	2301      	movs	r3, #1
}
 800352e:	4618      	mov	r0, r3
 8003530:	370c      	adds	r7, #12
 8003532:	46bd      	mov	sp, r7
 8003534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003538:	4770      	bx	lr

0800353a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800353a:	b480      	push	{r7}
 800353c:	b085      	sub	sp, #20
 800353e:	af00      	add	r7, sp, #0
 8003540:	60f8      	str	r0, [r7, #12]
 8003542:	60b9      	str	r1, [r7, #8]
 8003544:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003546:	2300      	movs	r3, #0
}
 8003548:	4618      	mov	r0, r3
 800354a:	3714      	adds	r7, #20
 800354c:	46bd      	mov	sp, r7
 800354e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003552:	4770      	bx	lr

08003554 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b086      	sub	sp, #24
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800355c:	4a14      	ldr	r2, [pc, #80]	@ (80035b0 <_sbrk+0x5c>)
 800355e:	4b15      	ldr	r3, [pc, #84]	@ (80035b4 <_sbrk+0x60>)
 8003560:	1ad3      	subs	r3, r2, r3
 8003562:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003568:	4b13      	ldr	r3, [pc, #76]	@ (80035b8 <_sbrk+0x64>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d102      	bne.n	8003576 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003570:	4b11      	ldr	r3, [pc, #68]	@ (80035b8 <_sbrk+0x64>)
 8003572:	4a12      	ldr	r2, [pc, #72]	@ (80035bc <_sbrk+0x68>)
 8003574:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003576:	4b10      	ldr	r3, [pc, #64]	@ (80035b8 <_sbrk+0x64>)
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	4413      	add	r3, r2
 800357e:	693a      	ldr	r2, [r7, #16]
 8003580:	429a      	cmp	r2, r3
 8003582:	d207      	bcs.n	8003594 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003584:	f000 fdf2 	bl	800416c <__errno>
 8003588:	4603      	mov	r3, r0
 800358a:	220c      	movs	r2, #12
 800358c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800358e:	f04f 33ff 	mov.w	r3, #4294967295
 8003592:	e009      	b.n	80035a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003594:	4b08      	ldr	r3, [pc, #32]	@ (80035b8 <_sbrk+0x64>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800359a:	4b07      	ldr	r3, [pc, #28]	@ (80035b8 <_sbrk+0x64>)
 800359c:	681a      	ldr	r2, [r3, #0]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	4413      	add	r3, r2
 80035a2:	4a05      	ldr	r2, [pc, #20]	@ (80035b8 <_sbrk+0x64>)
 80035a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80035a6:	68fb      	ldr	r3, [r7, #12]
}
 80035a8:	4618      	mov	r0, r3
 80035aa:	3718      	adds	r7, #24
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bd80      	pop	{r7, pc}
 80035b0:	20020000 	.word	0x20020000
 80035b4:	00000400 	.word	0x00000400
 80035b8:	200002e4 	.word	0x200002e4
 80035bc:	20000438 	.word	0x20000438

080035c0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80035c0:	480d      	ldr	r0, [pc, #52]	@ (80035f8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80035c2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80035c4:	f7fd fcd6 	bl	8000f74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80035c8:	480c      	ldr	r0, [pc, #48]	@ (80035fc <LoopForever+0x6>)
  ldr r1, =_edata
 80035ca:	490d      	ldr	r1, [pc, #52]	@ (8003600 <LoopForever+0xa>)
  ldr r2, =_sidata
 80035cc:	4a0d      	ldr	r2, [pc, #52]	@ (8003604 <LoopForever+0xe>)
  movs r3, #0
 80035ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80035d0:	e002      	b.n	80035d8 <LoopCopyDataInit>

080035d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80035d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80035d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80035d6:	3304      	adds	r3, #4

080035d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80035d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80035da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80035dc:	d3f9      	bcc.n	80035d2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80035de:	4a0a      	ldr	r2, [pc, #40]	@ (8003608 <LoopForever+0x12>)
  ldr r4, =_ebss
 80035e0:	4c0a      	ldr	r4, [pc, #40]	@ (800360c <LoopForever+0x16>)
  movs r3, #0
 80035e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80035e4:	e001      	b.n	80035ea <LoopFillZerobss>

080035e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80035e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80035e8:	3204      	adds	r2, #4

080035ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80035ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80035ec:	d3fb      	bcc.n	80035e6 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 80035ee:	f000 fdc3 	bl	8004178 <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 80035f2:	f7ff fefd 	bl	80033f0 <main>

080035f6 <LoopForever>:

LoopForever:
  b LoopForever
 80035f6:	e7fe      	b.n	80035f6 <LoopForever>
  ldr   r0, =_estack
 80035f8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80035fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003600:	200001cc 	.word	0x200001cc
  ldr r2, =_sidata
 8003604:	080062dc 	.word	0x080062dc
  ldr r2, =_sbss
 8003608:	200001cc 	.word	0x200001cc
  ldr r4, =_ebss
 800360c:	20000434 	.word	0x20000434

08003610 <CAN1_RX0_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003610:	e7fe      	b.n	8003610 <CAN1_RX0_IRQHandler>

08003612 <__cvt>:
 8003612:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003616:	ec57 6b10 	vmov	r6, r7, d0
 800361a:	2f00      	cmp	r7, #0
 800361c:	460c      	mov	r4, r1
 800361e:	4619      	mov	r1, r3
 8003620:	463b      	mov	r3, r7
 8003622:	bfbb      	ittet	lt
 8003624:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8003628:	461f      	movlt	r7, r3
 800362a:	2300      	movge	r3, #0
 800362c:	232d      	movlt	r3, #45	@ 0x2d
 800362e:	700b      	strb	r3, [r1, #0]
 8003630:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003632:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8003636:	4691      	mov	r9, r2
 8003638:	f023 0820 	bic.w	r8, r3, #32
 800363c:	bfbc      	itt	lt
 800363e:	4632      	movlt	r2, r6
 8003640:	4616      	movlt	r6, r2
 8003642:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003646:	d005      	beq.n	8003654 <__cvt+0x42>
 8003648:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800364c:	d100      	bne.n	8003650 <__cvt+0x3e>
 800364e:	3401      	adds	r4, #1
 8003650:	2102      	movs	r1, #2
 8003652:	e000      	b.n	8003656 <__cvt+0x44>
 8003654:	2103      	movs	r1, #3
 8003656:	ab03      	add	r3, sp, #12
 8003658:	9301      	str	r3, [sp, #4]
 800365a:	ab02      	add	r3, sp, #8
 800365c:	9300      	str	r3, [sp, #0]
 800365e:	ec47 6b10 	vmov	d0, r6, r7
 8003662:	4653      	mov	r3, sl
 8003664:	4622      	mov	r2, r4
 8003666:	f000 fe37 	bl	80042d8 <_dtoa_r>
 800366a:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800366e:	4605      	mov	r5, r0
 8003670:	d119      	bne.n	80036a6 <__cvt+0x94>
 8003672:	f019 0f01 	tst.w	r9, #1
 8003676:	d00e      	beq.n	8003696 <__cvt+0x84>
 8003678:	eb00 0904 	add.w	r9, r0, r4
 800367c:	2200      	movs	r2, #0
 800367e:	2300      	movs	r3, #0
 8003680:	4630      	mov	r0, r6
 8003682:	4639      	mov	r1, r7
 8003684:	f7fd fa20 	bl	8000ac8 <__aeabi_dcmpeq>
 8003688:	b108      	cbz	r0, 800368e <__cvt+0x7c>
 800368a:	f8cd 900c 	str.w	r9, [sp, #12]
 800368e:	2230      	movs	r2, #48	@ 0x30
 8003690:	9b03      	ldr	r3, [sp, #12]
 8003692:	454b      	cmp	r3, r9
 8003694:	d31e      	bcc.n	80036d4 <__cvt+0xc2>
 8003696:	9b03      	ldr	r3, [sp, #12]
 8003698:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800369a:	1b5b      	subs	r3, r3, r5
 800369c:	4628      	mov	r0, r5
 800369e:	6013      	str	r3, [r2, #0]
 80036a0:	b004      	add	sp, #16
 80036a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80036a6:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80036aa:	eb00 0904 	add.w	r9, r0, r4
 80036ae:	d1e5      	bne.n	800367c <__cvt+0x6a>
 80036b0:	7803      	ldrb	r3, [r0, #0]
 80036b2:	2b30      	cmp	r3, #48	@ 0x30
 80036b4:	d10a      	bne.n	80036cc <__cvt+0xba>
 80036b6:	2200      	movs	r2, #0
 80036b8:	2300      	movs	r3, #0
 80036ba:	4630      	mov	r0, r6
 80036bc:	4639      	mov	r1, r7
 80036be:	f7fd fa03 	bl	8000ac8 <__aeabi_dcmpeq>
 80036c2:	b918      	cbnz	r0, 80036cc <__cvt+0xba>
 80036c4:	f1c4 0401 	rsb	r4, r4, #1
 80036c8:	f8ca 4000 	str.w	r4, [sl]
 80036cc:	f8da 3000 	ldr.w	r3, [sl]
 80036d0:	4499      	add	r9, r3
 80036d2:	e7d3      	b.n	800367c <__cvt+0x6a>
 80036d4:	1c59      	adds	r1, r3, #1
 80036d6:	9103      	str	r1, [sp, #12]
 80036d8:	701a      	strb	r2, [r3, #0]
 80036da:	e7d9      	b.n	8003690 <__cvt+0x7e>

080036dc <__exponent>:
 80036dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80036de:	2900      	cmp	r1, #0
 80036e0:	bfba      	itte	lt
 80036e2:	4249      	neglt	r1, r1
 80036e4:	232d      	movlt	r3, #45	@ 0x2d
 80036e6:	232b      	movge	r3, #43	@ 0x2b
 80036e8:	2909      	cmp	r1, #9
 80036ea:	7002      	strb	r2, [r0, #0]
 80036ec:	7043      	strb	r3, [r0, #1]
 80036ee:	dd29      	ble.n	8003744 <__exponent+0x68>
 80036f0:	f10d 0307 	add.w	r3, sp, #7
 80036f4:	461d      	mov	r5, r3
 80036f6:	270a      	movs	r7, #10
 80036f8:	461a      	mov	r2, r3
 80036fa:	fbb1 f6f7 	udiv	r6, r1, r7
 80036fe:	fb07 1416 	mls	r4, r7, r6, r1
 8003702:	3430      	adds	r4, #48	@ 0x30
 8003704:	f802 4c01 	strb.w	r4, [r2, #-1]
 8003708:	460c      	mov	r4, r1
 800370a:	2c63      	cmp	r4, #99	@ 0x63
 800370c:	f103 33ff 	add.w	r3, r3, #4294967295
 8003710:	4631      	mov	r1, r6
 8003712:	dcf1      	bgt.n	80036f8 <__exponent+0x1c>
 8003714:	3130      	adds	r1, #48	@ 0x30
 8003716:	1e94      	subs	r4, r2, #2
 8003718:	f803 1c01 	strb.w	r1, [r3, #-1]
 800371c:	1c41      	adds	r1, r0, #1
 800371e:	4623      	mov	r3, r4
 8003720:	42ab      	cmp	r3, r5
 8003722:	d30a      	bcc.n	800373a <__exponent+0x5e>
 8003724:	f10d 0309 	add.w	r3, sp, #9
 8003728:	1a9b      	subs	r3, r3, r2
 800372a:	42ac      	cmp	r4, r5
 800372c:	bf88      	it	hi
 800372e:	2300      	movhi	r3, #0
 8003730:	3302      	adds	r3, #2
 8003732:	4403      	add	r3, r0
 8003734:	1a18      	subs	r0, r3, r0
 8003736:	b003      	add	sp, #12
 8003738:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800373a:	f813 6b01 	ldrb.w	r6, [r3], #1
 800373e:	f801 6f01 	strb.w	r6, [r1, #1]!
 8003742:	e7ed      	b.n	8003720 <__exponent+0x44>
 8003744:	2330      	movs	r3, #48	@ 0x30
 8003746:	3130      	adds	r1, #48	@ 0x30
 8003748:	7083      	strb	r3, [r0, #2]
 800374a:	70c1      	strb	r1, [r0, #3]
 800374c:	1d03      	adds	r3, r0, #4
 800374e:	e7f1      	b.n	8003734 <__exponent+0x58>

08003750 <_printf_float>:
 8003750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003754:	b08d      	sub	sp, #52	@ 0x34
 8003756:	460c      	mov	r4, r1
 8003758:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800375c:	4616      	mov	r6, r2
 800375e:	461f      	mov	r7, r3
 8003760:	4605      	mov	r5, r0
 8003762:	f000 fcb9 	bl	80040d8 <_localeconv_r>
 8003766:	6803      	ldr	r3, [r0, #0]
 8003768:	9304      	str	r3, [sp, #16]
 800376a:	4618      	mov	r0, r3
 800376c:	f7fc fd80 	bl	8000270 <strlen>
 8003770:	2300      	movs	r3, #0
 8003772:	930a      	str	r3, [sp, #40]	@ 0x28
 8003774:	f8d8 3000 	ldr.w	r3, [r8]
 8003778:	9005      	str	r0, [sp, #20]
 800377a:	3307      	adds	r3, #7
 800377c:	f023 0307 	bic.w	r3, r3, #7
 8003780:	f103 0208 	add.w	r2, r3, #8
 8003784:	f894 a018 	ldrb.w	sl, [r4, #24]
 8003788:	f8d4 b000 	ldr.w	fp, [r4]
 800378c:	f8c8 2000 	str.w	r2, [r8]
 8003790:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003794:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8003798:	9307      	str	r3, [sp, #28]
 800379a:	f8cd 8018 	str.w	r8, [sp, #24]
 800379e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80037a2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80037a6:	4b9c      	ldr	r3, [pc, #624]	@ (8003a18 <_printf_float+0x2c8>)
 80037a8:	f04f 32ff 	mov.w	r2, #4294967295
 80037ac:	f7fd f9be 	bl	8000b2c <__aeabi_dcmpun>
 80037b0:	bb70      	cbnz	r0, 8003810 <_printf_float+0xc0>
 80037b2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80037b6:	4b98      	ldr	r3, [pc, #608]	@ (8003a18 <_printf_float+0x2c8>)
 80037b8:	f04f 32ff 	mov.w	r2, #4294967295
 80037bc:	f7fd f998 	bl	8000af0 <__aeabi_dcmple>
 80037c0:	bb30      	cbnz	r0, 8003810 <_printf_float+0xc0>
 80037c2:	2200      	movs	r2, #0
 80037c4:	2300      	movs	r3, #0
 80037c6:	4640      	mov	r0, r8
 80037c8:	4649      	mov	r1, r9
 80037ca:	f7fd f987 	bl	8000adc <__aeabi_dcmplt>
 80037ce:	b110      	cbz	r0, 80037d6 <_printf_float+0x86>
 80037d0:	232d      	movs	r3, #45	@ 0x2d
 80037d2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80037d6:	4a91      	ldr	r2, [pc, #580]	@ (8003a1c <_printf_float+0x2cc>)
 80037d8:	4b91      	ldr	r3, [pc, #580]	@ (8003a20 <_printf_float+0x2d0>)
 80037da:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80037de:	bf8c      	ite	hi
 80037e0:	4690      	movhi	r8, r2
 80037e2:	4698      	movls	r8, r3
 80037e4:	2303      	movs	r3, #3
 80037e6:	6123      	str	r3, [r4, #16]
 80037e8:	f02b 0304 	bic.w	r3, fp, #4
 80037ec:	6023      	str	r3, [r4, #0]
 80037ee:	f04f 0900 	mov.w	r9, #0
 80037f2:	9700      	str	r7, [sp, #0]
 80037f4:	4633      	mov	r3, r6
 80037f6:	aa0b      	add	r2, sp, #44	@ 0x2c
 80037f8:	4621      	mov	r1, r4
 80037fa:	4628      	mov	r0, r5
 80037fc:	f000 f9d2 	bl	8003ba4 <_printf_common>
 8003800:	3001      	adds	r0, #1
 8003802:	f040 808d 	bne.w	8003920 <_printf_float+0x1d0>
 8003806:	f04f 30ff 	mov.w	r0, #4294967295
 800380a:	b00d      	add	sp, #52	@ 0x34
 800380c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003810:	4642      	mov	r2, r8
 8003812:	464b      	mov	r3, r9
 8003814:	4640      	mov	r0, r8
 8003816:	4649      	mov	r1, r9
 8003818:	f7fd f988 	bl	8000b2c <__aeabi_dcmpun>
 800381c:	b140      	cbz	r0, 8003830 <_printf_float+0xe0>
 800381e:	464b      	mov	r3, r9
 8003820:	2b00      	cmp	r3, #0
 8003822:	bfbc      	itt	lt
 8003824:	232d      	movlt	r3, #45	@ 0x2d
 8003826:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800382a:	4a7e      	ldr	r2, [pc, #504]	@ (8003a24 <_printf_float+0x2d4>)
 800382c:	4b7e      	ldr	r3, [pc, #504]	@ (8003a28 <_printf_float+0x2d8>)
 800382e:	e7d4      	b.n	80037da <_printf_float+0x8a>
 8003830:	6863      	ldr	r3, [r4, #4]
 8003832:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8003836:	9206      	str	r2, [sp, #24]
 8003838:	1c5a      	adds	r2, r3, #1
 800383a:	d13b      	bne.n	80038b4 <_printf_float+0x164>
 800383c:	2306      	movs	r3, #6
 800383e:	6063      	str	r3, [r4, #4]
 8003840:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8003844:	2300      	movs	r3, #0
 8003846:	6022      	str	r2, [r4, #0]
 8003848:	9303      	str	r3, [sp, #12]
 800384a:	ab0a      	add	r3, sp, #40	@ 0x28
 800384c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8003850:	ab09      	add	r3, sp, #36	@ 0x24
 8003852:	9300      	str	r3, [sp, #0]
 8003854:	6861      	ldr	r1, [r4, #4]
 8003856:	ec49 8b10 	vmov	d0, r8, r9
 800385a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800385e:	4628      	mov	r0, r5
 8003860:	f7ff fed7 	bl	8003612 <__cvt>
 8003864:	9b06      	ldr	r3, [sp, #24]
 8003866:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8003868:	2b47      	cmp	r3, #71	@ 0x47
 800386a:	4680      	mov	r8, r0
 800386c:	d129      	bne.n	80038c2 <_printf_float+0x172>
 800386e:	1cc8      	adds	r0, r1, #3
 8003870:	db02      	blt.n	8003878 <_printf_float+0x128>
 8003872:	6863      	ldr	r3, [r4, #4]
 8003874:	4299      	cmp	r1, r3
 8003876:	dd41      	ble.n	80038fc <_printf_float+0x1ac>
 8003878:	f1aa 0a02 	sub.w	sl, sl, #2
 800387c:	fa5f fa8a 	uxtb.w	sl, sl
 8003880:	3901      	subs	r1, #1
 8003882:	4652      	mov	r2, sl
 8003884:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8003888:	9109      	str	r1, [sp, #36]	@ 0x24
 800388a:	f7ff ff27 	bl	80036dc <__exponent>
 800388e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003890:	1813      	adds	r3, r2, r0
 8003892:	2a01      	cmp	r2, #1
 8003894:	4681      	mov	r9, r0
 8003896:	6123      	str	r3, [r4, #16]
 8003898:	dc02      	bgt.n	80038a0 <_printf_float+0x150>
 800389a:	6822      	ldr	r2, [r4, #0]
 800389c:	07d2      	lsls	r2, r2, #31
 800389e:	d501      	bpl.n	80038a4 <_printf_float+0x154>
 80038a0:	3301      	adds	r3, #1
 80038a2:	6123      	str	r3, [r4, #16]
 80038a4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d0a2      	beq.n	80037f2 <_printf_float+0xa2>
 80038ac:	232d      	movs	r3, #45	@ 0x2d
 80038ae:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80038b2:	e79e      	b.n	80037f2 <_printf_float+0xa2>
 80038b4:	9a06      	ldr	r2, [sp, #24]
 80038b6:	2a47      	cmp	r2, #71	@ 0x47
 80038b8:	d1c2      	bne.n	8003840 <_printf_float+0xf0>
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d1c0      	bne.n	8003840 <_printf_float+0xf0>
 80038be:	2301      	movs	r3, #1
 80038c0:	e7bd      	b.n	800383e <_printf_float+0xee>
 80038c2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80038c6:	d9db      	bls.n	8003880 <_printf_float+0x130>
 80038c8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80038cc:	d118      	bne.n	8003900 <_printf_float+0x1b0>
 80038ce:	2900      	cmp	r1, #0
 80038d0:	6863      	ldr	r3, [r4, #4]
 80038d2:	dd0b      	ble.n	80038ec <_printf_float+0x19c>
 80038d4:	6121      	str	r1, [r4, #16]
 80038d6:	b913      	cbnz	r3, 80038de <_printf_float+0x18e>
 80038d8:	6822      	ldr	r2, [r4, #0]
 80038da:	07d0      	lsls	r0, r2, #31
 80038dc:	d502      	bpl.n	80038e4 <_printf_float+0x194>
 80038de:	3301      	adds	r3, #1
 80038e0:	440b      	add	r3, r1
 80038e2:	6123      	str	r3, [r4, #16]
 80038e4:	65a1      	str	r1, [r4, #88]	@ 0x58
 80038e6:	f04f 0900 	mov.w	r9, #0
 80038ea:	e7db      	b.n	80038a4 <_printf_float+0x154>
 80038ec:	b913      	cbnz	r3, 80038f4 <_printf_float+0x1a4>
 80038ee:	6822      	ldr	r2, [r4, #0]
 80038f0:	07d2      	lsls	r2, r2, #31
 80038f2:	d501      	bpl.n	80038f8 <_printf_float+0x1a8>
 80038f4:	3302      	adds	r3, #2
 80038f6:	e7f4      	b.n	80038e2 <_printf_float+0x192>
 80038f8:	2301      	movs	r3, #1
 80038fa:	e7f2      	b.n	80038e2 <_printf_float+0x192>
 80038fc:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8003900:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003902:	4299      	cmp	r1, r3
 8003904:	db05      	blt.n	8003912 <_printf_float+0x1c2>
 8003906:	6823      	ldr	r3, [r4, #0]
 8003908:	6121      	str	r1, [r4, #16]
 800390a:	07d8      	lsls	r0, r3, #31
 800390c:	d5ea      	bpl.n	80038e4 <_printf_float+0x194>
 800390e:	1c4b      	adds	r3, r1, #1
 8003910:	e7e7      	b.n	80038e2 <_printf_float+0x192>
 8003912:	2900      	cmp	r1, #0
 8003914:	bfd4      	ite	le
 8003916:	f1c1 0202 	rsble	r2, r1, #2
 800391a:	2201      	movgt	r2, #1
 800391c:	4413      	add	r3, r2
 800391e:	e7e0      	b.n	80038e2 <_printf_float+0x192>
 8003920:	6823      	ldr	r3, [r4, #0]
 8003922:	055a      	lsls	r2, r3, #21
 8003924:	d407      	bmi.n	8003936 <_printf_float+0x1e6>
 8003926:	6923      	ldr	r3, [r4, #16]
 8003928:	4642      	mov	r2, r8
 800392a:	4631      	mov	r1, r6
 800392c:	4628      	mov	r0, r5
 800392e:	47b8      	blx	r7
 8003930:	3001      	adds	r0, #1
 8003932:	d12b      	bne.n	800398c <_printf_float+0x23c>
 8003934:	e767      	b.n	8003806 <_printf_float+0xb6>
 8003936:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800393a:	f240 80dd 	bls.w	8003af8 <_printf_float+0x3a8>
 800393e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003942:	2200      	movs	r2, #0
 8003944:	2300      	movs	r3, #0
 8003946:	f7fd f8bf 	bl	8000ac8 <__aeabi_dcmpeq>
 800394a:	2800      	cmp	r0, #0
 800394c:	d033      	beq.n	80039b6 <_printf_float+0x266>
 800394e:	4a37      	ldr	r2, [pc, #220]	@ (8003a2c <_printf_float+0x2dc>)
 8003950:	2301      	movs	r3, #1
 8003952:	4631      	mov	r1, r6
 8003954:	4628      	mov	r0, r5
 8003956:	47b8      	blx	r7
 8003958:	3001      	adds	r0, #1
 800395a:	f43f af54 	beq.w	8003806 <_printf_float+0xb6>
 800395e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8003962:	4543      	cmp	r3, r8
 8003964:	db02      	blt.n	800396c <_printf_float+0x21c>
 8003966:	6823      	ldr	r3, [r4, #0]
 8003968:	07d8      	lsls	r0, r3, #31
 800396a:	d50f      	bpl.n	800398c <_printf_float+0x23c>
 800396c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003970:	4631      	mov	r1, r6
 8003972:	4628      	mov	r0, r5
 8003974:	47b8      	blx	r7
 8003976:	3001      	adds	r0, #1
 8003978:	f43f af45 	beq.w	8003806 <_printf_float+0xb6>
 800397c:	f04f 0900 	mov.w	r9, #0
 8003980:	f108 38ff 	add.w	r8, r8, #4294967295
 8003984:	f104 0a1a 	add.w	sl, r4, #26
 8003988:	45c8      	cmp	r8, r9
 800398a:	dc09      	bgt.n	80039a0 <_printf_float+0x250>
 800398c:	6823      	ldr	r3, [r4, #0]
 800398e:	079b      	lsls	r3, r3, #30
 8003990:	f100 8103 	bmi.w	8003b9a <_printf_float+0x44a>
 8003994:	68e0      	ldr	r0, [r4, #12]
 8003996:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003998:	4298      	cmp	r0, r3
 800399a:	bfb8      	it	lt
 800399c:	4618      	movlt	r0, r3
 800399e:	e734      	b.n	800380a <_printf_float+0xba>
 80039a0:	2301      	movs	r3, #1
 80039a2:	4652      	mov	r2, sl
 80039a4:	4631      	mov	r1, r6
 80039a6:	4628      	mov	r0, r5
 80039a8:	47b8      	blx	r7
 80039aa:	3001      	adds	r0, #1
 80039ac:	f43f af2b 	beq.w	8003806 <_printf_float+0xb6>
 80039b0:	f109 0901 	add.w	r9, r9, #1
 80039b4:	e7e8      	b.n	8003988 <_printf_float+0x238>
 80039b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	dc39      	bgt.n	8003a30 <_printf_float+0x2e0>
 80039bc:	4a1b      	ldr	r2, [pc, #108]	@ (8003a2c <_printf_float+0x2dc>)
 80039be:	2301      	movs	r3, #1
 80039c0:	4631      	mov	r1, r6
 80039c2:	4628      	mov	r0, r5
 80039c4:	47b8      	blx	r7
 80039c6:	3001      	adds	r0, #1
 80039c8:	f43f af1d 	beq.w	8003806 <_printf_float+0xb6>
 80039cc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80039d0:	ea59 0303 	orrs.w	r3, r9, r3
 80039d4:	d102      	bne.n	80039dc <_printf_float+0x28c>
 80039d6:	6823      	ldr	r3, [r4, #0]
 80039d8:	07d9      	lsls	r1, r3, #31
 80039da:	d5d7      	bpl.n	800398c <_printf_float+0x23c>
 80039dc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80039e0:	4631      	mov	r1, r6
 80039e2:	4628      	mov	r0, r5
 80039e4:	47b8      	blx	r7
 80039e6:	3001      	adds	r0, #1
 80039e8:	f43f af0d 	beq.w	8003806 <_printf_float+0xb6>
 80039ec:	f04f 0a00 	mov.w	sl, #0
 80039f0:	f104 0b1a 	add.w	fp, r4, #26
 80039f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80039f6:	425b      	negs	r3, r3
 80039f8:	4553      	cmp	r3, sl
 80039fa:	dc01      	bgt.n	8003a00 <_printf_float+0x2b0>
 80039fc:	464b      	mov	r3, r9
 80039fe:	e793      	b.n	8003928 <_printf_float+0x1d8>
 8003a00:	2301      	movs	r3, #1
 8003a02:	465a      	mov	r2, fp
 8003a04:	4631      	mov	r1, r6
 8003a06:	4628      	mov	r0, r5
 8003a08:	47b8      	blx	r7
 8003a0a:	3001      	adds	r0, #1
 8003a0c:	f43f aefb 	beq.w	8003806 <_printf_float+0xb6>
 8003a10:	f10a 0a01 	add.w	sl, sl, #1
 8003a14:	e7ee      	b.n	80039f4 <_printf_float+0x2a4>
 8003a16:	bf00      	nop
 8003a18:	7fefffff 	.word	0x7fefffff
 8003a1c:	08005f5c 	.word	0x08005f5c
 8003a20:	08005f58 	.word	0x08005f58
 8003a24:	08005f64 	.word	0x08005f64
 8003a28:	08005f60 	.word	0x08005f60
 8003a2c:	08005f68 	.word	0x08005f68
 8003a30:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003a32:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8003a36:	4553      	cmp	r3, sl
 8003a38:	bfa8      	it	ge
 8003a3a:	4653      	movge	r3, sl
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	4699      	mov	r9, r3
 8003a40:	dc36      	bgt.n	8003ab0 <_printf_float+0x360>
 8003a42:	f04f 0b00 	mov.w	fp, #0
 8003a46:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003a4a:	f104 021a 	add.w	r2, r4, #26
 8003a4e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003a50:	9306      	str	r3, [sp, #24]
 8003a52:	eba3 0309 	sub.w	r3, r3, r9
 8003a56:	455b      	cmp	r3, fp
 8003a58:	dc31      	bgt.n	8003abe <_printf_float+0x36e>
 8003a5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003a5c:	459a      	cmp	sl, r3
 8003a5e:	dc3a      	bgt.n	8003ad6 <_printf_float+0x386>
 8003a60:	6823      	ldr	r3, [r4, #0]
 8003a62:	07da      	lsls	r2, r3, #31
 8003a64:	d437      	bmi.n	8003ad6 <_printf_float+0x386>
 8003a66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003a68:	ebaa 0903 	sub.w	r9, sl, r3
 8003a6c:	9b06      	ldr	r3, [sp, #24]
 8003a6e:	ebaa 0303 	sub.w	r3, sl, r3
 8003a72:	4599      	cmp	r9, r3
 8003a74:	bfa8      	it	ge
 8003a76:	4699      	movge	r9, r3
 8003a78:	f1b9 0f00 	cmp.w	r9, #0
 8003a7c:	dc33      	bgt.n	8003ae6 <_printf_float+0x396>
 8003a7e:	f04f 0800 	mov.w	r8, #0
 8003a82:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003a86:	f104 0b1a 	add.w	fp, r4, #26
 8003a8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003a8c:	ebaa 0303 	sub.w	r3, sl, r3
 8003a90:	eba3 0309 	sub.w	r3, r3, r9
 8003a94:	4543      	cmp	r3, r8
 8003a96:	f77f af79 	ble.w	800398c <_printf_float+0x23c>
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	465a      	mov	r2, fp
 8003a9e:	4631      	mov	r1, r6
 8003aa0:	4628      	mov	r0, r5
 8003aa2:	47b8      	blx	r7
 8003aa4:	3001      	adds	r0, #1
 8003aa6:	f43f aeae 	beq.w	8003806 <_printf_float+0xb6>
 8003aaa:	f108 0801 	add.w	r8, r8, #1
 8003aae:	e7ec      	b.n	8003a8a <_printf_float+0x33a>
 8003ab0:	4642      	mov	r2, r8
 8003ab2:	4631      	mov	r1, r6
 8003ab4:	4628      	mov	r0, r5
 8003ab6:	47b8      	blx	r7
 8003ab8:	3001      	adds	r0, #1
 8003aba:	d1c2      	bne.n	8003a42 <_printf_float+0x2f2>
 8003abc:	e6a3      	b.n	8003806 <_printf_float+0xb6>
 8003abe:	2301      	movs	r3, #1
 8003ac0:	4631      	mov	r1, r6
 8003ac2:	4628      	mov	r0, r5
 8003ac4:	9206      	str	r2, [sp, #24]
 8003ac6:	47b8      	blx	r7
 8003ac8:	3001      	adds	r0, #1
 8003aca:	f43f ae9c 	beq.w	8003806 <_printf_float+0xb6>
 8003ace:	9a06      	ldr	r2, [sp, #24]
 8003ad0:	f10b 0b01 	add.w	fp, fp, #1
 8003ad4:	e7bb      	b.n	8003a4e <_printf_float+0x2fe>
 8003ad6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003ada:	4631      	mov	r1, r6
 8003adc:	4628      	mov	r0, r5
 8003ade:	47b8      	blx	r7
 8003ae0:	3001      	adds	r0, #1
 8003ae2:	d1c0      	bne.n	8003a66 <_printf_float+0x316>
 8003ae4:	e68f      	b.n	8003806 <_printf_float+0xb6>
 8003ae6:	9a06      	ldr	r2, [sp, #24]
 8003ae8:	464b      	mov	r3, r9
 8003aea:	4442      	add	r2, r8
 8003aec:	4631      	mov	r1, r6
 8003aee:	4628      	mov	r0, r5
 8003af0:	47b8      	blx	r7
 8003af2:	3001      	adds	r0, #1
 8003af4:	d1c3      	bne.n	8003a7e <_printf_float+0x32e>
 8003af6:	e686      	b.n	8003806 <_printf_float+0xb6>
 8003af8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8003afc:	f1ba 0f01 	cmp.w	sl, #1
 8003b00:	dc01      	bgt.n	8003b06 <_printf_float+0x3b6>
 8003b02:	07db      	lsls	r3, r3, #31
 8003b04:	d536      	bpl.n	8003b74 <_printf_float+0x424>
 8003b06:	2301      	movs	r3, #1
 8003b08:	4642      	mov	r2, r8
 8003b0a:	4631      	mov	r1, r6
 8003b0c:	4628      	mov	r0, r5
 8003b0e:	47b8      	blx	r7
 8003b10:	3001      	adds	r0, #1
 8003b12:	f43f ae78 	beq.w	8003806 <_printf_float+0xb6>
 8003b16:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003b1a:	4631      	mov	r1, r6
 8003b1c:	4628      	mov	r0, r5
 8003b1e:	47b8      	blx	r7
 8003b20:	3001      	adds	r0, #1
 8003b22:	f43f ae70 	beq.w	8003806 <_printf_float+0xb6>
 8003b26:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003b32:	f7fc ffc9 	bl	8000ac8 <__aeabi_dcmpeq>
 8003b36:	b9c0      	cbnz	r0, 8003b6a <_printf_float+0x41a>
 8003b38:	4653      	mov	r3, sl
 8003b3a:	f108 0201 	add.w	r2, r8, #1
 8003b3e:	4631      	mov	r1, r6
 8003b40:	4628      	mov	r0, r5
 8003b42:	47b8      	blx	r7
 8003b44:	3001      	adds	r0, #1
 8003b46:	d10c      	bne.n	8003b62 <_printf_float+0x412>
 8003b48:	e65d      	b.n	8003806 <_printf_float+0xb6>
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	465a      	mov	r2, fp
 8003b4e:	4631      	mov	r1, r6
 8003b50:	4628      	mov	r0, r5
 8003b52:	47b8      	blx	r7
 8003b54:	3001      	adds	r0, #1
 8003b56:	f43f ae56 	beq.w	8003806 <_printf_float+0xb6>
 8003b5a:	f108 0801 	add.w	r8, r8, #1
 8003b5e:	45d0      	cmp	r8, sl
 8003b60:	dbf3      	blt.n	8003b4a <_printf_float+0x3fa>
 8003b62:	464b      	mov	r3, r9
 8003b64:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8003b68:	e6df      	b.n	800392a <_printf_float+0x1da>
 8003b6a:	f04f 0800 	mov.w	r8, #0
 8003b6e:	f104 0b1a 	add.w	fp, r4, #26
 8003b72:	e7f4      	b.n	8003b5e <_printf_float+0x40e>
 8003b74:	2301      	movs	r3, #1
 8003b76:	4642      	mov	r2, r8
 8003b78:	e7e1      	b.n	8003b3e <_printf_float+0x3ee>
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	464a      	mov	r2, r9
 8003b7e:	4631      	mov	r1, r6
 8003b80:	4628      	mov	r0, r5
 8003b82:	47b8      	blx	r7
 8003b84:	3001      	adds	r0, #1
 8003b86:	f43f ae3e 	beq.w	8003806 <_printf_float+0xb6>
 8003b8a:	f108 0801 	add.w	r8, r8, #1
 8003b8e:	68e3      	ldr	r3, [r4, #12]
 8003b90:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8003b92:	1a5b      	subs	r3, r3, r1
 8003b94:	4543      	cmp	r3, r8
 8003b96:	dcf0      	bgt.n	8003b7a <_printf_float+0x42a>
 8003b98:	e6fc      	b.n	8003994 <_printf_float+0x244>
 8003b9a:	f04f 0800 	mov.w	r8, #0
 8003b9e:	f104 0919 	add.w	r9, r4, #25
 8003ba2:	e7f4      	b.n	8003b8e <_printf_float+0x43e>

08003ba4 <_printf_common>:
 8003ba4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ba8:	4616      	mov	r6, r2
 8003baa:	4698      	mov	r8, r3
 8003bac:	688a      	ldr	r2, [r1, #8]
 8003bae:	690b      	ldr	r3, [r1, #16]
 8003bb0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	bfb8      	it	lt
 8003bb8:	4613      	movlt	r3, r2
 8003bba:	6033      	str	r3, [r6, #0]
 8003bbc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003bc0:	4607      	mov	r7, r0
 8003bc2:	460c      	mov	r4, r1
 8003bc4:	b10a      	cbz	r2, 8003bca <_printf_common+0x26>
 8003bc6:	3301      	adds	r3, #1
 8003bc8:	6033      	str	r3, [r6, #0]
 8003bca:	6823      	ldr	r3, [r4, #0]
 8003bcc:	0699      	lsls	r1, r3, #26
 8003bce:	bf42      	ittt	mi
 8003bd0:	6833      	ldrmi	r3, [r6, #0]
 8003bd2:	3302      	addmi	r3, #2
 8003bd4:	6033      	strmi	r3, [r6, #0]
 8003bd6:	6825      	ldr	r5, [r4, #0]
 8003bd8:	f015 0506 	ands.w	r5, r5, #6
 8003bdc:	d106      	bne.n	8003bec <_printf_common+0x48>
 8003bde:	f104 0a19 	add.w	sl, r4, #25
 8003be2:	68e3      	ldr	r3, [r4, #12]
 8003be4:	6832      	ldr	r2, [r6, #0]
 8003be6:	1a9b      	subs	r3, r3, r2
 8003be8:	42ab      	cmp	r3, r5
 8003bea:	dc26      	bgt.n	8003c3a <_printf_common+0x96>
 8003bec:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003bf0:	6822      	ldr	r2, [r4, #0]
 8003bf2:	3b00      	subs	r3, #0
 8003bf4:	bf18      	it	ne
 8003bf6:	2301      	movne	r3, #1
 8003bf8:	0692      	lsls	r2, r2, #26
 8003bfa:	d42b      	bmi.n	8003c54 <_printf_common+0xb0>
 8003bfc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003c00:	4641      	mov	r1, r8
 8003c02:	4638      	mov	r0, r7
 8003c04:	47c8      	blx	r9
 8003c06:	3001      	adds	r0, #1
 8003c08:	d01e      	beq.n	8003c48 <_printf_common+0xa4>
 8003c0a:	6823      	ldr	r3, [r4, #0]
 8003c0c:	6922      	ldr	r2, [r4, #16]
 8003c0e:	f003 0306 	and.w	r3, r3, #6
 8003c12:	2b04      	cmp	r3, #4
 8003c14:	bf02      	ittt	eq
 8003c16:	68e5      	ldreq	r5, [r4, #12]
 8003c18:	6833      	ldreq	r3, [r6, #0]
 8003c1a:	1aed      	subeq	r5, r5, r3
 8003c1c:	68a3      	ldr	r3, [r4, #8]
 8003c1e:	bf0c      	ite	eq
 8003c20:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003c24:	2500      	movne	r5, #0
 8003c26:	4293      	cmp	r3, r2
 8003c28:	bfc4      	itt	gt
 8003c2a:	1a9b      	subgt	r3, r3, r2
 8003c2c:	18ed      	addgt	r5, r5, r3
 8003c2e:	2600      	movs	r6, #0
 8003c30:	341a      	adds	r4, #26
 8003c32:	42b5      	cmp	r5, r6
 8003c34:	d11a      	bne.n	8003c6c <_printf_common+0xc8>
 8003c36:	2000      	movs	r0, #0
 8003c38:	e008      	b.n	8003c4c <_printf_common+0xa8>
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	4652      	mov	r2, sl
 8003c3e:	4641      	mov	r1, r8
 8003c40:	4638      	mov	r0, r7
 8003c42:	47c8      	blx	r9
 8003c44:	3001      	adds	r0, #1
 8003c46:	d103      	bne.n	8003c50 <_printf_common+0xac>
 8003c48:	f04f 30ff 	mov.w	r0, #4294967295
 8003c4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c50:	3501      	adds	r5, #1
 8003c52:	e7c6      	b.n	8003be2 <_printf_common+0x3e>
 8003c54:	18e1      	adds	r1, r4, r3
 8003c56:	1c5a      	adds	r2, r3, #1
 8003c58:	2030      	movs	r0, #48	@ 0x30
 8003c5a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003c5e:	4422      	add	r2, r4
 8003c60:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003c64:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003c68:	3302      	adds	r3, #2
 8003c6a:	e7c7      	b.n	8003bfc <_printf_common+0x58>
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	4622      	mov	r2, r4
 8003c70:	4641      	mov	r1, r8
 8003c72:	4638      	mov	r0, r7
 8003c74:	47c8      	blx	r9
 8003c76:	3001      	adds	r0, #1
 8003c78:	d0e6      	beq.n	8003c48 <_printf_common+0xa4>
 8003c7a:	3601      	adds	r6, #1
 8003c7c:	e7d9      	b.n	8003c32 <_printf_common+0x8e>
	...

08003c80 <_printf_i>:
 8003c80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003c84:	7e0f      	ldrb	r7, [r1, #24]
 8003c86:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003c88:	2f78      	cmp	r7, #120	@ 0x78
 8003c8a:	4691      	mov	r9, r2
 8003c8c:	4680      	mov	r8, r0
 8003c8e:	460c      	mov	r4, r1
 8003c90:	469a      	mov	sl, r3
 8003c92:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003c96:	d807      	bhi.n	8003ca8 <_printf_i+0x28>
 8003c98:	2f62      	cmp	r7, #98	@ 0x62
 8003c9a:	d80a      	bhi.n	8003cb2 <_printf_i+0x32>
 8003c9c:	2f00      	cmp	r7, #0
 8003c9e:	f000 80d1 	beq.w	8003e44 <_printf_i+0x1c4>
 8003ca2:	2f58      	cmp	r7, #88	@ 0x58
 8003ca4:	f000 80b8 	beq.w	8003e18 <_printf_i+0x198>
 8003ca8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003cac:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003cb0:	e03a      	b.n	8003d28 <_printf_i+0xa8>
 8003cb2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003cb6:	2b15      	cmp	r3, #21
 8003cb8:	d8f6      	bhi.n	8003ca8 <_printf_i+0x28>
 8003cba:	a101      	add	r1, pc, #4	@ (adr r1, 8003cc0 <_printf_i+0x40>)
 8003cbc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003cc0:	08003d19 	.word	0x08003d19
 8003cc4:	08003d2d 	.word	0x08003d2d
 8003cc8:	08003ca9 	.word	0x08003ca9
 8003ccc:	08003ca9 	.word	0x08003ca9
 8003cd0:	08003ca9 	.word	0x08003ca9
 8003cd4:	08003ca9 	.word	0x08003ca9
 8003cd8:	08003d2d 	.word	0x08003d2d
 8003cdc:	08003ca9 	.word	0x08003ca9
 8003ce0:	08003ca9 	.word	0x08003ca9
 8003ce4:	08003ca9 	.word	0x08003ca9
 8003ce8:	08003ca9 	.word	0x08003ca9
 8003cec:	08003e2b 	.word	0x08003e2b
 8003cf0:	08003d57 	.word	0x08003d57
 8003cf4:	08003de5 	.word	0x08003de5
 8003cf8:	08003ca9 	.word	0x08003ca9
 8003cfc:	08003ca9 	.word	0x08003ca9
 8003d00:	08003e4d 	.word	0x08003e4d
 8003d04:	08003ca9 	.word	0x08003ca9
 8003d08:	08003d57 	.word	0x08003d57
 8003d0c:	08003ca9 	.word	0x08003ca9
 8003d10:	08003ca9 	.word	0x08003ca9
 8003d14:	08003ded 	.word	0x08003ded
 8003d18:	6833      	ldr	r3, [r6, #0]
 8003d1a:	1d1a      	adds	r2, r3, #4
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	6032      	str	r2, [r6, #0]
 8003d20:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003d24:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003d28:	2301      	movs	r3, #1
 8003d2a:	e09c      	b.n	8003e66 <_printf_i+0x1e6>
 8003d2c:	6833      	ldr	r3, [r6, #0]
 8003d2e:	6820      	ldr	r0, [r4, #0]
 8003d30:	1d19      	adds	r1, r3, #4
 8003d32:	6031      	str	r1, [r6, #0]
 8003d34:	0606      	lsls	r6, r0, #24
 8003d36:	d501      	bpl.n	8003d3c <_printf_i+0xbc>
 8003d38:	681d      	ldr	r5, [r3, #0]
 8003d3a:	e003      	b.n	8003d44 <_printf_i+0xc4>
 8003d3c:	0645      	lsls	r5, r0, #25
 8003d3e:	d5fb      	bpl.n	8003d38 <_printf_i+0xb8>
 8003d40:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003d44:	2d00      	cmp	r5, #0
 8003d46:	da03      	bge.n	8003d50 <_printf_i+0xd0>
 8003d48:	232d      	movs	r3, #45	@ 0x2d
 8003d4a:	426d      	negs	r5, r5
 8003d4c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003d50:	4858      	ldr	r0, [pc, #352]	@ (8003eb4 <_printf_i+0x234>)
 8003d52:	230a      	movs	r3, #10
 8003d54:	e011      	b.n	8003d7a <_printf_i+0xfa>
 8003d56:	6821      	ldr	r1, [r4, #0]
 8003d58:	6833      	ldr	r3, [r6, #0]
 8003d5a:	0608      	lsls	r0, r1, #24
 8003d5c:	f853 5b04 	ldr.w	r5, [r3], #4
 8003d60:	d402      	bmi.n	8003d68 <_printf_i+0xe8>
 8003d62:	0649      	lsls	r1, r1, #25
 8003d64:	bf48      	it	mi
 8003d66:	b2ad      	uxthmi	r5, r5
 8003d68:	2f6f      	cmp	r7, #111	@ 0x6f
 8003d6a:	4852      	ldr	r0, [pc, #328]	@ (8003eb4 <_printf_i+0x234>)
 8003d6c:	6033      	str	r3, [r6, #0]
 8003d6e:	bf14      	ite	ne
 8003d70:	230a      	movne	r3, #10
 8003d72:	2308      	moveq	r3, #8
 8003d74:	2100      	movs	r1, #0
 8003d76:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003d7a:	6866      	ldr	r6, [r4, #4]
 8003d7c:	60a6      	str	r6, [r4, #8]
 8003d7e:	2e00      	cmp	r6, #0
 8003d80:	db05      	blt.n	8003d8e <_printf_i+0x10e>
 8003d82:	6821      	ldr	r1, [r4, #0]
 8003d84:	432e      	orrs	r6, r5
 8003d86:	f021 0104 	bic.w	r1, r1, #4
 8003d8a:	6021      	str	r1, [r4, #0]
 8003d8c:	d04b      	beq.n	8003e26 <_printf_i+0x1a6>
 8003d8e:	4616      	mov	r6, r2
 8003d90:	fbb5 f1f3 	udiv	r1, r5, r3
 8003d94:	fb03 5711 	mls	r7, r3, r1, r5
 8003d98:	5dc7      	ldrb	r7, [r0, r7]
 8003d9a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003d9e:	462f      	mov	r7, r5
 8003da0:	42bb      	cmp	r3, r7
 8003da2:	460d      	mov	r5, r1
 8003da4:	d9f4      	bls.n	8003d90 <_printf_i+0x110>
 8003da6:	2b08      	cmp	r3, #8
 8003da8:	d10b      	bne.n	8003dc2 <_printf_i+0x142>
 8003daa:	6823      	ldr	r3, [r4, #0]
 8003dac:	07df      	lsls	r7, r3, #31
 8003dae:	d508      	bpl.n	8003dc2 <_printf_i+0x142>
 8003db0:	6923      	ldr	r3, [r4, #16]
 8003db2:	6861      	ldr	r1, [r4, #4]
 8003db4:	4299      	cmp	r1, r3
 8003db6:	bfde      	ittt	le
 8003db8:	2330      	movle	r3, #48	@ 0x30
 8003dba:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003dbe:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003dc2:	1b92      	subs	r2, r2, r6
 8003dc4:	6122      	str	r2, [r4, #16]
 8003dc6:	f8cd a000 	str.w	sl, [sp]
 8003dca:	464b      	mov	r3, r9
 8003dcc:	aa03      	add	r2, sp, #12
 8003dce:	4621      	mov	r1, r4
 8003dd0:	4640      	mov	r0, r8
 8003dd2:	f7ff fee7 	bl	8003ba4 <_printf_common>
 8003dd6:	3001      	adds	r0, #1
 8003dd8:	d14a      	bne.n	8003e70 <_printf_i+0x1f0>
 8003dda:	f04f 30ff 	mov.w	r0, #4294967295
 8003dde:	b004      	add	sp, #16
 8003de0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003de4:	6823      	ldr	r3, [r4, #0]
 8003de6:	f043 0320 	orr.w	r3, r3, #32
 8003dea:	6023      	str	r3, [r4, #0]
 8003dec:	4832      	ldr	r0, [pc, #200]	@ (8003eb8 <_printf_i+0x238>)
 8003dee:	2778      	movs	r7, #120	@ 0x78
 8003df0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003df4:	6823      	ldr	r3, [r4, #0]
 8003df6:	6831      	ldr	r1, [r6, #0]
 8003df8:	061f      	lsls	r7, r3, #24
 8003dfa:	f851 5b04 	ldr.w	r5, [r1], #4
 8003dfe:	d402      	bmi.n	8003e06 <_printf_i+0x186>
 8003e00:	065f      	lsls	r7, r3, #25
 8003e02:	bf48      	it	mi
 8003e04:	b2ad      	uxthmi	r5, r5
 8003e06:	6031      	str	r1, [r6, #0]
 8003e08:	07d9      	lsls	r1, r3, #31
 8003e0a:	bf44      	itt	mi
 8003e0c:	f043 0320 	orrmi.w	r3, r3, #32
 8003e10:	6023      	strmi	r3, [r4, #0]
 8003e12:	b11d      	cbz	r5, 8003e1c <_printf_i+0x19c>
 8003e14:	2310      	movs	r3, #16
 8003e16:	e7ad      	b.n	8003d74 <_printf_i+0xf4>
 8003e18:	4826      	ldr	r0, [pc, #152]	@ (8003eb4 <_printf_i+0x234>)
 8003e1a:	e7e9      	b.n	8003df0 <_printf_i+0x170>
 8003e1c:	6823      	ldr	r3, [r4, #0]
 8003e1e:	f023 0320 	bic.w	r3, r3, #32
 8003e22:	6023      	str	r3, [r4, #0]
 8003e24:	e7f6      	b.n	8003e14 <_printf_i+0x194>
 8003e26:	4616      	mov	r6, r2
 8003e28:	e7bd      	b.n	8003da6 <_printf_i+0x126>
 8003e2a:	6833      	ldr	r3, [r6, #0]
 8003e2c:	6825      	ldr	r5, [r4, #0]
 8003e2e:	6961      	ldr	r1, [r4, #20]
 8003e30:	1d18      	adds	r0, r3, #4
 8003e32:	6030      	str	r0, [r6, #0]
 8003e34:	062e      	lsls	r6, r5, #24
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	d501      	bpl.n	8003e3e <_printf_i+0x1be>
 8003e3a:	6019      	str	r1, [r3, #0]
 8003e3c:	e002      	b.n	8003e44 <_printf_i+0x1c4>
 8003e3e:	0668      	lsls	r0, r5, #25
 8003e40:	d5fb      	bpl.n	8003e3a <_printf_i+0x1ba>
 8003e42:	8019      	strh	r1, [r3, #0]
 8003e44:	2300      	movs	r3, #0
 8003e46:	6123      	str	r3, [r4, #16]
 8003e48:	4616      	mov	r6, r2
 8003e4a:	e7bc      	b.n	8003dc6 <_printf_i+0x146>
 8003e4c:	6833      	ldr	r3, [r6, #0]
 8003e4e:	1d1a      	adds	r2, r3, #4
 8003e50:	6032      	str	r2, [r6, #0]
 8003e52:	681e      	ldr	r6, [r3, #0]
 8003e54:	6862      	ldr	r2, [r4, #4]
 8003e56:	2100      	movs	r1, #0
 8003e58:	4630      	mov	r0, r6
 8003e5a:	f7fc f9b9 	bl	80001d0 <memchr>
 8003e5e:	b108      	cbz	r0, 8003e64 <_printf_i+0x1e4>
 8003e60:	1b80      	subs	r0, r0, r6
 8003e62:	6060      	str	r0, [r4, #4]
 8003e64:	6863      	ldr	r3, [r4, #4]
 8003e66:	6123      	str	r3, [r4, #16]
 8003e68:	2300      	movs	r3, #0
 8003e6a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003e6e:	e7aa      	b.n	8003dc6 <_printf_i+0x146>
 8003e70:	6923      	ldr	r3, [r4, #16]
 8003e72:	4632      	mov	r2, r6
 8003e74:	4649      	mov	r1, r9
 8003e76:	4640      	mov	r0, r8
 8003e78:	47d0      	blx	sl
 8003e7a:	3001      	adds	r0, #1
 8003e7c:	d0ad      	beq.n	8003dda <_printf_i+0x15a>
 8003e7e:	6823      	ldr	r3, [r4, #0]
 8003e80:	079b      	lsls	r3, r3, #30
 8003e82:	d413      	bmi.n	8003eac <_printf_i+0x22c>
 8003e84:	68e0      	ldr	r0, [r4, #12]
 8003e86:	9b03      	ldr	r3, [sp, #12]
 8003e88:	4298      	cmp	r0, r3
 8003e8a:	bfb8      	it	lt
 8003e8c:	4618      	movlt	r0, r3
 8003e8e:	e7a6      	b.n	8003dde <_printf_i+0x15e>
 8003e90:	2301      	movs	r3, #1
 8003e92:	4632      	mov	r2, r6
 8003e94:	4649      	mov	r1, r9
 8003e96:	4640      	mov	r0, r8
 8003e98:	47d0      	blx	sl
 8003e9a:	3001      	adds	r0, #1
 8003e9c:	d09d      	beq.n	8003dda <_printf_i+0x15a>
 8003e9e:	3501      	adds	r5, #1
 8003ea0:	68e3      	ldr	r3, [r4, #12]
 8003ea2:	9903      	ldr	r1, [sp, #12]
 8003ea4:	1a5b      	subs	r3, r3, r1
 8003ea6:	42ab      	cmp	r3, r5
 8003ea8:	dcf2      	bgt.n	8003e90 <_printf_i+0x210>
 8003eaa:	e7eb      	b.n	8003e84 <_printf_i+0x204>
 8003eac:	2500      	movs	r5, #0
 8003eae:	f104 0619 	add.w	r6, r4, #25
 8003eb2:	e7f5      	b.n	8003ea0 <_printf_i+0x220>
 8003eb4:	08005f6a 	.word	0x08005f6a
 8003eb8:	08005f7b 	.word	0x08005f7b

08003ebc <std>:
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	b510      	push	{r4, lr}
 8003ec0:	4604      	mov	r4, r0
 8003ec2:	e9c0 3300 	strd	r3, r3, [r0]
 8003ec6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003eca:	6083      	str	r3, [r0, #8]
 8003ecc:	8181      	strh	r1, [r0, #12]
 8003ece:	6643      	str	r3, [r0, #100]	@ 0x64
 8003ed0:	81c2      	strh	r2, [r0, #14]
 8003ed2:	6183      	str	r3, [r0, #24]
 8003ed4:	4619      	mov	r1, r3
 8003ed6:	2208      	movs	r2, #8
 8003ed8:	305c      	adds	r0, #92	@ 0x5c
 8003eda:	f000 f8f4 	bl	80040c6 <memset>
 8003ede:	4b0d      	ldr	r3, [pc, #52]	@ (8003f14 <std+0x58>)
 8003ee0:	6263      	str	r3, [r4, #36]	@ 0x24
 8003ee2:	4b0d      	ldr	r3, [pc, #52]	@ (8003f18 <std+0x5c>)
 8003ee4:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003ee6:	4b0d      	ldr	r3, [pc, #52]	@ (8003f1c <std+0x60>)
 8003ee8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003eea:	4b0d      	ldr	r3, [pc, #52]	@ (8003f20 <std+0x64>)
 8003eec:	6323      	str	r3, [r4, #48]	@ 0x30
 8003eee:	4b0d      	ldr	r3, [pc, #52]	@ (8003f24 <std+0x68>)
 8003ef0:	6224      	str	r4, [r4, #32]
 8003ef2:	429c      	cmp	r4, r3
 8003ef4:	d006      	beq.n	8003f04 <std+0x48>
 8003ef6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003efa:	4294      	cmp	r4, r2
 8003efc:	d002      	beq.n	8003f04 <std+0x48>
 8003efe:	33d0      	adds	r3, #208	@ 0xd0
 8003f00:	429c      	cmp	r4, r3
 8003f02:	d105      	bne.n	8003f10 <std+0x54>
 8003f04:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003f08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003f0c:	f000 b958 	b.w	80041c0 <__retarget_lock_init_recursive>
 8003f10:	bd10      	pop	{r4, pc}
 8003f12:	bf00      	nop
 8003f14:	08004041 	.word	0x08004041
 8003f18:	08004063 	.word	0x08004063
 8003f1c:	0800409b 	.word	0x0800409b
 8003f20:	080040bf 	.word	0x080040bf
 8003f24:	200002e8 	.word	0x200002e8

08003f28 <stdio_exit_handler>:
 8003f28:	4a02      	ldr	r2, [pc, #8]	@ (8003f34 <stdio_exit_handler+0xc>)
 8003f2a:	4903      	ldr	r1, [pc, #12]	@ (8003f38 <stdio_exit_handler+0x10>)
 8003f2c:	4803      	ldr	r0, [pc, #12]	@ (8003f3c <stdio_exit_handler+0x14>)
 8003f2e:	f000 b869 	b.w	8004004 <_fwalk_sglue>
 8003f32:	bf00      	nop
 8003f34:	20000004 	.word	0x20000004
 8003f38:	08005875 	.word	0x08005875
 8003f3c:	20000014 	.word	0x20000014

08003f40 <cleanup_stdio>:
 8003f40:	6841      	ldr	r1, [r0, #4]
 8003f42:	4b0c      	ldr	r3, [pc, #48]	@ (8003f74 <cleanup_stdio+0x34>)
 8003f44:	4299      	cmp	r1, r3
 8003f46:	b510      	push	{r4, lr}
 8003f48:	4604      	mov	r4, r0
 8003f4a:	d001      	beq.n	8003f50 <cleanup_stdio+0x10>
 8003f4c:	f001 fc92 	bl	8005874 <_fflush_r>
 8003f50:	68a1      	ldr	r1, [r4, #8]
 8003f52:	4b09      	ldr	r3, [pc, #36]	@ (8003f78 <cleanup_stdio+0x38>)
 8003f54:	4299      	cmp	r1, r3
 8003f56:	d002      	beq.n	8003f5e <cleanup_stdio+0x1e>
 8003f58:	4620      	mov	r0, r4
 8003f5a:	f001 fc8b 	bl	8005874 <_fflush_r>
 8003f5e:	68e1      	ldr	r1, [r4, #12]
 8003f60:	4b06      	ldr	r3, [pc, #24]	@ (8003f7c <cleanup_stdio+0x3c>)
 8003f62:	4299      	cmp	r1, r3
 8003f64:	d004      	beq.n	8003f70 <cleanup_stdio+0x30>
 8003f66:	4620      	mov	r0, r4
 8003f68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003f6c:	f001 bc82 	b.w	8005874 <_fflush_r>
 8003f70:	bd10      	pop	{r4, pc}
 8003f72:	bf00      	nop
 8003f74:	200002e8 	.word	0x200002e8
 8003f78:	20000350 	.word	0x20000350
 8003f7c:	200003b8 	.word	0x200003b8

08003f80 <global_stdio_init.part.0>:
 8003f80:	b510      	push	{r4, lr}
 8003f82:	4b0b      	ldr	r3, [pc, #44]	@ (8003fb0 <global_stdio_init.part.0+0x30>)
 8003f84:	4c0b      	ldr	r4, [pc, #44]	@ (8003fb4 <global_stdio_init.part.0+0x34>)
 8003f86:	4a0c      	ldr	r2, [pc, #48]	@ (8003fb8 <global_stdio_init.part.0+0x38>)
 8003f88:	601a      	str	r2, [r3, #0]
 8003f8a:	4620      	mov	r0, r4
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	2104      	movs	r1, #4
 8003f90:	f7ff ff94 	bl	8003ebc <std>
 8003f94:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003f98:	2201      	movs	r2, #1
 8003f9a:	2109      	movs	r1, #9
 8003f9c:	f7ff ff8e 	bl	8003ebc <std>
 8003fa0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003fa4:	2202      	movs	r2, #2
 8003fa6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003faa:	2112      	movs	r1, #18
 8003fac:	f7ff bf86 	b.w	8003ebc <std>
 8003fb0:	20000420 	.word	0x20000420
 8003fb4:	200002e8 	.word	0x200002e8
 8003fb8:	08003f29 	.word	0x08003f29

08003fbc <__sfp_lock_acquire>:
 8003fbc:	4801      	ldr	r0, [pc, #4]	@ (8003fc4 <__sfp_lock_acquire+0x8>)
 8003fbe:	f000 b900 	b.w	80041c2 <__retarget_lock_acquire_recursive>
 8003fc2:	bf00      	nop
 8003fc4:	20000429 	.word	0x20000429

08003fc8 <__sfp_lock_release>:
 8003fc8:	4801      	ldr	r0, [pc, #4]	@ (8003fd0 <__sfp_lock_release+0x8>)
 8003fca:	f000 b8fb 	b.w	80041c4 <__retarget_lock_release_recursive>
 8003fce:	bf00      	nop
 8003fd0:	20000429 	.word	0x20000429

08003fd4 <__sinit>:
 8003fd4:	b510      	push	{r4, lr}
 8003fd6:	4604      	mov	r4, r0
 8003fd8:	f7ff fff0 	bl	8003fbc <__sfp_lock_acquire>
 8003fdc:	6a23      	ldr	r3, [r4, #32]
 8003fde:	b11b      	cbz	r3, 8003fe8 <__sinit+0x14>
 8003fe0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003fe4:	f7ff bff0 	b.w	8003fc8 <__sfp_lock_release>
 8003fe8:	4b04      	ldr	r3, [pc, #16]	@ (8003ffc <__sinit+0x28>)
 8003fea:	6223      	str	r3, [r4, #32]
 8003fec:	4b04      	ldr	r3, [pc, #16]	@ (8004000 <__sinit+0x2c>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d1f5      	bne.n	8003fe0 <__sinit+0xc>
 8003ff4:	f7ff ffc4 	bl	8003f80 <global_stdio_init.part.0>
 8003ff8:	e7f2      	b.n	8003fe0 <__sinit+0xc>
 8003ffa:	bf00      	nop
 8003ffc:	08003f41 	.word	0x08003f41
 8004000:	20000420 	.word	0x20000420

08004004 <_fwalk_sglue>:
 8004004:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004008:	4607      	mov	r7, r0
 800400a:	4688      	mov	r8, r1
 800400c:	4614      	mov	r4, r2
 800400e:	2600      	movs	r6, #0
 8004010:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004014:	f1b9 0901 	subs.w	r9, r9, #1
 8004018:	d505      	bpl.n	8004026 <_fwalk_sglue+0x22>
 800401a:	6824      	ldr	r4, [r4, #0]
 800401c:	2c00      	cmp	r4, #0
 800401e:	d1f7      	bne.n	8004010 <_fwalk_sglue+0xc>
 8004020:	4630      	mov	r0, r6
 8004022:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004026:	89ab      	ldrh	r3, [r5, #12]
 8004028:	2b01      	cmp	r3, #1
 800402a:	d907      	bls.n	800403c <_fwalk_sglue+0x38>
 800402c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004030:	3301      	adds	r3, #1
 8004032:	d003      	beq.n	800403c <_fwalk_sglue+0x38>
 8004034:	4629      	mov	r1, r5
 8004036:	4638      	mov	r0, r7
 8004038:	47c0      	blx	r8
 800403a:	4306      	orrs	r6, r0
 800403c:	3568      	adds	r5, #104	@ 0x68
 800403e:	e7e9      	b.n	8004014 <_fwalk_sglue+0x10>

08004040 <__sread>:
 8004040:	b510      	push	{r4, lr}
 8004042:	460c      	mov	r4, r1
 8004044:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004048:	f000 f86c 	bl	8004124 <_read_r>
 800404c:	2800      	cmp	r0, #0
 800404e:	bfab      	itete	ge
 8004050:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004052:	89a3      	ldrhlt	r3, [r4, #12]
 8004054:	181b      	addge	r3, r3, r0
 8004056:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800405a:	bfac      	ite	ge
 800405c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800405e:	81a3      	strhlt	r3, [r4, #12]
 8004060:	bd10      	pop	{r4, pc}

08004062 <__swrite>:
 8004062:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004066:	461f      	mov	r7, r3
 8004068:	898b      	ldrh	r3, [r1, #12]
 800406a:	05db      	lsls	r3, r3, #23
 800406c:	4605      	mov	r5, r0
 800406e:	460c      	mov	r4, r1
 8004070:	4616      	mov	r6, r2
 8004072:	d505      	bpl.n	8004080 <__swrite+0x1e>
 8004074:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004078:	2302      	movs	r3, #2
 800407a:	2200      	movs	r2, #0
 800407c:	f000 f840 	bl	8004100 <_lseek_r>
 8004080:	89a3      	ldrh	r3, [r4, #12]
 8004082:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004086:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800408a:	81a3      	strh	r3, [r4, #12]
 800408c:	4632      	mov	r2, r6
 800408e:	463b      	mov	r3, r7
 8004090:	4628      	mov	r0, r5
 8004092:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004096:	f000 b857 	b.w	8004148 <_write_r>

0800409a <__sseek>:
 800409a:	b510      	push	{r4, lr}
 800409c:	460c      	mov	r4, r1
 800409e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80040a2:	f000 f82d 	bl	8004100 <_lseek_r>
 80040a6:	1c43      	adds	r3, r0, #1
 80040a8:	89a3      	ldrh	r3, [r4, #12]
 80040aa:	bf15      	itete	ne
 80040ac:	6560      	strne	r0, [r4, #84]	@ 0x54
 80040ae:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80040b2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80040b6:	81a3      	strheq	r3, [r4, #12]
 80040b8:	bf18      	it	ne
 80040ba:	81a3      	strhne	r3, [r4, #12]
 80040bc:	bd10      	pop	{r4, pc}

080040be <__sclose>:
 80040be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80040c2:	f000 b80d 	b.w	80040e0 <_close_r>

080040c6 <memset>:
 80040c6:	4402      	add	r2, r0
 80040c8:	4603      	mov	r3, r0
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d100      	bne.n	80040d0 <memset+0xa>
 80040ce:	4770      	bx	lr
 80040d0:	f803 1b01 	strb.w	r1, [r3], #1
 80040d4:	e7f9      	b.n	80040ca <memset+0x4>
	...

080040d8 <_localeconv_r>:
 80040d8:	4800      	ldr	r0, [pc, #0]	@ (80040dc <_localeconv_r+0x4>)
 80040da:	4770      	bx	lr
 80040dc:	20000150 	.word	0x20000150

080040e0 <_close_r>:
 80040e0:	b538      	push	{r3, r4, r5, lr}
 80040e2:	4d06      	ldr	r5, [pc, #24]	@ (80040fc <_close_r+0x1c>)
 80040e4:	2300      	movs	r3, #0
 80040e6:	4604      	mov	r4, r0
 80040e8:	4608      	mov	r0, r1
 80040ea:	602b      	str	r3, [r5, #0]
 80040ec:	f7ff f9fe 	bl	80034ec <_close>
 80040f0:	1c43      	adds	r3, r0, #1
 80040f2:	d102      	bne.n	80040fa <_close_r+0x1a>
 80040f4:	682b      	ldr	r3, [r5, #0]
 80040f6:	b103      	cbz	r3, 80040fa <_close_r+0x1a>
 80040f8:	6023      	str	r3, [r4, #0]
 80040fa:	bd38      	pop	{r3, r4, r5, pc}
 80040fc:	20000424 	.word	0x20000424

08004100 <_lseek_r>:
 8004100:	b538      	push	{r3, r4, r5, lr}
 8004102:	4d07      	ldr	r5, [pc, #28]	@ (8004120 <_lseek_r+0x20>)
 8004104:	4604      	mov	r4, r0
 8004106:	4608      	mov	r0, r1
 8004108:	4611      	mov	r1, r2
 800410a:	2200      	movs	r2, #0
 800410c:	602a      	str	r2, [r5, #0]
 800410e:	461a      	mov	r2, r3
 8004110:	f7ff fa13 	bl	800353a <_lseek>
 8004114:	1c43      	adds	r3, r0, #1
 8004116:	d102      	bne.n	800411e <_lseek_r+0x1e>
 8004118:	682b      	ldr	r3, [r5, #0]
 800411a:	b103      	cbz	r3, 800411e <_lseek_r+0x1e>
 800411c:	6023      	str	r3, [r4, #0]
 800411e:	bd38      	pop	{r3, r4, r5, pc}
 8004120:	20000424 	.word	0x20000424

08004124 <_read_r>:
 8004124:	b538      	push	{r3, r4, r5, lr}
 8004126:	4d07      	ldr	r5, [pc, #28]	@ (8004144 <_read_r+0x20>)
 8004128:	4604      	mov	r4, r0
 800412a:	4608      	mov	r0, r1
 800412c:	4611      	mov	r1, r2
 800412e:	2200      	movs	r2, #0
 8004130:	602a      	str	r2, [r5, #0]
 8004132:	461a      	mov	r2, r3
 8004134:	f7ff f9a1 	bl	800347a <_read>
 8004138:	1c43      	adds	r3, r0, #1
 800413a:	d102      	bne.n	8004142 <_read_r+0x1e>
 800413c:	682b      	ldr	r3, [r5, #0]
 800413e:	b103      	cbz	r3, 8004142 <_read_r+0x1e>
 8004140:	6023      	str	r3, [r4, #0]
 8004142:	bd38      	pop	{r3, r4, r5, pc}
 8004144:	20000424 	.word	0x20000424

08004148 <_write_r>:
 8004148:	b538      	push	{r3, r4, r5, lr}
 800414a:	4d07      	ldr	r5, [pc, #28]	@ (8004168 <_write_r+0x20>)
 800414c:	4604      	mov	r4, r0
 800414e:	4608      	mov	r0, r1
 8004150:	4611      	mov	r1, r2
 8004152:	2200      	movs	r2, #0
 8004154:	602a      	str	r2, [r5, #0]
 8004156:	461a      	mov	r2, r3
 8004158:	f7ff f9ac 	bl	80034b4 <_write>
 800415c:	1c43      	adds	r3, r0, #1
 800415e:	d102      	bne.n	8004166 <_write_r+0x1e>
 8004160:	682b      	ldr	r3, [r5, #0]
 8004162:	b103      	cbz	r3, 8004166 <_write_r+0x1e>
 8004164:	6023      	str	r3, [r4, #0]
 8004166:	bd38      	pop	{r3, r4, r5, pc}
 8004168:	20000424 	.word	0x20000424

0800416c <__errno>:
 800416c:	4b01      	ldr	r3, [pc, #4]	@ (8004174 <__errno+0x8>)
 800416e:	6818      	ldr	r0, [r3, #0]
 8004170:	4770      	bx	lr
 8004172:	bf00      	nop
 8004174:	20000010 	.word	0x20000010

08004178 <__libc_init_array>:
 8004178:	b570      	push	{r4, r5, r6, lr}
 800417a:	4d0d      	ldr	r5, [pc, #52]	@ (80041b0 <__libc_init_array+0x38>)
 800417c:	4c0d      	ldr	r4, [pc, #52]	@ (80041b4 <__libc_init_array+0x3c>)
 800417e:	1b64      	subs	r4, r4, r5
 8004180:	10a4      	asrs	r4, r4, #2
 8004182:	2600      	movs	r6, #0
 8004184:	42a6      	cmp	r6, r4
 8004186:	d109      	bne.n	800419c <__libc_init_array+0x24>
 8004188:	4d0b      	ldr	r5, [pc, #44]	@ (80041b8 <__libc_init_array+0x40>)
 800418a:	4c0c      	ldr	r4, [pc, #48]	@ (80041bc <__libc_init_array+0x44>)
 800418c:	f001 fec0 	bl	8005f10 <_init>
 8004190:	1b64      	subs	r4, r4, r5
 8004192:	10a4      	asrs	r4, r4, #2
 8004194:	2600      	movs	r6, #0
 8004196:	42a6      	cmp	r6, r4
 8004198:	d105      	bne.n	80041a6 <__libc_init_array+0x2e>
 800419a:	bd70      	pop	{r4, r5, r6, pc}
 800419c:	f855 3b04 	ldr.w	r3, [r5], #4
 80041a0:	4798      	blx	r3
 80041a2:	3601      	adds	r6, #1
 80041a4:	e7ee      	b.n	8004184 <__libc_init_array+0xc>
 80041a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80041aa:	4798      	blx	r3
 80041ac:	3601      	adds	r6, #1
 80041ae:	e7f2      	b.n	8004196 <__libc_init_array+0x1e>
 80041b0:	080062d4 	.word	0x080062d4
 80041b4:	080062d4 	.word	0x080062d4
 80041b8:	080062d4 	.word	0x080062d4
 80041bc:	080062d8 	.word	0x080062d8

080041c0 <__retarget_lock_init_recursive>:
 80041c0:	4770      	bx	lr

080041c2 <__retarget_lock_acquire_recursive>:
 80041c2:	4770      	bx	lr

080041c4 <__retarget_lock_release_recursive>:
 80041c4:	4770      	bx	lr

080041c6 <quorem>:
 80041c6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041ca:	6903      	ldr	r3, [r0, #16]
 80041cc:	690c      	ldr	r4, [r1, #16]
 80041ce:	42a3      	cmp	r3, r4
 80041d0:	4607      	mov	r7, r0
 80041d2:	db7e      	blt.n	80042d2 <quorem+0x10c>
 80041d4:	3c01      	subs	r4, #1
 80041d6:	f101 0814 	add.w	r8, r1, #20
 80041da:	00a3      	lsls	r3, r4, #2
 80041dc:	f100 0514 	add.w	r5, r0, #20
 80041e0:	9300      	str	r3, [sp, #0]
 80041e2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80041e6:	9301      	str	r3, [sp, #4]
 80041e8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80041ec:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80041f0:	3301      	adds	r3, #1
 80041f2:	429a      	cmp	r2, r3
 80041f4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80041f8:	fbb2 f6f3 	udiv	r6, r2, r3
 80041fc:	d32e      	bcc.n	800425c <quorem+0x96>
 80041fe:	f04f 0a00 	mov.w	sl, #0
 8004202:	46c4      	mov	ip, r8
 8004204:	46ae      	mov	lr, r5
 8004206:	46d3      	mov	fp, sl
 8004208:	f85c 3b04 	ldr.w	r3, [ip], #4
 800420c:	b298      	uxth	r0, r3
 800420e:	fb06 a000 	mla	r0, r6, r0, sl
 8004212:	0c02      	lsrs	r2, r0, #16
 8004214:	0c1b      	lsrs	r3, r3, #16
 8004216:	fb06 2303 	mla	r3, r6, r3, r2
 800421a:	f8de 2000 	ldr.w	r2, [lr]
 800421e:	b280      	uxth	r0, r0
 8004220:	b292      	uxth	r2, r2
 8004222:	1a12      	subs	r2, r2, r0
 8004224:	445a      	add	r2, fp
 8004226:	f8de 0000 	ldr.w	r0, [lr]
 800422a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800422e:	b29b      	uxth	r3, r3
 8004230:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8004234:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8004238:	b292      	uxth	r2, r2
 800423a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800423e:	45e1      	cmp	r9, ip
 8004240:	f84e 2b04 	str.w	r2, [lr], #4
 8004244:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8004248:	d2de      	bcs.n	8004208 <quorem+0x42>
 800424a:	9b00      	ldr	r3, [sp, #0]
 800424c:	58eb      	ldr	r3, [r5, r3]
 800424e:	b92b      	cbnz	r3, 800425c <quorem+0x96>
 8004250:	9b01      	ldr	r3, [sp, #4]
 8004252:	3b04      	subs	r3, #4
 8004254:	429d      	cmp	r5, r3
 8004256:	461a      	mov	r2, r3
 8004258:	d32f      	bcc.n	80042ba <quorem+0xf4>
 800425a:	613c      	str	r4, [r7, #16]
 800425c:	4638      	mov	r0, r7
 800425e:	f001 f97d 	bl	800555c <__mcmp>
 8004262:	2800      	cmp	r0, #0
 8004264:	db25      	blt.n	80042b2 <quorem+0xec>
 8004266:	4629      	mov	r1, r5
 8004268:	2000      	movs	r0, #0
 800426a:	f858 2b04 	ldr.w	r2, [r8], #4
 800426e:	f8d1 c000 	ldr.w	ip, [r1]
 8004272:	fa1f fe82 	uxth.w	lr, r2
 8004276:	fa1f f38c 	uxth.w	r3, ip
 800427a:	eba3 030e 	sub.w	r3, r3, lr
 800427e:	4403      	add	r3, r0
 8004280:	0c12      	lsrs	r2, r2, #16
 8004282:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8004286:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800428a:	b29b      	uxth	r3, r3
 800428c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004290:	45c1      	cmp	r9, r8
 8004292:	f841 3b04 	str.w	r3, [r1], #4
 8004296:	ea4f 4022 	mov.w	r0, r2, asr #16
 800429a:	d2e6      	bcs.n	800426a <quorem+0xa4>
 800429c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80042a0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80042a4:	b922      	cbnz	r2, 80042b0 <quorem+0xea>
 80042a6:	3b04      	subs	r3, #4
 80042a8:	429d      	cmp	r5, r3
 80042aa:	461a      	mov	r2, r3
 80042ac:	d30b      	bcc.n	80042c6 <quorem+0x100>
 80042ae:	613c      	str	r4, [r7, #16]
 80042b0:	3601      	adds	r6, #1
 80042b2:	4630      	mov	r0, r6
 80042b4:	b003      	add	sp, #12
 80042b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80042ba:	6812      	ldr	r2, [r2, #0]
 80042bc:	3b04      	subs	r3, #4
 80042be:	2a00      	cmp	r2, #0
 80042c0:	d1cb      	bne.n	800425a <quorem+0x94>
 80042c2:	3c01      	subs	r4, #1
 80042c4:	e7c6      	b.n	8004254 <quorem+0x8e>
 80042c6:	6812      	ldr	r2, [r2, #0]
 80042c8:	3b04      	subs	r3, #4
 80042ca:	2a00      	cmp	r2, #0
 80042cc:	d1ef      	bne.n	80042ae <quorem+0xe8>
 80042ce:	3c01      	subs	r4, #1
 80042d0:	e7ea      	b.n	80042a8 <quorem+0xe2>
 80042d2:	2000      	movs	r0, #0
 80042d4:	e7ee      	b.n	80042b4 <quorem+0xee>
	...

080042d8 <_dtoa_r>:
 80042d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042dc:	69c7      	ldr	r7, [r0, #28]
 80042de:	b097      	sub	sp, #92	@ 0x5c
 80042e0:	ed8d 0b04 	vstr	d0, [sp, #16]
 80042e4:	ec55 4b10 	vmov	r4, r5, d0
 80042e8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80042ea:	9107      	str	r1, [sp, #28]
 80042ec:	4681      	mov	r9, r0
 80042ee:	920c      	str	r2, [sp, #48]	@ 0x30
 80042f0:	9311      	str	r3, [sp, #68]	@ 0x44
 80042f2:	b97f      	cbnz	r7, 8004314 <_dtoa_r+0x3c>
 80042f4:	2010      	movs	r0, #16
 80042f6:	f000 fe09 	bl	8004f0c <malloc>
 80042fa:	4602      	mov	r2, r0
 80042fc:	f8c9 001c 	str.w	r0, [r9, #28]
 8004300:	b920      	cbnz	r0, 800430c <_dtoa_r+0x34>
 8004302:	4ba9      	ldr	r3, [pc, #676]	@ (80045a8 <_dtoa_r+0x2d0>)
 8004304:	21ef      	movs	r1, #239	@ 0xef
 8004306:	48a9      	ldr	r0, [pc, #676]	@ (80045ac <_dtoa_r+0x2d4>)
 8004308:	f001 fafa 	bl	8005900 <__assert_func>
 800430c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8004310:	6007      	str	r7, [r0, #0]
 8004312:	60c7      	str	r7, [r0, #12]
 8004314:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8004318:	6819      	ldr	r1, [r3, #0]
 800431a:	b159      	cbz	r1, 8004334 <_dtoa_r+0x5c>
 800431c:	685a      	ldr	r2, [r3, #4]
 800431e:	604a      	str	r2, [r1, #4]
 8004320:	2301      	movs	r3, #1
 8004322:	4093      	lsls	r3, r2
 8004324:	608b      	str	r3, [r1, #8]
 8004326:	4648      	mov	r0, r9
 8004328:	f000 fee6 	bl	80050f8 <_Bfree>
 800432c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8004330:	2200      	movs	r2, #0
 8004332:	601a      	str	r2, [r3, #0]
 8004334:	1e2b      	subs	r3, r5, #0
 8004336:	bfb9      	ittee	lt
 8004338:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800433c:	9305      	strlt	r3, [sp, #20]
 800433e:	2300      	movge	r3, #0
 8004340:	6033      	strge	r3, [r6, #0]
 8004342:	9f05      	ldr	r7, [sp, #20]
 8004344:	4b9a      	ldr	r3, [pc, #616]	@ (80045b0 <_dtoa_r+0x2d8>)
 8004346:	bfbc      	itt	lt
 8004348:	2201      	movlt	r2, #1
 800434a:	6032      	strlt	r2, [r6, #0]
 800434c:	43bb      	bics	r3, r7
 800434e:	d112      	bne.n	8004376 <_dtoa_r+0x9e>
 8004350:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8004352:	f242 730f 	movw	r3, #9999	@ 0x270f
 8004356:	6013      	str	r3, [r2, #0]
 8004358:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800435c:	4323      	orrs	r3, r4
 800435e:	f000 855a 	beq.w	8004e16 <_dtoa_r+0xb3e>
 8004362:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004364:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 80045c4 <_dtoa_r+0x2ec>
 8004368:	2b00      	cmp	r3, #0
 800436a:	f000 855c 	beq.w	8004e26 <_dtoa_r+0xb4e>
 800436e:	f10a 0303 	add.w	r3, sl, #3
 8004372:	f000 bd56 	b.w	8004e22 <_dtoa_r+0xb4a>
 8004376:	ed9d 7b04 	vldr	d7, [sp, #16]
 800437a:	2200      	movs	r2, #0
 800437c:	ec51 0b17 	vmov	r0, r1, d7
 8004380:	2300      	movs	r3, #0
 8004382:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8004386:	f7fc fb9f 	bl	8000ac8 <__aeabi_dcmpeq>
 800438a:	4680      	mov	r8, r0
 800438c:	b158      	cbz	r0, 80043a6 <_dtoa_r+0xce>
 800438e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8004390:	2301      	movs	r3, #1
 8004392:	6013      	str	r3, [r2, #0]
 8004394:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004396:	b113      	cbz	r3, 800439e <_dtoa_r+0xc6>
 8004398:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800439a:	4b86      	ldr	r3, [pc, #536]	@ (80045b4 <_dtoa_r+0x2dc>)
 800439c:	6013      	str	r3, [r2, #0]
 800439e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 80045c8 <_dtoa_r+0x2f0>
 80043a2:	f000 bd40 	b.w	8004e26 <_dtoa_r+0xb4e>
 80043a6:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 80043aa:	aa14      	add	r2, sp, #80	@ 0x50
 80043ac:	a915      	add	r1, sp, #84	@ 0x54
 80043ae:	4648      	mov	r0, r9
 80043b0:	f001 f984 	bl	80056bc <__d2b>
 80043b4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80043b8:	9002      	str	r0, [sp, #8]
 80043ba:	2e00      	cmp	r6, #0
 80043bc:	d078      	beq.n	80044b0 <_dtoa_r+0x1d8>
 80043be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80043c0:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 80043c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80043c8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80043cc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80043d0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80043d4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80043d8:	4619      	mov	r1, r3
 80043da:	2200      	movs	r2, #0
 80043dc:	4b76      	ldr	r3, [pc, #472]	@ (80045b8 <_dtoa_r+0x2e0>)
 80043de:	f7fb ff53 	bl	8000288 <__aeabi_dsub>
 80043e2:	a36b      	add	r3, pc, #428	@ (adr r3, 8004590 <_dtoa_r+0x2b8>)
 80043e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043e8:	f7fc f906 	bl	80005f8 <__aeabi_dmul>
 80043ec:	a36a      	add	r3, pc, #424	@ (adr r3, 8004598 <_dtoa_r+0x2c0>)
 80043ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043f2:	f7fb ff4b 	bl	800028c <__adddf3>
 80043f6:	4604      	mov	r4, r0
 80043f8:	4630      	mov	r0, r6
 80043fa:	460d      	mov	r5, r1
 80043fc:	f7fc f892 	bl	8000524 <__aeabi_i2d>
 8004400:	a367      	add	r3, pc, #412	@ (adr r3, 80045a0 <_dtoa_r+0x2c8>)
 8004402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004406:	f7fc f8f7 	bl	80005f8 <__aeabi_dmul>
 800440a:	4602      	mov	r2, r0
 800440c:	460b      	mov	r3, r1
 800440e:	4620      	mov	r0, r4
 8004410:	4629      	mov	r1, r5
 8004412:	f7fb ff3b 	bl	800028c <__adddf3>
 8004416:	4604      	mov	r4, r0
 8004418:	460d      	mov	r5, r1
 800441a:	f7fc fb9d 	bl	8000b58 <__aeabi_d2iz>
 800441e:	2200      	movs	r2, #0
 8004420:	4607      	mov	r7, r0
 8004422:	2300      	movs	r3, #0
 8004424:	4620      	mov	r0, r4
 8004426:	4629      	mov	r1, r5
 8004428:	f7fc fb58 	bl	8000adc <__aeabi_dcmplt>
 800442c:	b140      	cbz	r0, 8004440 <_dtoa_r+0x168>
 800442e:	4638      	mov	r0, r7
 8004430:	f7fc f878 	bl	8000524 <__aeabi_i2d>
 8004434:	4622      	mov	r2, r4
 8004436:	462b      	mov	r3, r5
 8004438:	f7fc fb46 	bl	8000ac8 <__aeabi_dcmpeq>
 800443c:	b900      	cbnz	r0, 8004440 <_dtoa_r+0x168>
 800443e:	3f01      	subs	r7, #1
 8004440:	2f16      	cmp	r7, #22
 8004442:	d852      	bhi.n	80044ea <_dtoa_r+0x212>
 8004444:	4b5d      	ldr	r3, [pc, #372]	@ (80045bc <_dtoa_r+0x2e4>)
 8004446:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800444a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800444e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004452:	f7fc fb43 	bl	8000adc <__aeabi_dcmplt>
 8004456:	2800      	cmp	r0, #0
 8004458:	d049      	beq.n	80044ee <_dtoa_r+0x216>
 800445a:	3f01      	subs	r7, #1
 800445c:	2300      	movs	r3, #0
 800445e:	9310      	str	r3, [sp, #64]	@ 0x40
 8004460:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004462:	1b9b      	subs	r3, r3, r6
 8004464:	1e5a      	subs	r2, r3, #1
 8004466:	bf45      	ittet	mi
 8004468:	f1c3 0301 	rsbmi	r3, r3, #1
 800446c:	9300      	strmi	r3, [sp, #0]
 800446e:	2300      	movpl	r3, #0
 8004470:	2300      	movmi	r3, #0
 8004472:	9206      	str	r2, [sp, #24]
 8004474:	bf54      	ite	pl
 8004476:	9300      	strpl	r3, [sp, #0]
 8004478:	9306      	strmi	r3, [sp, #24]
 800447a:	2f00      	cmp	r7, #0
 800447c:	db39      	blt.n	80044f2 <_dtoa_r+0x21a>
 800447e:	9b06      	ldr	r3, [sp, #24]
 8004480:	970d      	str	r7, [sp, #52]	@ 0x34
 8004482:	443b      	add	r3, r7
 8004484:	9306      	str	r3, [sp, #24]
 8004486:	2300      	movs	r3, #0
 8004488:	9308      	str	r3, [sp, #32]
 800448a:	9b07      	ldr	r3, [sp, #28]
 800448c:	2b09      	cmp	r3, #9
 800448e:	d863      	bhi.n	8004558 <_dtoa_r+0x280>
 8004490:	2b05      	cmp	r3, #5
 8004492:	bfc4      	itt	gt
 8004494:	3b04      	subgt	r3, #4
 8004496:	9307      	strgt	r3, [sp, #28]
 8004498:	9b07      	ldr	r3, [sp, #28]
 800449a:	f1a3 0302 	sub.w	r3, r3, #2
 800449e:	bfcc      	ite	gt
 80044a0:	2400      	movgt	r4, #0
 80044a2:	2401      	movle	r4, #1
 80044a4:	2b03      	cmp	r3, #3
 80044a6:	d863      	bhi.n	8004570 <_dtoa_r+0x298>
 80044a8:	e8df f003 	tbb	[pc, r3]
 80044ac:	2b375452 	.word	0x2b375452
 80044b0:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80044b4:	441e      	add	r6, r3
 80044b6:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80044ba:	2b20      	cmp	r3, #32
 80044bc:	bfc1      	itttt	gt
 80044be:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80044c2:	409f      	lslgt	r7, r3
 80044c4:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80044c8:	fa24 f303 	lsrgt.w	r3, r4, r3
 80044cc:	bfd6      	itet	le
 80044ce:	f1c3 0320 	rsble	r3, r3, #32
 80044d2:	ea47 0003 	orrgt.w	r0, r7, r3
 80044d6:	fa04 f003 	lslle.w	r0, r4, r3
 80044da:	f7fc f813 	bl	8000504 <__aeabi_ui2d>
 80044de:	2201      	movs	r2, #1
 80044e0:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80044e4:	3e01      	subs	r6, #1
 80044e6:	9212      	str	r2, [sp, #72]	@ 0x48
 80044e8:	e776      	b.n	80043d8 <_dtoa_r+0x100>
 80044ea:	2301      	movs	r3, #1
 80044ec:	e7b7      	b.n	800445e <_dtoa_r+0x186>
 80044ee:	9010      	str	r0, [sp, #64]	@ 0x40
 80044f0:	e7b6      	b.n	8004460 <_dtoa_r+0x188>
 80044f2:	9b00      	ldr	r3, [sp, #0]
 80044f4:	1bdb      	subs	r3, r3, r7
 80044f6:	9300      	str	r3, [sp, #0]
 80044f8:	427b      	negs	r3, r7
 80044fa:	9308      	str	r3, [sp, #32]
 80044fc:	2300      	movs	r3, #0
 80044fe:	930d      	str	r3, [sp, #52]	@ 0x34
 8004500:	e7c3      	b.n	800448a <_dtoa_r+0x1b2>
 8004502:	2301      	movs	r3, #1
 8004504:	9309      	str	r3, [sp, #36]	@ 0x24
 8004506:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8004508:	eb07 0b03 	add.w	fp, r7, r3
 800450c:	f10b 0301 	add.w	r3, fp, #1
 8004510:	2b01      	cmp	r3, #1
 8004512:	9303      	str	r3, [sp, #12]
 8004514:	bfb8      	it	lt
 8004516:	2301      	movlt	r3, #1
 8004518:	e006      	b.n	8004528 <_dtoa_r+0x250>
 800451a:	2301      	movs	r3, #1
 800451c:	9309      	str	r3, [sp, #36]	@ 0x24
 800451e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8004520:	2b00      	cmp	r3, #0
 8004522:	dd28      	ble.n	8004576 <_dtoa_r+0x29e>
 8004524:	469b      	mov	fp, r3
 8004526:	9303      	str	r3, [sp, #12]
 8004528:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800452c:	2100      	movs	r1, #0
 800452e:	2204      	movs	r2, #4
 8004530:	f102 0514 	add.w	r5, r2, #20
 8004534:	429d      	cmp	r5, r3
 8004536:	d926      	bls.n	8004586 <_dtoa_r+0x2ae>
 8004538:	6041      	str	r1, [r0, #4]
 800453a:	4648      	mov	r0, r9
 800453c:	f000 fd9c 	bl	8005078 <_Balloc>
 8004540:	4682      	mov	sl, r0
 8004542:	2800      	cmp	r0, #0
 8004544:	d142      	bne.n	80045cc <_dtoa_r+0x2f4>
 8004546:	4b1e      	ldr	r3, [pc, #120]	@ (80045c0 <_dtoa_r+0x2e8>)
 8004548:	4602      	mov	r2, r0
 800454a:	f240 11af 	movw	r1, #431	@ 0x1af
 800454e:	e6da      	b.n	8004306 <_dtoa_r+0x2e>
 8004550:	2300      	movs	r3, #0
 8004552:	e7e3      	b.n	800451c <_dtoa_r+0x244>
 8004554:	2300      	movs	r3, #0
 8004556:	e7d5      	b.n	8004504 <_dtoa_r+0x22c>
 8004558:	2401      	movs	r4, #1
 800455a:	2300      	movs	r3, #0
 800455c:	9307      	str	r3, [sp, #28]
 800455e:	9409      	str	r4, [sp, #36]	@ 0x24
 8004560:	f04f 3bff 	mov.w	fp, #4294967295
 8004564:	2200      	movs	r2, #0
 8004566:	f8cd b00c 	str.w	fp, [sp, #12]
 800456a:	2312      	movs	r3, #18
 800456c:	920c      	str	r2, [sp, #48]	@ 0x30
 800456e:	e7db      	b.n	8004528 <_dtoa_r+0x250>
 8004570:	2301      	movs	r3, #1
 8004572:	9309      	str	r3, [sp, #36]	@ 0x24
 8004574:	e7f4      	b.n	8004560 <_dtoa_r+0x288>
 8004576:	f04f 0b01 	mov.w	fp, #1
 800457a:	f8cd b00c 	str.w	fp, [sp, #12]
 800457e:	465b      	mov	r3, fp
 8004580:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8004584:	e7d0      	b.n	8004528 <_dtoa_r+0x250>
 8004586:	3101      	adds	r1, #1
 8004588:	0052      	lsls	r2, r2, #1
 800458a:	e7d1      	b.n	8004530 <_dtoa_r+0x258>
 800458c:	f3af 8000 	nop.w
 8004590:	636f4361 	.word	0x636f4361
 8004594:	3fd287a7 	.word	0x3fd287a7
 8004598:	8b60c8b3 	.word	0x8b60c8b3
 800459c:	3fc68a28 	.word	0x3fc68a28
 80045a0:	509f79fb 	.word	0x509f79fb
 80045a4:	3fd34413 	.word	0x3fd34413
 80045a8:	08005f99 	.word	0x08005f99
 80045ac:	08005fb0 	.word	0x08005fb0
 80045b0:	7ff00000 	.word	0x7ff00000
 80045b4:	08005f69 	.word	0x08005f69
 80045b8:	3ff80000 	.word	0x3ff80000
 80045bc:	08006100 	.word	0x08006100
 80045c0:	08006008 	.word	0x08006008
 80045c4:	08005f95 	.word	0x08005f95
 80045c8:	08005f68 	.word	0x08005f68
 80045cc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80045d0:	6018      	str	r0, [r3, #0]
 80045d2:	9b03      	ldr	r3, [sp, #12]
 80045d4:	2b0e      	cmp	r3, #14
 80045d6:	f200 80a1 	bhi.w	800471c <_dtoa_r+0x444>
 80045da:	2c00      	cmp	r4, #0
 80045dc:	f000 809e 	beq.w	800471c <_dtoa_r+0x444>
 80045e0:	2f00      	cmp	r7, #0
 80045e2:	dd33      	ble.n	800464c <_dtoa_r+0x374>
 80045e4:	4b9c      	ldr	r3, [pc, #624]	@ (8004858 <_dtoa_r+0x580>)
 80045e6:	f007 020f 	and.w	r2, r7, #15
 80045ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80045ee:	ed93 7b00 	vldr	d7, [r3]
 80045f2:	05f8      	lsls	r0, r7, #23
 80045f4:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 80045f8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80045fc:	d516      	bpl.n	800462c <_dtoa_r+0x354>
 80045fe:	4b97      	ldr	r3, [pc, #604]	@ (800485c <_dtoa_r+0x584>)
 8004600:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004604:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004608:	f7fc f920 	bl	800084c <__aeabi_ddiv>
 800460c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004610:	f004 040f 	and.w	r4, r4, #15
 8004614:	2603      	movs	r6, #3
 8004616:	4d91      	ldr	r5, [pc, #580]	@ (800485c <_dtoa_r+0x584>)
 8004618:	b954      	cbnz	r4, 8004630 <_dtoa_r+0x358>
 800461a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800461e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004622:	f7fc f913 	bl	800084c <__aeabi_ddiv>
 8004626:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800462a:	e028      	b.n	800467e <_dtoa_r+0x3a6>
 800462c:	2602      	movs	r6, #2
 800462e:	e7f2      	b.n	8004616 <_dtoa_r+0x33e>
 8004630:	07e1      	lsls	r1, r4, #31
 8004632:	d508      	bpl.n	8004646 <_dtoa_r+0x36e>
 8004634:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8004638:	e9d5 2300 	ldrd	r2, r3, [r5]
 800463c:	f7fb ffdc 	bl	80005f8 <__aeabi_dmul>
 8004640:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8004644:	3601      	adds	r6, #1
 8004646:	1064      	asrs	r4, r4, #1
 8004648:	3508      	adds	r5, #8
 800464a:	e7e5      	b.n	8004618 <_dtoa_r+0x340>
 800464c:	f000 80af 	beq.w	80047ae <_dtoa_r+0x4d6>
 8004650:	427c      	negs	r4, r7
 8004652:	4b81      	ldr	r3, [pc, #516]	@ (8004858 <_dtoa_r+0x580>)
 8004654:	4d81      	ldr	r5, [pc, #516]	@ (800485c <_dtoa_r+0x584>)
 8004656:	f004 020f 	and.w	r2, r4, #15
 800465a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800465e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004662:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004666:	f7fb ffc7 	bl	80005f8 <__aeabi_dmul>
 800466a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800466e:	1124      	asrs	r4, r4, #4
 8004670:	2300      	movs	r3, #0
 8004672:	2602      	movs	r6, #2
 8004674:	2c00      	cmp	r4, #0
 8004676:	f040 808f 	bne.w	8004798 <_dtoa_r+0x4c0>
 800467a:	2b00      	cmp	r3, #0
 800467c:	d1d3      	bne.n	8004626 <_dtoa_r+0x34e>
 800467e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8004680:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8004684:	2b00      	cmp	r3, #0
 8004686:	f000 8094 	beq.w	80047b2 <_dtoa_r+0x4da>
 800468a:	4b75      	ldr	r3, [pc, #468]	@ (8004860 <_dtoa_r+0x588>)
 800468c:	2200      	movs	r2, #0
 800468e:	4620      	mov	r0, r4
 8004690:	4629      	mov	r1, r5
 8004692:	f7fc fa23 	bl	8000adc <__aeabi_dcmplt>
 8004696:	2800      	cmp	r0, #0
 8004698:	f000 808b 	beq.w	80047b2 <_dtoa_r+0x4da>
 800469c:	9b03      	ldr	r3, [sp, #12]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	f000 8087 	beq.w	80047b2 <_dtoa_r+0x4da>
 80046a4:	f1bb 0f00 	cmp.w	fp, #0
 80046a8:	dd34      	ble.n	8004714 <_dtoa_r+0x43c>
 80046aa:	4620      	mov	r0, r4
 80046ac:	4b6d      	ldr	r3, [pc, #436]	@ (8004864 <_dtoa_r+0x58c>)
 80046ae:	2200      	movs	r2, #0
 80046b0:	4629      	mov	r1, r5
 80046b2:	f7fb ffa1 	bl	80005f8 <__aeabi_dmul>
 80046b6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80046ba:	f107 38ff 	add.w	r8, r7, #4294967295
 80046be:	3601      	adds	r6, #1
 80046c0:	465c      	mov	r4, fp
 80046c2:	4630      	mov	r0, r6
 80046c4:	f7fb ff2e 	bl	8000524 <__aeabi_i2d>
 80046c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80046cc:	f7fb ff94 	bl	80005f8 <__aeabi_dmul>
 80046d0:	4b65      	ldr	r3, [pc, #404]	@ (8004868 <_dtoa_r+0x590>)
 80046d2:	2200      	movs	r2, #0
 80046d4:	f7fb fdda 	bl	800028c <__adddf3>
 80046d8:	4605      	mov	r5, r0
 80046da:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80046de:	2c00      	cmp	r4, #0
 80046e0:	d16a      	bne.n	80047b8 <_dtoa_r+0x4e0>
 80046e2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80046e6:	4b61      	ldr	r3, [pc, #388]	@ (800486c <_dtoa_r+0x594>)
 80046e8:	2200      	movs	r2, #0
 80046ea:	f7fb fdcd 	bl	8000288 <__aeabi_dsub>
 80046ee:	4602      	mov	r2, r0
 80046f0:	460b      	mov	r3, r1
 80046f2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80046f6:	462a      	mov	r2, r5
 80046f8:	4633      	mov	r3, r6
 80046fa:	f7fc fa0d 	bl	8000b18 <__aeabi_dcmpgt>
 80046fe:	2800      	cmp	r0, #0
 8004700:	f040 8298 	bne.w	8004c34 <_dtoa_r+0x95c>
 8004704:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004708:	462a      	mov	r2, r5
 800470a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800470e:	f7fc f9e5 	bl	8000adc <__aeabi_dcmplt>
 8004712:	bb38      	cbnz	r0, 8004764 <_dtoa_r+0x48c>
 8004714:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8004718:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800471c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800471e:	2b00      	cmp	r3, #0
 8004720:	f2c0 8157 	blt.w	80049d2 <_dtoa_r+0x6fa>
 8004724:	2f0e      	cmp	r7, #14
 8004726:	f300 8154 	bgt.w	80049d2 <_dtoa_r+0x6fa>
 800472a:	4b4b      	ldr	r3, [pc, #300]	@ (8004858 <_dtoa_r+0x580>)
 800472c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004730:	ed93 7b00 	vldr	d7, [r3]
 8004734:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8004736:	2b00      	cmp	r3, #0
 8004738:	ed8d 7b00 	vstr	d7, [sp]
 800473c:	f280 80e5 	bge.w	800490a <_dtoa_r+0x632>
 8004740:	9b03      	ldr	r3, [sp, #12]
 8004742:	2b00      	cmp	r3, #0
 8004744:	f300 80e1 	bgt.w	800490a <_dtoa_r+0x632>
 8004748:	d10c      	bne.n	8004764 <_dtoa_r+0x48c>
 800474a:	4b48      	ldr	r3, [pc, #288]	@ (800486c <_dtoa_r+0x594>)
 800474c:	2200      	movs	r2, #0
 800474e:	ec51 0b17 	vmov	r0, r1, d7
 8004752:	f7fb ff51 	bl	80005f8 <__aeabi_dmul>
 8004756:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800475a:	f7fc f9d3 	bl	8000b04 <__aeabi_dcmpge>
 800475e:	2800      	cmp	r0, #0
 8004760:	f000 8266 	beq.w	8004c30 <_dtoa_r+0x958>
 8004764:	2400      	movs	r4, #0
 8004766:	4625      	mov	r5, r4
 8004768:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800476a:	4656      	mov	r6, sl
 800476c:	ea6f 0803 	mvn.w	r8, r3
 8004770:	2700      	movs	r7, #0
 8004772:	4621      	mov	r1, r4
 8004774:	4648      	mov	r0, r9
 8004776:	f000 fcbf 	bl	80050f8 <_Bfree>
 800477a:	2d00      	cmp	r5, #0
 800477c:	f000 80bd 	beq.w	80048fa <_dtoa_r+0x622>
 8004780:	b12f      	cbz	r7, 800478e <_dtoa_r+0x4b6>
 8004782:	42af      	cmp	r7, r5
 8004784:	d003      	beq.n	800478e <_dtoa_r+0x4b6>
 8004786:	4639      	mov	r1, r7
 8004788:	4648      	mov	r0, r9
 800478a:	f000 fcb5 	bl	80050f8 <_Bfree>
 800478e:	4629      	mov	r1, r5
 8004790:	4648      	mov	r0, r9
 8004792:	f000 fcb1 	bl	80050f8 <_Bfree>
 8004796:	e0b0      	b.n	80048fa <_dtoa_r+0x622>
 8004798:	07e2      	lsls	r2, r4, #31
 800479a:	d505      	bpl.n	80047a8 <_dtoa_r+0x4d0>
 800479c:	e9d5 2300 	ldrd	r2, r3, [r5]
 80047a0:	f7fb ff2a 	bl	80005f8 <__aeabi_dmul>
 80047a4:	3601      	adds	r6, #1
 80047a6:	2301      	movs	r3, #1
 80047a8:	1064      	asrs	r4, r4, #1
 80047aa:	3508      	adds	r5, #8
 80047ac:	e762      	b.n	8004674 <_dtoa_r+0x39c>
 80047ae:	2602      	movs	r6, #2
 80047b0:	e765      	b.n	800467e <_dtoa_r+0x3a6>
 80047b2:	9c03      	ldr	r4, [sp, #12]
 80047b4:	46b8      	mov	r8, r7
 80047b6:	e784      	b.n	80046c2 <_dtoa_r+0x3ea>
 80047b8:	4b27      	ldr	r3, [pc, #156]	@ (8004858 <_dtoa_r+0x580>)
 80047ba:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80047bc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80047c0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80047c4:	4454      	add	r4, sl
 80047c6:	2900      	cmp	r1, #0
 80047c8:	d054      	beq.n	8004874 <_dtoa_r+0x59c>
 80047ca:	4929      	ldr	r1, [pc, #164]	@ (8004870 <_dtoa_r+0x598>)
 80047cc:	2000      	movs	r0, #0
 80047ce:	f7fc f83d 	bl	800084c <__aeabi_ddiv>
 80047d2:	4633      	mov	r3, r6
 80047d4:	462a      	mov	r2, r5
 80047d6:	f7fb fd57 	bl	8000288 <__aeabi_dsub>
 80047da:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80047de:	4656      	mov	r6, sl
 80047e0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80047e4:	f7fc f9b8 	bl	8000b58 <__aeabi_d2iz>
 80047e8:	4605      	mov	r5, r0
 80047ea:	f7fb fe9b 	bl	8000524 <__aeabi_i2d>
 80047ee:	4602      	mov	r2, r0
 80047f0:	460b      	mov	r3, r1
 80047f2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80047f6:	f7fb fd47 	bl	8000288 <__aeabi_dsub>
 80047fa:	3530      	adds	r5, #48	@ 0x30
 80047fc:	4602      	mov	r2, r0
 80047fe:	460b      	mov	r3, r1
 8004800:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004804:	f806 5b01 	strb.w	r5, [r6], #1
 8004808:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800480c:	f7fc f966 	bl	8000adc <__aeabi_dcmplt>
 8004810:	2800      	cmp	r0, #0
 8004812:	d172      	bne.n	80048fa <_dtoa_r+0x622>
 8004814:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004818:	4911      	ldr	r1, [pc, #68]	@ (8004860 <_dtoa_r+0x588>)
 800481a:	2000      	movs	r0, #0
 800481c:	f7fb fd34 	bl	8000288 <__aeabi_dsub>
 8004820:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8004824:	f7fc f95a 	bl	8000adc <__aeabi_dcmplt>
 8004828:	2800      	cmp	r0, #0
 800482a:	f040 80b4 	bne.w	8004996 <_dtoa_r+0x6be>
 800482e:	42a6      	cmp	r6, r4
 8004830:	f43f af70 	beq.w	8004714 <_dtoa_r+0x43c>
 8004834:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8004838:	4b0a      	ldr	r3, [pc, #40]	@ (8004864 <_dtoa_r+0x58c>)
 800483a:	2200      	movs	r2, #0
 800483c:	f7fb fedc 	bl	80005f8 <__aeabi_dmul>
 8004840:	4b08      	ldr	r3, [pc, #32]	@ (8004864 <_dtoa_r+0x58c>)
 8004842:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8004846:	2200      	movs	r2, #0
 8004848:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800484c:	f7fb fed4 	bl	80005f8 <__aeabi_dmul>
 8004850:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004854:	e7c4      	b.n	80047e0 <_dtoa_r+0x508>
 8004856:	bf00      	nop
 8004858:	08006100 	.word	0x08006100
 800485c:	080060d8 	.word	0x080060d8
 8004860:	3ff00000 	.word	0x3ff00000
 8004864:	40240000 	.word	0x40240000
 8004868:	401c0000 	.word	0x401c0000
 800486c:	40140000 	.word	0x40140000
 8004870:	3fe00000 	.word	0x3fe00000
 8004874:	4631      	mov	r1, r6
 8004876:	4628      	mov	r0, r5
 8004878:	f7fb febe 	bl	80005f8 <__aeabi_dmul>
 800487c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8004880:	9413      	str	r4, [sp, #76]	@ 0x4c
 8004882:	4656      	mov	r6, sl
 8004884:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004888:	f7fc f966 	bl	8000b58 <__aeabi_d2iz>
 800488c:	4605      	mov	r5, r0
 800488e:	f7fb fe49 	bl	8000524 <__aeabi_i2d>
 8004892:	4602      	mov	r2, r0
 8004894:	460b      	mov	r3, r1
 8004896:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800489a:	f7fb fcf5 	bl	8000288 <__aeabi_dsub>
 800489e:	3530      	adds	r5, #48	@ 0x30
 80048a0:	f806 5b01 	strb.w	r5, [r6], #1
 80048a4:	4602      	mov	r2, r0
 80048a6:	460b      	mov	r3, r1
 80048a8:	42a6      	cmp	r6, r4
 80048aa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80048ae:	f04f 0200 	mov.w	r2, #0
 80048b2:	d124      	bne.n	80048fe <_dtoa_r+0x626>
 80048b4:	4baf      	ldr	r3, [pc, #700]	@ (8004b74 <_dtoa_r+0x89c>)
 80048b6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80048ba:	f7fb fce7 	bl	800028c <__adddf3>
 80048be:	4602      	mov	r2, r0
 80048c0:	460b      	mov	r3, r1
 80048c2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80048c6:	f7fc f927 	bl	8000b18 <__aeabi_dcmpgt>
 80048ca:	2800      	cmp	r0, #0
 80048cc:	d163      	bne.n	8004996 <_dtoa_r+0x6be>
 80048ce:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80048d2:	49a8      	ldr	r1, [pc, #672]	@ (8004b74 <_dtoa_r+0x89c>)
 80048d4:	2000      	movs	r0, #0
 80048d6:	f7fb fcd7 	bl	8000288 <__aeabi_dsub>
 80048da:	4602      	mov	r2, r0
 80048dc:	460b      	mov	r3, r1
 80048de:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80048e2:	f7fc f8fb 	bl	8000adc <__aeabi_dcmplt>
 80048e6:	2800      	cmp	r0, #0
 80048e8:	f43f af14 	beq.w	8004714 <_dtoa_r+0x43c>
 80048ec:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80048ee:	1e73      	subs	r3, r6, #1
 80048f0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80048f2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80048f6:	2b30      	cmp	r3, #48	@ 0x30
 80048f8:	d0f8      	beq.n	80048ec <_dtoa_r+0x614>
 80048fa:	4647      	mov	r7, r8
 80048fc:	e03b      	b.n	8004976 <_dtoa_r+0x69e>
 80048fe:	4b9e      	ldr	r3, [pc, #632]	@ (8004b78 <_dtoa_r+0x8a0>)
 8004900:	f7fb fe7a 	bl	80005f8 <__aeabi_dmul>
 8004904:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004908:	e7bc      	b.n	8004884 <_dtoa_r+0x5ac>
 800490a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800490e:	4656      	mov	r6, sl
 8004910:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004914:	4620      	mov	r0, r4
 8004916:	4629      	mov	r1, r5
 8004918:	f7fb ff98 	bl	800084c <__aeabi_ddiv>
 800491c:	f7fc f91c 	bl	8000b58 <__aeabi_d2iz>
 8004920:	4680      	mov	r8, r0
 8004922:	f7fb fdff 	bl	8000524 <__aeabi_i2d>
 8004926:	e9dd 2300 	ldrd	r2, r3, [sp]
 800492a:	f7fb fe65 	bl	80005f8 <__aeabi_dmul>
 800492e:	4602      	mov	r2, r0
 8004930:	460b      	mov	r3, r1
 8004932:	4620      	mov	r0, r4
 8004934:	4629      	mov	r1, r5
 8004936:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800493a:	f7fb fca5 	bl	8000288 <__aeabi_dsub>
 800493e:	f806 4b01 	strb.w	r4, [r6], #1
 8004942:	9d03      	ldr	r5, [sp, #12]
 8004944:	eba6 040a 	sub.w	r4, r6, sl
 8004948:	42a5      	cmp	r5, r4
 800494a:	4602      	mov	r2, r0
 800494c:	460b      	mov	r3, r1
 800494e:	d133      	bne.n	80049b8 <_dtoa_r+0x6e0>
 8004950:	f7fb fc9c 	bl	800028c <__adddf3>
 8004954:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004958:	4604      	mov	r4, r0
 800495a:	460d      	mov	r5, r1
 800495c:	f7fc f8dc 	bl	8000b18 <__aeabi_dcmpgt>
 8004960:	b9c0      	cbnz	r0, 8004994 <_dtoa_r+0x6bc>
 8004962:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004966:	4620      	mov	r0, r4
 8004968:	4629      	mov	r1, r5
 800496a:	f7fc f8ad 	bl	8000ac8 <__aeabi_dcmpeq>
 800496e:	b110      	cbz	r0, 8004976 <_dtoa_r+0x69e>
 8004970:	f018 0f01 	tst.w	r8, #1
 8004974:	d10e      	bne.n	8004994 <_dtoa_r+0x6bc>
 8004976:	9902      	ldr	r1, [sp, #8]
 8004978:	4648      	mov	r0, r9
 800497a:	f000 fbbd 	bl	80050f8 <_Bfree>
 800497e:	2300      	movs	r3, #0
 8004980:	7033      	strb	r3, [r6, #0]
 8004982:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8004984:	3701      	adds	r7, #1
 8004986:	601f      	str	r7, [r3, #0]
 8004988:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800498a:	2b00      	cmp	r3, #0
 800498c:	f000 824b 	beq.w	8004e26 <_dtoa_r+0xb4e>
 8004990:	601e      	str	r6, [r3, #0]
 8004992:	e248      	b.n	8004e26 <_dtoa_r+0xb4e>
 8004994:	46b8      	mov	r8, r7
 8004996:	4633      	mov	r3, r6
 8004998:	461e      	mov	r6, r3
 800499a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800499e:	2a39      	cmp	r2, #57	@ 0x39
 80049a0:	d106      	bne.n	80049b0 <_dtoa_r+0x6d8>
 80049a2:	459a      	cmp	sl, r3
 80049a4:	d1f8      	bne.n	8004998 <_dtoa_r+0x6c0>
 80049a6:	2230      	movs	r2, #48	@ 0x30
 80049a8:	f108 0801 	add.w	r8, r8, #1
 80049ac:	f88a 2000 	strb.w	r2, [sl]
 80049b0:	781a      	ldrb	r2, [r3, #0]
 80049b2:	3201      	adds	r2, #1
 80049b4:	701a      	strb	r2, [r3, #0]
 80049b6:	e7a0      	b.n	80048fa <_dtoa_r+0x622>
 80049b8:	4b6f      	ldr	r3, [pc, #444]	@ (8004b78 <_dtoa_r+0x8a0>)
 80049ba:	2200      	movs	r2, #0
 80049bc:	f7fb fe1c 	bl	80005f8 <__aeabi_dmul>
 80049c0:	2200      	movs	r2, #0
 80049c2:	2300      	movs	r3, #0
 80049c4:	4604      	mov	r4, r0
 80049c6:	460d      	mov	r5, r1
 80049c8:	f7fc f87e 	bl	8000ac8 <__aeabi_dcmpeq>
 80049cc:	2800      	cmp	r0, #0
 80049ce:	d09f      	beq.n	8004910 <_dtoa_r+0x638>
 80049d0:	e7d1      	b.n	8004976 <_dtoa_r+0x69e>
 80049d2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80049d4:	2a00      	cmp	r2, #0
 80049d6:	f000 80ea 	beq.w	8004bae <_dtoa_r+0x8d6>
 80049da:	9a07      	ldr	r2, [sp, #28]
 80049dc:	2a01      	cmp	r2, #1
 80049de:	f300 80cd 	bgt.w	8004b7c <_dtoa_r+0x8a4>
 80049e2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80049e4:	2a00      	cmp	r2, #0
 80049e6:	f000 80c1 	beq.w	8004b6c <_dtoa_r+0x894>
 80049ea:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80049ee:	9c08      	ldr	r4, [sp, #32]
 80049f0:	9e00      	ldr	r6, [sp, #0]
 80049f2:	9a00      	ldr	r2, [sp, #0]
 80049f4:	441a      	add	r2, r3
 80049f6:	9200      	str	r2, [sp, #0]
 80049f8:	9a06      	ldr	r2, [sp, #24]
 80049fa:	2101      	movs	r1, #1
 80049fc:	441a      	add	r2, r3
 80049fe:	4648      	mov	r0, r9
 8004a00:	9206      	str	r2, [sp, #24]
 8004a02:	f000 fc2d 	bl	8005260 <__i2b>
 8004a06:	4605      	mov	r5, r0
 8004a08:	b166      	cbz	r6, 8004a24 <_dtoa_r+0x74c>
 8004a0a:	9b06      	ldr	r3, [sp, #24]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	dd09      	ble.n	8004a24 <_dtoa_r+0x74c>
 8004a10:	42b3      	cmp	r3, r6
 8004a12:	9a00      	ldr	r2, [sp, #0]
 8004a14:	bfa8      	it	ge
 8004a16:	4633      	movge	r3, r6
 8004a18:	1ad2      	subs	r2, r2, r3
 8004a1a:	9200      	str	r2, [sp, #0]
 8004a1c:	9a06      	ldr	r2, [sp, #24]
 8004a1e:	1af6      	subs	r6, r6, r3
 8004a20:	1ad3      	subs	r3, r2, r3
 8004a22:	9306      	str	r3, [sp, #24]
 8004a24:	9b08      	ldr	r3, [sp, #32]
 8004a26:	b30b      	cbz	r3, 8004a6c <_dtoa_r+0x794>
 8004a28:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	f000 80c6 	beq.w	8004bbc <_dtoa_r+0x8e4>
 8004a30:	2c00      	cmp	r4, #0
 8004a32:	f000 80c0 	beq.w	8004bb6 <_dtoa_r+0x8de>
 8004a36:	4629      	mov	r1, r5
 8004a38:	4622      	mov	r2, r4
 8004a3a:	4648      	mov	r0, r9
 8004a3c:	f000 fcc8 	bl	80053d0 <__pow5mult>
 8004a40:	9a02      	ldr	r2, [sp, #8]
 8004a42:	4601      	mov	r1, r0
 8004a44:	4605      	mov	r5, r0
 8004a46:	4648      	mov	r0, r9
 8004a48:	f000 fc20 	bl	800528c <__multiply>
 8004a4c:	9902      	ldr	r1, [sp, #8]
 8004a4e:	4680      	mov	r8, r0
 8004a50:	4648      	mov	r0, r9
 8004a52:	f000 fb51 	bl	80050f8 <_Bfree>
 8004a56:	9b08      	ldr	r3, [sp, #32]
 8004a58:	1b1b      	subs	r3, r3, r4
 8004a5a:	9308      	str	r3, [sp, #32]
 8004a5c:	f000 80b1 	beq.w	8004bc2 <_dtoa_r+0x8ea>
 8004a60:	9a08      	ldr	r2, [sp, #32]
 8004a62:	4641      	mov	r1, r8
 8004a64:	4648      	mov	r0, r9
 8004a66:	f000 fcb3 	bl	80053d0 <__pow5mult>
 8004a6a:	9002      	str	r0, [sp, #8]
 8004a6c:	2101      	movs	r1, #1
 8004a6e:	4648      	mov	r0, r9
 8004a70:	f000 fbf6 	bl	8005260 <__i2b>
 8004a74:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004a76:	4604      	mov	r4, r0
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	f000 81d8 	beq.w	8004e2e <_dtoa_r+0xb56>
 8004a7e:	461a      	mov	r2, r3
 8004a80:	4601      	mov	r1, r0
 8004a82:	4648      	mov	r0, r9
 8004a84:	f000 fca4 	bl	80053d0 <__pow5mult>
 8004a88:	9b07      	ldr	r3, [sp, #28]
 8004a8a:	2b01      	cmp	r3, #1
 8004a8c:	4604      	mov	r4, r0
 8004a8e:	f300 809f 	bgt.w	8004bd0 <_dtoa_r+0x8f8>
 8004a92:	9b04      	ldr	r3, [sp, #16]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	f040 8097 	bne.w	8004bc8 <_dtoa_r+0x8f0>
 8004a9a:	9b05      	ldr	r3, [sp, #20]
 8004a9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	f040 8093 	bne.w	8004bcc <_dtoa_r+0x8f4>
 8004aa6:	9b05      	ldr	r3, [sp, #20]
 8004aa8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004aac:	0d1b      	lsrs	r3, r3, #20
 8004aae:	051b      	lsls	r3, r3, #20
 8004ab0:	b133      	cbz	r3, 8004ac0 <_dtoa_r+0x7e8>
 8004ab2:	9b00      	ldr	r3, [sp, #0]
 8004ab4:	3301      	adds	r3, #1
 8004ab6:	9300      	str	r3, [sp, #0]
 8004ab8:	9b06      	ldr	r3, [sp, #24]
 8004aba:	3301      	adds	r3, #1
 8004abc:	9306      	str	r3, [sp, #24]
 8004abe:	2301      	movs	r3, #1
 8004ac0:	9308      	str	r3, [sp, #32]
 8004ac2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	f000 81b8 	beq.w	8004e3a <_dtoa_r+0xb62>
 8004aca:	6923      	ldr	r3, [r4, #16]
 8004acc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004ad0:	6918      	ldr	r0, [r3, #16]
 8004ad2:	f000 fb79 	bl	80051c8 <__hi0bits>
 8004ad6:	f1c0 0020 	rsb	r0, r0, #32
 8004ada:	9b06      	ldr	r3, [sp, #24]
 8004adc:	4418      	add	r0, r3
 8004ade:	f010 001f 	ands.w	r0, r0, #31
 8004ae2:	f000 8082 	beq.w	8004bea <_dtoa_r+0x912>
 8004ae6:	f1c0 0320 	rsb	r3, r0, #32
 8004aea:	2b04      	cmp	r3, #4
 8004aec:	dd73      	ble.n	8004bd6 <_dtoa_r+0x8fe>
 8004aee:	9b00      	ldr	r3, [sp, #0]
 8004af0:	f1c0 001c 	rsb	r0, r0, #28
 8004af4:	4403      	add	r3, r0
 8004af6:	9300      	str	r3, [sp, #0]
 8004af8:	9b06      	ldr	r3, [sp, #24]
 8004afa:	4403      	add	r3, r0
 8004afc:	4406      	add	r6, r0
 8004afe:	9306      	str	r3, [sp, #24]
 8004b00:	9b00      	ldr	r3, [sp, #0]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	dd05      	ble.n	8004b12 <_dtoa_r+0x83a>
 8004b06:	9902      	ldr	r1, [sp, #8]
 8004b08:	461a      	mov	r2, r3
 8004b0a:	4648      	mov	r0, r9
 8004b0c:	f000 fcba 	bl	8005484 <__lshift>
 8004b10:	9002      	str	r0, [sp, #8]
 8004b12:	9b06      	ldr	r3, [sp, #24]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	dd05      	ble.n	8004b24 <_dtoa_r+0x84c>
 8004b18:	4621      	mov	r1, r4
 8004b1a:	461a      	mov	r2, r3
 8004b1c:	4648      	mov	r0, r9
 8004b1e:	f000 fcb1 	bl	8005484 <__lshift>
 8004b22:	4604      	mov	r4, r0
 8004b24:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d061      	beq.n	8004bee <_dtoa_r+0x916>
 8004b2a:	9802      	ldr	r0, [sp, #8]
 8004b2c:	4621      	mov	r1, r4
 8004b2e:	f000 fd15 	bl	800555c <__mcmp>
 8004b32:	2800      	cmp	r0, #0
 8004b34:	da5b      	bge.n	8004bee <_dtoa_r+0x916>
 8004b36:	2300      	movs	r3, #0
 8004b38:	9902      	ldr	r1, [sp, #8]
 8004b3a:	220a      	movs	r2, #10
 8004b3c:	4648      	mov	r0, r9
 8004b3e:	f000 fafd 	bl	800513c <__multadd>
 8004b42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004b44:	9002      	str	r0, [sp, #8]
 8004b46:	f107 38ff 	add.w	r8, r7, #4294967295
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	f000 8177 	beq.w	8004e3e <_dtoa_r+0xb66>
 8004b50:	4629      	mov	r1, r5
 8004b52:	2300      	movs	r3, #0
 8004b54:	220a      	movs	r2, #10
 8004b56:	4648      	mov	r0, r9
 8004b58:	f000 faf0 	bl	800513c <__multadd>
 8004b5c:	f1bb 0f00 	cmp.w	fp, #0
 8004b60:	4605      	mov	r5, r0
 8004b62:	dc6f      	bgt.n	8004c44 <_dtoa_r+0x96c>
 8004b64:	9b07      	ldr	r3, [sp, #28]
 8004b66:	2b02      	cmp	r3, #2
 8004b68:	dc49      	bgt.n	8004bfe <_dtoa_r+0x926>
 8004b6a:	e06b      	b.n	8004c44 <_dtoa_r+0x96c>
 8004b6c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004b6e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8004b72:	e73c      	b.n	80049ee <_dtoa_r+0x716>
 8004b74:	3fe00000 	.word	0x3fe00000
 8004b78:	40240000 	.word	0x40240000
 8004b7c:	9b03      	ldr	r3, [sp, #12]
 8004b7e:	1e5c      	subs	r4, r3, #1
 8004b80:	9b08      	ldr	r3, [sp, #32]
 8004b82:	42a3      	cmp	r3, r4
 8004b84:	db09      	blt.n	8004b9a <_dtoa_r+0x8c2>
 8004b86:	1b1c      	subs	r4, r3, r4
 8004b88:	9b03      	ldr	r3, [sp, #12]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	f6bf af30 	bge.w	80049f0 <_dtoa_r+0x718>
 8004b90:	9b00      	ldr	r3, [sp, #0]
 8004b92:	9a03      	ldr	r2, [sp, #12]
 8004b94:	1a9e      	subs	r6, r3, r2
 8004b96:	2300      	movs	r3, #0
 8004b98:	e72b      	b.n	80049f2 <_dtoa_r+0x71a>
 8004b9a:	9b08      	ldr	r3, [sp, #32]
 8004b9c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8004b9e:	9408      	str	r4, [sp, #32]
 8004ba0:	1ae3      	subs	r3, r4, r3
 8004ba2:	441a      	add	r2, r3
 8004ba4:	9e00      	ldr	r6, [sp, #0]
 8004ba6:	9b03      	ldr	r3, [sp, #12]
 8004ba8:	920d      	str	r2, [sp, #52]	@ 0x34
 8004baa:	2400      	movs	r4, #0
 8004bac:	e721      	b.n	80049f2 <_dtoa_r+0x71a>
 8004bae:	9c08      	ldr	r4, [sp, #32]
 8004bb0:	9e00      	ldr	r6, [sp, #0]
 8004bb2:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8004bb4:	e728      	b.n	8004a08 <_dtoa_r+0x730>
 8004bb6:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8004bba:	e751      	b.n	8004a60 <_dtoa_r+0x788>
 8004bbc:	9a08      	ldr	r2, [sp, #32]
 8004bbe:	9902      	ldr	r1, [sp, #8]
 8004bc0:	e750      	b.n	8004a64 <_dtoa_r+0x78c>
 8004bc2:	f8cd 8008 	str.w	r8, [sp, #8]
 8004bc6:	e751      	b.n	8004a6c <_dtoa_r+0x794>
 8004bc8:	2300      	movs	r3, #0
 8004bca:	e779      	b.n	8004ac0 <_dtoa_r+0x7e8>
 8004bcc:	9b04      	ldr	r3, [sp, #16]
 8004bce:	e777      	b.n	8004ac0 <_dtoa_r+0x7e8>
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	9308      	str	r3, [sp, #32]
 8004bd4:	e779      	b.n	8004aca <_dtoa_r+0x7f2>
 8004bd6:	d093      	beq.n	8004b00 <_dtoa_r+0x828>
 8004bd8:	9a00      	ldr	r2, [sp, #0]
 8004bda:	331c      	adds	r3, #28
 8004bdc:	441a      	add	r2, r3
 8004bde:	9200      	str	r2, [sp, #0]
 8004be0:	9a06      	ldr	r2, [sp, #24]
 8004be2:	441a      	add	r2, r3
 8004be4:	441e      	add	r6, r3
 8004be6:	9206      	str	r2, [sp, #24]
 8004be8:	e78a      	b.n	8004b00 <_dtoa_r+0x828>
 8004bea:	4603      	mov	r3, r0
 8004bec:	e7f4      	b.n	8004bd8 <_dtoa_r+0x900>
 8004bee:	9b03      	ldr	r3, [sp, #12]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	46b8      	mov	r8, r7
 8004bf4:	dc20      	bgt.n	8004c38 <_dtoa_r+0x960>
 8004bf6:	469b      	mov	fp, r3
 8004bf8:	9b07      	ldr	r3, [sp, #28]
 8004bfa:	2b02      	cmp	r3, #2
 8004bfc:	dd1e      	ble.n	8004c3c <_dtoa_r+0x964>
 8004bfe:	f1bb 0f00 	cmp.w	fp, #0
 8004c02:	f47f adb1 	bne.w	8004768 <_dtoa_r+0x490>
 8004c06:	4621      	mov	r1, r4
 8004c08:	465b      	mov	r3, fp
 8004c0a:	2205      	movs	r2, #5
 8004c0c:	4648      	mov	r0, r9
 8004c0e:	f000 fa95 	bl	800513c <__multadd>
 8004c12:	4601      	mov	r1, r0
 8004c14:	4604      	mov	r4, r0
 8004c16:	9802      	ldr	r0, [sp, #8]
 8004c18:	f000 fca0 	bl	800555c <__mcmp>
 8004c1c:	2800      	cmp	r0, #0
 8004c1e:	f77f ada3 	ble.w	8004768 <_dtoa_r+0x490>
 8004c22:	4656      	mov	r6, sl
 8004c24:	2331      	movs	r3, #49	@ 0x31
 8004c26:	f806 3b01 	strb.w	r3, [r6], #1
 8004c2a:	f108 0801 	add.w	r8, r8, #1
 8004c2e:	e59f      	b.n	8004770 <_dtoa_r+0x498>
 8004c30:	9c03      	ldr	r4, [sp, #12]
 8004c32:	46b8      	mov	r8, r7
 8004c34:	4625      	mov	r5, r4
 8004c36:	e7f4      	b.n	8004c22 <_dtoa_r+0x94a>
 8004c38:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8004c3c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	f000 8101 	beq.w	8004e46 <_dtoa_r+0xb6e>
 8004c44:	2e00      	cmp	r6, #0
 8004c46:	dd05      	ble.n	8004c54 <_dtoa_r+0x97c>
 8004c48:	4629      	mov	r1, r5
 8004c4a:	4632      	mov	r2, r6
 8004c4c:	4648      	mov	r0, r9
 8004c4e:	f000 fc19 	bl	8005484 <__lshift>
 8004c52:	4605      	mov	r5, r0
 8004c54:	9b08      	ldr	r3, [sp, #32]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d05c      	beq.n	8004d14 <_dtoa_r+0xa3c>
 8004c5a:	6869      	ldr	r1, [r5, #4]
 8004c5c:	4648      	mov	r0, r9
 8004c5e:	f000 fa0b 	bl	8005078 <_Balloc>
 8004c62:	4606      	mov	r6, r0
 8004c64:	b928      	cbnz	r0, 8004c72 <_dtoa_r+0x99a>
 8004c66:	4b82      	ldr	r3, [pc, #520]	@ (8004e70 <_dtoa_r+0xb98>)
 8004c68:	4602      	mov	r2, r0
 8004c6a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8004c6e:	f7ff bb4a 	b.w	8004306 <_dtoa_r+0x2e>
 8004c72:	692a      	ldr	r2, [r5, #16]
 8004c74:	3202      	adds	r2, #2
 8004c76:	0092      	lsls	r2, r2, #2
 8004c78:	f105 010c 	add.w	r1, r5, #12
 8004c7c:	300c      	adds	r0, #12
 8004c7e:	f000 fe31 	bl	80058e4 <memcpy>
 8004c82:	2201      	movs	r2, #1
 8004c84:	4631      	mov	r1, r6
 8004c86:	4648      	mov	r0, r9
 8004c88:	f000 fbfc 	bl	8005484 <__lshift>
 8004c8c:	f10a 0301 	add.w	r3, sl, #1
 8004c90:	9300      	str	r3, [sp, #0]
 8004c92:	eb0a 030b 	add.w	r3, sl, fp
 8004c96:	9308      	str	r3, [sp, #32]
 8004c98:	9b04      	ldr	r3, [sp, #16]
 8004c9a:	f003 0301 	and.w	r3, r3, #1
 8004c9e:	462f      	mov	r7, r5
 8004ca0:	9306      	str	r3, [sp, #24]
 8004ca2:	4605      	mov	r5, r0
 8004ca4:	9b00      	ldr	r3, [sp, #0]
 8004ca6:	9802      	ldr	r0, [sp, #8]
 8004ca8:	4621      	mov	r1, r4
 8004caa:	f103 3bff 	add.w	fp, r3, #4294967295
 8004cae:	f7ff fa8a 	bl	80041c6 <quorem>
 8004cb2:	4603      	mov	r3, r0
 8004cb4:	3330      	adds	r3, #48	@ 0x30
 8004cb6:	9003      	str	r0, [sp, #12]
 8004cb8:	4639      	mov	r1, r7
 8004cba:	9802      	ldr	r0, [sp, #8]
 8004cbc:	9309      	str	r3, [sp, #36]	@ 0x24
 8004cbe:	f000 fc4d 	bl	800555c <__mcmp>
 8004cc2:	462a      	mov	r2, r5
 8004cc4:	9004      	str	r0, [sp, #16]
 8004cc6:	4621      	mov	r1, r4
 8004cc8:	4648      	mov	r0, r9
 8004cca:	f000 fc63 	bl	8005594 <__mdiff>
 8004cce:	68c2      	ldr	r2, [r0, #12]
 8004cd0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004cd2:	4606      	mov	r6, r0
 8004cd4:	bb02      	cbnz	r2, 8004d18 <_dtoa_r+0xa40>
 8004cd6:	4601      	mov	r1, r0
 8004cd8:	9802      	ldr	r0, [sp, #8]
 8004cda:	f000 fc3f 	bl	800555c <__mcmp>
 8004cde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004ce0:	4602      	mov	r2, r0
 8004ce2:	4631      	mov	r1, r6
 8004ce4:	4648      	mov	r0, r9
 8004ce6:	920c      	str	r2, [sp, #48]	@ 0x30
 8004ce8:	9309      	str	r3, [sp, #36]	@ 0x24
 8004cea:	f000 fa05 	bl	80050f8 <_Bfree>
 8004cee:	9b07      	ldr	r3, [sp, #28]
 8004cf0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8004cf2:	9e00      	ldr	r6, [sp, #0]
 8004cf4:	ea42 0103 	orr.w	r1, r2, r3
 8004cf8:	9b06      	ldr	r3, [sp, #24]
 8004cfa:	4319      	orrs	r1, r3
 8004cfc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004cfe:	d10d      	bne.n	8004d1c <_dtoa_r+0xa44>
 8004d00:	2b39      	cmp	r3, #57	@ 0x39
 8004d02:	d027      	beq.n	8004d54 <_dtoa_r+0xa7c>
 8004d04:	9a04      	ldr	r2, [sp, #16]
 8004d06:	2a00      	cmp	r2, #0
 8004d08:	dd01      	ble.n	8004d0e <_dtoa_r+0xa36>
 8004d0a:	9b03      	ldr	r3, [sp, #12]
 8004d0c:	3331      	adds	r3, #49	@ 0x31
 8004d0e:	f88b 3000 	strb.w	r3, [fp]
 8004d12:	e52e      	b.n	8004772 <_dtoa_r+0x49a>
 8004d14:	4628      	mov	r0, r5
 8004d16:	e7b9      	b.n	8004c8c <_dtoa_r+0x9b4>
 8004d18:	2201      	movs	r2, #1
 8004d1a:	e7e2      	b.n	8004ce2 <_dtoa_r+0xa0a>
 8004d1c:	9904      	ldr	r1, [sp, #16]
 8004d1e:	2900      	cmp	r1, #0
 8004d20:	db04      	blt.n	8004d2c <_dtoa_r+0xa54>
 8004d22:	9807      	ldr	r0, [sp, #28]
 8004d24:	4301      	orrs	r1, r0
 8004d26:	9806      	ldr	r0, [sp, #24]
 8004d28:	4301      	orrs	r1, r0
 8004d2a:	d120      	bne.n	8004d6e <_dtoa_r+0xa96>
 8004d2c:	2a00      	cmp	r2, #0
 8004d2e:	ddee      	ble.n	8004d0e <_dtoa_r+0xa36>
 8004d30:	9902      	ldr	r1, [sp, #8]
 8004d32:	9300      	str	r3, [sp, #0]
 8004d34:	2201      	movs	r2, #1
 8004d36:	4648      	mov	r0, r9
 8004d38:	f000 fba4 	bl	8005484 <__lshift>
 8004d3c:	4621      	mov	r1, r4
 8004d3e:	9002      	str	r0, [sp, #8]
 8004d40:	f000 fc0c 	bl	800555c <__mcmp>
 8004d44:	2800      	cmp	r0, #0
 8004d46:	9b00      	ldr	r3, [sp, #0]
 8004d48:	dc02      	bgt.n	8004d50 <_dtoa_r+0xa78>
 8004d4a:	d1e0      	bne.n	8004d0e <_dtoa_r+0xa36>
 8004d4c:	07da      	lsls	r2, r3, #31
 8004d4e:	d5de      	bpl.n	8004d0e <_dtoa_r+0xa36>
 8004d50:	2b39      	cmp	r3, #57	@ 0x39
 8004d52:	d1da      	bne.n	8004d0a <_dtoa_r+0xa32>
 8004d54:	2339      	movs	r3, #57	@ 0x39
 8004d56:	f88b 3000 	strb.w	r3, [fp]
 8004d5a:	4633      	mov	r3, r6
 8004d5c:	461e      	mov	r6, r3
 8004d5e:	3b01      	subs	r3, #1
 8004d60:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8004d64:	2a39      	cmp	r2, #57	@ 0x39
 8004d66:	d04e      	beq.n	8004e06 <_dtoa_r+0xb2e>
 8004d68:	3201      	adds	r2, #1
 8004d6a:	701a      	strb	r2, [r3, #0]
 8004d6c:	e501      	b.n	8004772 <_dtoa_r+0x49a>
 8004d6e:	2a00      	cmp	r2, #0
 8004d70:	dd03      	ble.n	8004d7a <_dtoa_r+0xaa2>
 8004d72:	2b39      	cmp	r3, #57	@ 0x39
 8004d74:	d0ee      	beq.n	8004d54 <_dtoa_r+0xa7c>
 8004d76:	3301      	adds	r3, #1
 8004d78:	e7c9      	b.n	8004d0e <_dtoa_r+0xa36>
 8004d7a:	9a00      	ldr	r2, [sp, #0]
 8004d7c:	9908      	ldr	r1, [sp, #32]
 8004d7e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8004d82:	428a      	cmp	r2, r1
 8004d84:	d028      	beq.n	8004dd8 <_dtoa_r+0xb00>
 8004d86:	9902      	ldr	r1, [sp, #8]
 8004d88:	2300      	movs	r3, #0
 8004d8a:	220a      	movs	r2, #10
 8004d8c:	4648      	mov	r0, r9
 8004d8e:	f000 f9d5 	bl	800513c <__multadd>
 8004d92:	42af      	cmp	r7, r5
 8004d94:	9002      	str	r0, [sp, #8]
 8004d96:	f04f 0300 	mov.w	r3, #0
 8004d9a:	f04f 020a 	mov.w	r2, #10
 8004d9e:	4639      	mov	r1, r7
 8004da0:	4648      	mov	r0, r9
 8004da2:	d107      	bne.n	8004db4 <_dtoa_r+0xadc>
 8004da4:	f000 f9ca 	bl	800513c <__multadd>
 8004da8:	4607      	mov	r7, r0
 8004daa:	4605      	mov	r5, r0
 8004dac:	9b00      	ldr	r3, [sp, #0]
 8004dae:	3301      	adds	r3, #1
 8004db0:	9300      	str	r3, [sp, #0]
 8004db2:	e777      	b.n	8004ca4 <_dtoa_r+0x9cc>
 8004db4:	f000 f9c2 	bl	800513c <__multadd>
 8004db8:	4629      	mov	r1, r5
 8004dba:	4607      	mov	r7, r0
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	220a      	movs	r2, #10
 8004dc0:	4648      	mov	r0, r9
 8004dc2:	f000 f9bb 	bl	800513c <__multadd>
 8004dc6:	4605      	mov	r5, r0
 8004dc8:	e7f0      	b.n	8004dac <_dtoa_r+0xad4>
 8004dca:	f1bb 0f00 	cmp.w	fp, #0
 8004dce:	bfcc      	ite	gt
 8004dd0:	465e      	movgt	r6, fp
 8004dd2:	2601      	movle	r6, #1
 8004dd4:	4456      	add	r6, sl
 8004dd6:	2700      	movs	r7, #0
 8004dd8:	9902      	ldr	r1, [sp, #8]
 8004dda:	9300      	str	r3, [sp, #0]
 8004ddc:	2201      	movs	r2, #1
 8004dde:	4648      	mov	r0, r9
 8004de0:	f000 fb50 	bl	8005484 <__lshift>
 8004de4:	4621      	mov	r1, r4
 8004de6:	9002      	str	r0, [sp, #8]
 8004de8:	f000 fbb8 	bl	800555c <__mcmp>
 8004dec:	2800      	cmp	r0, #0
 8004dee:	dcb4      	bgt.n	8004d5a <_dtoa_r+0xa82>
 8004df0:	d102      	bne.n	8004df8 <_dtoa_r+0xb20>
 8004df2:	9b00      	ldr	r3, [sp, #0]
 8004df4:	07db      	lsls	r3, r3, #31
 8004df6:	d4b0      	bmi.n	8004d5a <_dtoa_r+0xa82>
 8004df8:	4633      	mov	r3, r6
 8004dfa:	461e      	mov	r6, r3
 8004dfc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004e00:	2a30      	cmp	r2, #48	@ 0x30
 8004e02:	d0fa      	beq.n	8004dfa <_dtoa_r+0xb22>
 8004e04:	e4b5      	b.n	8004772 <_dtoa_r+0x49a>
 8004e06:	459a      	cmp	sl, r3
 8004e08:	d1a8      	bne.n	8004d5c <_dtoa_r+0xa84>
 8004e0a:	2331      	movs	r3, #49	@ 0x31
 8004e0c:	f108 0801 	add.w	r8, r8, #1
 8004e10:	f88a 3000 	strb.w	r3, [sl]
 8004e14:	e4ad      	b.n	8004772 <_dtoa_r+0x49a>
 8004e16:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004e18:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8004e74 <_dtoa_r+0xb9c>
 8004e1c:	b11b      	cbz	r3, 8004e26 <_dtoa_r+0xb4e>
 8004e1e:	f10a 0308 	add.w	r3, sl, #8
 8004e22:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8004e24:	6013      	str	r3, [r2, #0]
 8004e26:	4650      	mov	r0, sl
 8004e28:	b017      	add	sp, #92	@ 0x5c
 8004e2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e2e:	9b07      	ldr	r3, [sp, #28]
 8004e30:	2b01      	cmp	r3, #1
 8004e32:	f77f ae2e 	ble.w	8004a92 <_dtoa_r+0x7ba>
 8004e36:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004e38:	9308      	str	r3, [sp, #32]
 8004e3a:	2001      	movs	r0, #1
 8004e3c:	e64d      	b.n	8004ada <_dtoa_r+0x802>
 8004e3e:	f1bb 0f00 	cmp.w	fp, #0
 8004e42:	f77f aed9 	ble.w	8004bf8 <_dtoa_r+0x920>
 8004e46:	4656      	mov	r6, sl
 8004e48:	9802      	ldr	r0, [sp, #8]
 8004e4a:	4621      	mov	r1, r4
 8004e4c:	f7ff f9bb 	bl	80041c6 <quorem>
 8004e50:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8004e54:	f806 3b01 	strb.w	r3, [r6], #1
 8004e58:	eba6 020a 	sub.w	r2, r6, sl
 8004e5c:	4593      	cmp	fp, r2
 8004e5e:	ddb4      	ble.n	8004dca <_dtoa_r+0xaf2>
 8004e60:	9902      	ldr	r1, [sp, #8]
 8004e62:	2300      	movs	r3, #0
 8004e64:	220a      	movs	r2, #10
 8004e66:	4648      	mov	r0, r9
 8004e68:	f000 f968 	bl	800513c <__multadd>
 8004e6c:	9002      	str	r0, [sp, #8]
 8004e6e:	e7eb      	b.n	8004e48 <_dtoa_r+0xb70>
 8004e70:	08006008 	.word	0x08006008
 8004e74:	08005f8c 	.word	0x08005f8c

08004e78 <_free_r>:
 8004e78:	b538      	push	{r3, r4, r5, lr}
 8004e7a:	4605      	mov	r5, r0
 8004e7c:	2900      	cmp	r1, #0
 8004e7e:	d041      	beq.n	8004f04 <_free_r+0x8c>
 8004e80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e84:	1f0c      	subs	r4, r1, #4
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	bfb8      	it	lt
 8004e8a:	18e4      	addlt	r4, r4, r3
 8004e8c:	f000 f8e8 	bl	8005060 <__malloc_lock>
 8004e90:	4a1d      	ldr	r2, [pc, #116]	@ (8004f08 <_free_r+0x90>)
 8004e92:	6813      	ldr	r3, [r2, #0]
 8004e94:	b933      	cbnz	r3, 8004ea4 <_free_r+0x2c>
 8004e96:	6063      	str	r3, [r4, #4]
 8004e98:	6014      	str	r4, [r2, #0]
 8004e9a:	4628      	mov	r0, r5
 8004e9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004ea0:	f000 b8e4 	b.w	800506c <__malloc_unlock>
 8004ea4:	42a3      	cmp	r3, r4
 8004ea6:	d908      	bls.n	8004eba <_free_r+0x42>
 8004ea8:	6820      	ldr	r0, [r4, #0]
 8004eaa:	1821      	adds	r1, r4, r0
 8004eac:	428b      	cmp	r3, r1
 8004eae:	bf01      	itttt	eq
 8004eb0:	6819      	ldreq	r1, [r3, #0]
 8004eb2:	685b      	ldreq	r3, [r3, #4]
 8004eb4:	1809      	addeq	r1, r1, r0
 8004eb6:	6021      	streq	r1, [r4, #0]
 8004eb8:	e7ed      	b.n	8004e96 <_free_r+0x1e>
 8004eba:	461a      	mov	r2, r3
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	b10b      	cbz	r3, 8004ec4 <_free_r+0x4c>
 8004ec0:	42a3      	cmp	r3, r4
 8004ec2:	d9fa      	bls.n	8004eba <_free_r+0x42>
 8004ec4:	6811      	ldr	r1, [r2, #0]
 8004ec6:	1850      	adds	r0, r2, r1
 8004ec8:	42a0      	cmp	r0, r4
 8004eca:	d10b      	bne.n	8004ee4 <_free_r+0x6c>
 8004ecc:	6820      	ldr	r0, [r4, #0]
 8004ece:	4401      	add	r1, r0
 8004ed0:	1850      	adds	r0, r2, r1
 8004ed2:	4283      	cmp	r3, r0
 8004ed4:	6011      	str	r1, [r2, #0]
 8004ed6:	d1e0      	bne.n	8004e9a <_free_r+0x22>
 8004ed8:	6818      	ldr	r0, [r3, #0]
 8004eda:	685b      	ldr	r3, [r3, #4]
 8004edc:	6053      	str	r3, [r2, #4]
 8004ede:	4408      	add	r0, r1
 8004ee0:	6010      	str	r0, [r2, #0]
 8004ee2:	e7da      	b.n	8004e9a <_free_r+0x22>
 8004ee4:	d902      	bls.n	8004eec <_free_r+0x74>
 8004ee6:	230c      	movs	r3, #12
 8004ee8:	602b      	str	r3, [r5, #0]
 8004eea:	e7d6      	b.n	8004e9a <_free_r+0x22>
 8004eec:	6820      	ldr	r0, [r4, #0]
 8004eee:	1821      	adds	r1, r4, r0
 8004ef0:	428b      	cmp	r3, r1
 8004ef2:	bf04      	itt	eq
 8004ef4:	6819      	ldreq	r1, [r3, #0]
 8004ef6:	685b      	ldreq	r3, [r3, #4]
 8004ef8:	6063      	str	r3, [r4, #4]
 8004efa:	bf04      	itt	eq
 8004efc:	1809      	addeq	r1, r1, r0
 8004efe:	6021      	streq	r1, [r4, #0]
 8004f00:	6054      	str	r4, [r2, #4]
 8004f02:	e7ca      	b.n	8004e9a <_free_r+0x22>
 8004f04:	bd38      	pop	{r3, r4, r5, pc}
 8004f06:	bf00      	nop
 8004f08:	20000430 	.word	0x20000430

08004f0c <malloc>:
 8004f0c:	4b02      	ldr	r3, [pc, #8]	@ (8004f18 <malloc+0xc>)
 8004f0e:	4601      	mov	r1, r0
 8004f10:	6818      	ldr	r0, [r3, #0]
 8004f12:	f000 b825 	b.w	8004f60 <_malloc_r>
 8004f16:	bf00      	nop
 8004f18:	20000010 	.word	0x20000010

08004f1c <sbrk_aligned>:
 8004f1c:	b570      	push	{r4, r5, r6, lr}
 8004f1e:	4e0f      	ldr	r6, [pc, #60]	@ (8004f5c <sbrk_aligned+0x40>)
 8004f20:	460c      	mov	r4, r1
 8004f22:	6831      	ldr	r1, [r6, #0]
 8004f24:	4605      	mov	r5, r0
 8004f26:	b911      	cbnz	r1, 8004f2e <sbrk_aligned+0x12>
 8004f28:	f000 fccc 	bl	80058c4 <_sbrk_r>
 8004f2c:	6030      	str	r0, [r6, #0]
 8004f2e:	4621      	mov	r1, r4
 8004f30:	4628      	mov	r0, r5
 8004f32:	f000 fcc7 	bl	80058c4 <_sbrk_r>
 8004f36:	1c43      	adds	r3, r0, #1
 8004f38:	d103      	bne.n	8004f42 <sbrk_aligned+0x26>
 8004f3a:	f04f 34ff 	mov.w	r4, #4294967295
 8004f3e:	4620      	mov	r0, r4
 8004f40:	bd70      	pop	{r4, r5, r6, pc}
 8004f42:	1cc4      	adds	r4, r0, #3
 8004f44:	f024 0403 	bic.w	r4, r4, #3
 8004f48:	42a0      	cmp	r0, r4
 8004f4a:	d0f8      	beq.n	8004f3e <sbrk_aligned+0x22>
 8004f4c:	1a21      	subs	r1, r4, r0
 8004f4e:	4628      	mov	r0, r5
 8004f50:	f000 fcb8 	bl	80058c4 <_sbrk_r>
 8004f54:	3001      	adds	r0, #1
 8004f56:	d1f2      	bne.n	8004f3e <sbrk_aligned+0x22>
 8004f58:	e7ef      	b.n	8004f3a <sbrk_aligned+0x1e>
 8004f5a:	bf00      	nop
 8004f5c:	2000042c 	.word	0x2000042c

08004f60 <_malloc_r>:
 8004f60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f64:	1ccd      	adds	r5, r1, #3
 8004f66:	f025 0503 	bic.w	r5, r5, #3
 8004f6a:	3508      	adds	r5, #8
 8004f6c:	2d0c      	cmp	r5, #12
 8004f6e:	bf38      	it	cc
 8004f70:	250c      	movcc	r5, #12
 8004f72:	2d00      	cmp	r5, #0
 8004f74:	4606      	mov	r6, r0
 8004f76:	db01      	blt.n	8004f7c <_malloc_r+0x1c>
 8004f78:	42a9      	cmp	r1, r5
 8004f7a:	d904      	bls.n	8004f86 <_malloc_r+0x26>
 8004f7c:	230c      	movs	r3, #12
 8004f7e:	6033      	str	r3, [r6, #0]
 8004f80:	2000      	movs	r0, #0
 8004f82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004f86:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800505c <_malloc_r+0xfc>
 8004f8a:	f000 f869 	bl	8005060 <__malloc_lock>
 8004f8e:	f8d8 3000 	ldr.w	r3, [r8]
 8004f92:	461c      	mov	r4, r3
 8004f94:	bb44      	cbnz	r4, 8004fe8 <_malloc_r+0x88>
 8004f96:	4629      	mov	r1, r5
 8004f98:	4630      	mov	r0, r6
 8004f9a:	f7ff ffbf 	bl	8004f1c <sbrk_aligned>
 8004f9e:	1c43      	adds	r3, r0, #1
 8004fa0:	4604      	mov	r4, r0
 8004fa2:	d158      	bne.n	8005056 <_malloc_r+0xf6>
 8004fa4:	f8d8 4000 	ldr.w	r4, [r8]
 8004fa8:	4627      	mov	r7, r4
 8004faa:	2f00      	cmp	r7, #0
 8004fac:	d143      	bne.n	8005036 <_malloc_r+0xd6>
 8004fae:	2c00      	cmp	r4, #0
 8004fb0:	d04b      	beq.n	800504a <_malloc_r+0xea>
 8004fb2:	6823      	ldr	r3, [r4, #0]
 8004fb4:	4639      	mov	r1, r7
 8004fb6:	4630      	mov	r0, r6
 8004fb8:	eb04 0903 	add.w	r9, r4, r3
 8004fbc:	f000 fc82 	bl	80058c4 <_sbrk_r>
 8004fc0:	4581      	cmp	r9, r0
 8004fc2:	d142      	bne.n	800504a <_malloc_r+0xea>
 8004fc4:	6821      	ldr	r1, [r4, #0]
 8004fc6:	1a6d      	subs	r5, r5, r1
 8004fc8:	4629      	mov	r1, r5
 8004fca:	4630      	mov	r0, r6
 8004fcc:	f7ff ffa6 	bl	8004f1c <sbrk_aligned>
 8004fd0:	3001      	adds	r0, #1
 8004fd2:	d03a      	beq.n	800504a <_malloc_r+0xea>
 8004fd4:	6823      	ldr	r3, [r4, #0]
 8004fd6:	442b      	add	r3, r5
 8004fd8:	6023      	str	r3, [r4, #0]
 8004fda:	f8d8 3000 	ldr.w	r3, [r8]
 8004fde:	685a      	ldr	r2, [r3, #4]
 8004fe0:	bb62      	cbnz	r2, 800503c <_malloc_r+0xdc>
 8004fe2:	f8c8 7000 	str.w	r7, [r8]
 8004fe6:	e00f      	b.n	8005008 <_malloc_r+0xa8>
 8004fe8:	6822      	ldr	r2, [r4, #0]
 8004fea:	1b52      	subs	r2, r2, r5
 8004fec:	d420      	bmi.n	8005030 <_malloc_r+0xd0>
 8004fee:	2a0b      	cmp	r2, #11
 8004ff0:	d917      	bls.n	8005022 <_malloc_r+0xc2>
 8004ff2:	1961      	adds	r1, r4, r5
 8004ff4:	42a3      	cmp	r3, r4
 8004ff6:	6025      	str	r5, [r4, #0]
 8004ff8:	bf18      	it	ne
 8004ffa:	6059      	strne	r1, [r3, #4]
 8004ffc:	6863      	ldr	r3, [r4, #4]
 8004ffe:	bf08      	it	eq
 8005000:	f8c8 1000 	streq.w	r1, [r8]
 8005004:	5162      	str	r2, [r4, r5]
 8005006:	604b      	str	r3, [r1, #4]
 8005008:	4630      	mov	r0, r6
 800500a:	f000 f82f 	bl	800506c <__malloc_unlock>
 800500e:	f104 000b 	add.w	r0, r4, #11
 8005012:	1d23      	adds	r3, r4, #4
 8005014:	f020 0007 	bic.w	r0, r0, #7
 8005018:	1ac2      	subs	r2, r0, r3
 800501a:	bf1c      	itt	ne
 800501c:	1a1b      	subne	r3, r3, r0
 800501e:	50a3      	strne	r3, [r4, r2]
 8005020:	e7af      	b.n	8004f82 <_malloc_r+0x22>
 8005022:	6862      	ldr	r2, [r4, #4]
 8005024:	42a3      	cmp	r3, r4
 8005026:	bf0c      	ite	eq
 8005028:	f8c8 2000 	streq.w	r2, [r8]
 800502c:	605a      	strne	r2, [r3, #4]
 800502e:	e7eb      	b.n	8005008 <_malloc_r+0xa8>
 8005030:	4623      	mov	r3, r4
 8005032:	6864      	ldr	r4, [r4, #4]
 8005034:	e7ae      	b.n	8004f94 <_malloc_r+0x34>
 8005036:	463c      	mov	r4, r7
 8005038:	687f      	ldr	r7, [r7, #4]
 800503a:	e7b6      	b.n	8004faa <_malloc_r+0x4a>
 800503c:	461a      	mov	r2, r3
 800503e:	685b      	ldr	r3, [r3, #4]
 8005040:	42a3      	cmp	r3, r4
 8005042:	d1fb      	bne.n	800503c <_malloc_r+0xdc>
 8005044:	2300      	movs	r3, #0
 8005046:	6053      	str	r3, [r2, #4]
 8005048:	e7de      	b.n	8005008 <_malloc_r+0xa8>
 800504a:	230c      	movs	r3, #12
 800504c:	6033      	str	r3, [r6, #0]
 800504e:	4630      	mov	r0, r6
 8005050:	f000 f80c 	bl	800506c <__malloc_unlock>
 8005054:	e794      	b.n	8004f80 <_malloc_r+0x20>
 8005056:	6005      	str	r5, [r0, #0]
 8005058:	e7d6      	b.n	8005008 <_malloc_r+0xa8>
 800505a:	bf00      	nop
 800505c:	20000430 	.word	0x20000430

08005060 <__malloc_lock>:
 8005060:	4801      	ldr	r0, [pc, #4]	@ (8005068 <__malloc_lock+0x8>)
 8005062:	f7ff b8ae 	b.w	80041c2 <__retarget_lock_acquire_recursive>
 8005066:	bf00      	nop
 8005068:	20000428 	.word	0x20000428

0800506c <__malloc_unlock>:
 800506c:	4801      	ldr	r0, [pc, #4]	@ (8005074 <__malloc_unlock+0x8>)
 800506e:	f7ff b8a9 	b.w	80041c4 <__retarget_lock_release_recursive>
 8005072:	bf00      	nop
 8005074:	20000428 	.word	0x20000428

08005078 <_Balloc>:
 8005078:	b570      	push	{r4, r5, r6, lr}
 800507a:	69c6      	ldr	r6, [r0, #28]
 800507c:	4604      	mov	r4, r0
 800507e:	460d      	mov	r5, r1
 8005080:	b976      	cbnz	r6, 80050a0 <_Balloc+0x28>
 8005082:	2010      	movs	r0, #16
 8005084:	f7ff ff42 	bl	8004f0c <malloc>
 8005088:	4602      	mov	r2, r0
 800508a:	61e0      	str	r0, [r4, #28]
 800508c:	b920      	cbnz	r0, 8005098 <_Balloc+0x20>
 800508e:	4b18      	ldr	r3, [pc, #96]	@ (80050f0 <_Balloc+0x78>)
 8005090:	4818      	ldr	r0, [pc, #96]	@ (80050f4 <_Balloc+0x7c>)
 8005092:	216b      	movs	r1, #107	@ 0x6b
 8005094:	f000 fc34 	bl	8005900 <__assert_func>
 8005098:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800509c:	6006      	str	r6, [r0, #0]
 800509e:	60c6      	str	r6, [r0, #12]
 80050a0:	69e6      	ldr	r6, [r4, #28]
 80050a2:	68f3      	ldr	r3, [r6, #12]
 80050a4:	b183      	cbz	r3, 80050c8 <_Balloc+0x50>
 80050a6:	69e3      	ldr	r3, [r4, #28]
 80050a8:	68db      	ldr	r3, [r3, #12]
 80050aa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80050ae:	b9b8      	cbnz	r0, 80050e0 <_Balloc+0x68>
 80050b0:	2101      	movs	r1, #1
 80050b2:	fa01 f605 	lsl.w	r6, r1, r5
 80050b6:	1d72      	adds	r2, r6, #5
 80050b8:	0092      	lsls	r2, r2, #2
 80050ba:	4620      	mov	r0, r4
 80050bc:	f000 fc3e 	bl	800593c <_calloc_r>
 80050c0:	b160      	cbz	r0, 80050dc <_Balloc+0x64>
 80050c2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80050c6:	e00e      	b.n	80050e6 <_Balloc+0x6e>
 80050c8:	2221      	movs	r2, #33	@ 0x21
 80050ca:	2104      	movs	r1, #4
 80050cc:	4620      	mov	r0, r4
 80050ce:	f000 fc35 	bl	800593c <_calloc_r>
 80050d2:	69e3      	ldr	r3, [r4, #28]
 80050d4:	60f0      	str	r0, [r6, #12]
 80050d6:	68db      	ldr	r3, [r3, #12]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d1e4      	bne.n	80050a6 <_Balloc+0x2e>
 80050dc:	2000      	movs	r0, #0
 80050de:	bd70      	pop	{r4, r5, r6, pc}
 80050e0:	6802      	ldr	r2, [r0, #0]
 80050e2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80050e6:	2300      	movs	r3, #0
 80050e8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80050ec:	e7f7      	b.n	80050de <_Balloc+0x66>
 80050ee:	bf00      	nop
 80050f0:	08005f99 	.word	0x08005f99
 80050f4:	08006019 	.word	0x08006019

080050f8 <_Bfree>:
 80050f8:	b570      	push	{r4, r5, r6, lr}
 80050fa:	69c6      	ldr	r6, [r0, #28]
 80050fc:	4605      	mov	r5, r0
 80050fe:	460c      	mov	r4, r1
 8005100:	b976      	cbnz	r6, 8005120 <_Bfree+0x28>
 8005102:	2010      	movs	r0, #16
 8005104:	f7ff ff02 	bl	8004f0c <malloc>
 8005108:	4602      	mov	r2, r0
 800510a:	61e8      	str	r0, [r5, #28]
 800510c:	b920      	cbnz	r0, 8005118 <_Bfree+0x20>
 800510e:	4b09      	ldr	r3, [pc, #36]	@ (8005134 <_Bfree+0x3c>)
 8005110:	4809      	ldr	r0, [pc, #36]	@ (8005138 <_Bfree+0x40>)
 8005112:	218f      	movs	r1, #143	@ 0x8f
 8005114:	f000 fbf4 	bl	8005900 <__assert_func>
 8005118:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800511c:	6006      	str	r6, [r0, #0]
 800511e:	60c6      	str	r6, [r0, #12]
 8005120:	b13c      	cbz	r4, 8005132 <_Bfree+0x3a>
 8005122:	69eb      	ldr	r3, [r5, #28]
 8005124:	6862      	ldr	r2, [r4, #4]
 8005126:	68db      	ldr	r3, [r3, #12]
 8005128:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800512c:	6021      	str	r1, [r4, #0]
 800512e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005132:	bd70      	pop	{r4, r5, r6, pc}
 8005134:	08005f99 	.word	0x08005f99
 8005138:	08006019 	.word	0x08006019

0800513c <__multadd>:
 800513c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005140:	690d      	ldr	r5, [r1, #16]
 8005142:	4607      	mov	r7, r0
 8005144:	460c      	mov	r4, r1
 8005146:	461e      	mov	r6, r3
 8005148:	f101 0c14 	add.w	ip, r1, #20
 800514c:	2000      	movs	r0, #0
 800514e:	f8dc 3000 	ldr.w	r3, [ip]
 8005152:	b299      	uxth	r1, r3
 8005154:	fb02 6101 	mla	r1, r2, r1, r6
 8005158:	0c1e      	lsrs	r6, r3, #16
 800515a:	0c0b      	lsrs	r3, r1, #16
 800515c:	fb02 3306 	mla	r3, r2, r6, r3
 8005160:	b289      	uxth	r1, r1
 8005162:	3001      	adds	r0, #1
 8005164:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005168:	4285      	cmp	r5, r0
 800516a:	f84c 1b04 	str.w	r1, [ip], #4
 800516e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005172:	dcec      	bgt.n	800514e <__multadd+0x12>
 8005174:	b30e      	cbz	r6, 80051ba <__multadd+0x7e>
 8005176:	68a3      	ldr	r3, [r4, #8]
 8005178:	42ab      	cmp	r3, r5
 800517a:	dc19      	bgt.n	80051b0 <__multadd+0x74>
 800517c:	6861      	ldr	r1, [r4, #4]
 800517e:	4638      	mov	r0, r7
 8005180:	3101      	adds	r1, #1
 8005182:	f7ff ff79 	bl	8005078 <_Balloc>
 8005186:	4680      	mov	r8, r0
 8005188:	b928      	cbnz	r0, 8005196 <__multadd+0x5a>
 800518a:	4602      	mov	r2, r0
 800518c:	4b0c      	ldr	r3, [pc, #48]	@ (80051c0 <__multadd+0x84>)
 800518e:	480d      	ldr	r0, [pc, #52]	@ (80051c4 <__multadd+0x88>)
 8005190:	21ba      	movs	r1, #186	@ 0xba
 8005192:	f000 fbb5 	bl	8005900 <__assert_func>
 8005196:	6922      	ldr	r2, [r4, #16]
 8005198:	3202      	adds	r2, #2
 800519a:	f104 010c 	add.w	r1, r4, #12
 800519e:	0092      	lsls	r2, r2, #2
 80051a0:	300c      	adds	r0, #12
 80051a2:	f000 fb9f 	bl	80058e4 <memcpy>
 80051a6:	4621      	mov	r1, r4
 80051a8:	4638      	mov	r0, r7
 80051aa:	f7ff ffa5 	bl	80050f8 <_Bfree>
 80051ae:	4644      	mov	r4, r8
 80051b0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80051b4:	3501      	adds	r5, #1
 80051b6:	615e      	str	r6, [r3, #20]
 80051b8:	6125      	str	r5, [r4, #16]
 80051ba:	4620      	mov	r0, r4
 80051bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80051c0:	08006008 	.word	0x08006008
 80051c4:	08006019 	.word	0x08006019

080051c8 <__hi0bits>:
 80051c8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80051cc:	4603      	mov	r3, r0
 80051ce:	bf36      	itet	cc
 80051d0:	0403      	lslcc	r3, r0, #16
 80051d2:	2000      	movcs	r0, #0
 80051d4:	2010      	movcc	r0, #16
 80051d6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80051da:	bf3c      	itt	cc
 80051dc:	021b      	lslcc	r3, r3, #8
 80051de:	3008      	addcc	r0, #8
 80051e0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80051e4:	bf3c      	itt	cc
 80051e6:	011b      	lslcc	r3, r3, #4
 80051e8:	3004      	addcc	r0, #4
 80051ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051ee:	bf3c      	itt	cc
 80051f0:	009b      	lslcc	r3, r3, #2
 80051f2:	3002      	addcc	r0, #2
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	db05      	blt.n	8005204 <__hi0bits+0x3c>
 80051f8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80051fc:	f100 0001 	add.w	r0, r0, #1
 8005200:	bf08      	it	eq
 8005202:	2020      	moveq	r0, #32
 8005204:	4770      	bx	lr

08005206 <__lo0bits>:
 8005206:	6803      	ldr	r3, [r0, #0]
 8005208:	4602      	mov	r2, r0
 800520a:	f013 0007 	ands.w	r0, r3, #7
 800520e:	d00b      	beq.n	8005228 <__lo0bits+0x22>
 8005210:	07d9      	lsls	r1, r3, #31
 8005212:	d421      	bmi.n	8005258 <__lo0bits+0x52>
 8005214:	0798      	lsls	r0, r3, #30
 8005216:	bf49      	itett	mi
 8005218:	085b      	lsrmi	r3, r3, #1
 800521a:	089b      	lsrpl	r3, r3, #2
 800521c:	2001      	movmi	r0, #1
 800521e:	6013      	strmi	r3, [r2, #0]
 8005220:	bf5c      	itt	pl
 8005222:	6013      	strpl	r3, [r2, #0]
 8005224:	2002      	movpl	r0, #2
 8005226:	4770      	bx	lr
 8005228:	b299      	uxth	r1, r3
 800522a:	b909      	cbnz	r1, 8005230 <__lo0bits+0x2a>
 800522c:	0c1b      	lsrs	r3, r3, #16
 800522e:	2010      	movs	r0, #16
 8005230:	b2d9      	uxtb	r1, r3
 8005232:	b909      	cbnz	r1, 8005238 <__lo0bits+0x32>
 8005234:	3008      	adds	r0, #8
 8005236:	0a1b      	lsrs	r3, r3, #8
 8005238:	0719      	lsls	r1, r3, #28
 800523a:	bf04      	itt	eq
 800523c:	091b      	lsreq	r3, r3, #4
 800523e:	3004      	addeq	r0, #4
 8005240:	0799      	lsls	r1, r3, #30
 8005242:	bf04      	itt	eq
 8005244:	089b      	lsreq	r3, r3, #2
 8005246:	3002      	addeq	r0, #2
 8005248:	07d9      	lsls	r1, r3, #31
 800524a:	d403      	bmi.n	8005254 <__lo0bits+0x4e>
 800524c:	085b      	lsrs	r3, r3, #1
 800524e:	f100 0001 	add.w	r0, r0, #1
 8005252:	d003      	beq.n	800525c <__lo0bits+0x56>
 8005254:	6013      	str	r3, [r2, #0]
 8005256:	4770      	bx	lr
 8005258:	2000      	movs	r0, #0
 800525a:	4770      	bx	lr
 800525c:	2020      	movs	r0, #32
 800525e:	4770      	bx	lr

08005260 <__i2b>:
 8005260:	b510      	push	{r4, lr}
 8005262:	460c      	mov	r4, r1
 8005264:	2101      	movs	r1, #1
 8005266:	f7ff ff07 	bl	8005078 <_Balloc>
 800526a:	4602      	mov	r2, r0
 800526c:	b928      	cbnz	r0, 800527a <__i2b+0x1a>
 800526e:	4b05      	ldr	r3, [pc, #20]	@ (8005284 <__i2b+0x24>)
 8005270:	4805      	ldr	r0, [pc, #20]	@ (8005288 <__i2b+0x28>)
 8005272:	f240 1145 	movw	r1, #325	@ 0x145
 8005276:	f000 fb43 	bl	8005900 <__assert_func>
 800527a:	2301      	movs	r3, #1
 800527c:	6144      	str	r4, [r0, #20]
 800527e:	6103      	str	r3, [r0, #16]
 8005280:	bd10      	pop	{r4, pc}
 8005282:	bf00      	nop
 8005284:	08006008 	.word	0x08006008
 8005288:	08006019 	.word	0x08006019

0800528c <__multiply>:
 800528c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005290:	4617      	mov	r7, r2
 8005292:	690a      	ldr	r2, [r1, #16]
 8005294:	693b      	ldr	r3, [r7, #16]
 8005296:	429a      	cmp	r2, r3
 8005298:	bfa8      	it	ge
 800529a:	463b      	movge	r3, r7
 800529c:	4689      	mov	r9, r1
 800529e:	bfa4      	itt	ge
 80052a0:	460f      	movge	r7, r1
 80052a2:	4699      	movge	r9, r3
 80052a4:	693d      	ldr	r5, [r7, #16]
 80052a6:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	6879      	ldr	r1, [r7, #4]
 80052ae:	eb05 060a 	add.w	r6, r5, sl
 80052b2:	42b3      	cmp	r3, r6
 80052b4:	b085      	sub	sp, #20
 80052b6:	bfb8      	it	lt
 80052b8:	3101      	addlt	r1, #1
 80052ba:	f7ff fedd 	bl	8005078 <_Balloc>
 80052be:	b930      	cbnz	r0, 80052ce <__multiply+0x42>
 80052c0:	4602      	mov	r2, r0
 80052c2:	4b41      	ldr	r3, [pc, #260]	@ (80053c8 <__multiply+0x13c>)
 80052c4:	4841      	ldr	r0, [pc, #260]	@ (80053cc <__multiply+0x140>)
 80052c6:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80052ca:	f000 fb19 	bl	8005900 <__assert_func>
 80052ce:	f100 0414 	add.w	r4, r0, #20
 80052d2:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80052d6:	4623      	mov	r3, r4
 80052d8:	2200      	movs	r2, #0
 80052da:	4573      	cmp	r3, lr
 80052dc:	d320      	bcc.n	8005320 <__multiply+0x94>
 80052de:	f107 0814 	add.w	r8, r7, #20
 80052e2:	f109 0114 	add.w	r1, r9, #20
 80052e6:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80052ea:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80052ee:	9302      	str	r3, [sp, #8]
 80052f0:	1beb      	subs	r3, r5, r7
 80052f2:	3b15      	subs	r3, #21
 80052f4:	f023 0303 	bic.w	r3, r3, #3
 80052f8:	3304      	adds	r3, #4
 80052fa:	3715      	adds	r7, #21
 80052fc:	42bd      	cmp	r5, r7
 80052fe:	bf38      	it	cc
 8005300:	2304      	movcc	r3, #4
 8005302:	9301      	str	r3, [sp, #4]
 8005304:	9b02      	ldr	r3, [sp, #8]
 8005306:	9103      	str	r1, [sp, #12]
 8005308:	428b      	cmp	r3, r1
 800530a:	d80c      	bhi.n	8005326 <__multiply+0x9a>
 800530c:	2e00      	cmp	r6, #0
 800530e:	dd03      	ble.n	8005318 <__multiply+0x8c>
 8005310:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8005314:	2b00      	cmp	r3, #0
 8005316:	d055      	beq.n	80053c4 <__multiply+0x138>
 8005318:	6106      	str	r6, [r0, #16]
 800531a:	b005      	add	sp, #20
 800531c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005320:	f843 2b04 	str.w	r2, [r3], #4
 8005324:	e7d9      	b.n	80052da <__multiply+0x4e>
 8005326:	f8b1 a000 	ldrh.w	sl, [r1]
 800532a:	f1ba 0f00 	cmp.w	sl, #0
 800532e:	d01f      	beq.n	8005370 <__multiply+0xe4>
 8005330:	46c4      	mov	ip, r8
 8005332:	46a1      	mov	r9, r4
 8005334:	2700      	movs	r7, #0
 8005336:	f85c 2b04 	ldr.w	r2, [ip], #4
 800533a:	f8d9 3000 	ldr.w	r3, [r9]
 800533e:	fa1f fb82 	uxth.w	fp, r2
 8005342:	b29b      	uxth	r3, r3
 8005344:	fb0a 330b 	mla	r3, sl, fp, r3
 8005348:	443b      	add	r3, r7
 800534a:	f8d9 7000 	ldr.w	r7, [r9]
 800534e:	0c12      	lsrs	r2, r2, #16
 8005350:	0c3f      	lsrs	r7, r7, #16
 8005352:	fb0a 7202 	mla	r2, sl, r2, r7
 8005356:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800535a:	b29b      	uxth	r3, r3
 800535c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005360:	4565      	cmp	r5, ip
 8005362:	f849 3b04 	str.w	r3, [r9], #4
 8005366:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800536a:	d8e4      	bhi.n	8005336 <__multiply+0xaa>
 800536c:	9b01      	ldr	r3, [sp, #4]
 800536e:	50e7      	str	r7, [r4, r3]
 8005370:	9b03      	ldr	r3, [sp, #12]
 8005372:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8005376:	3104      	adds	r1, #4
 8005378:	f1b9 0f00 	cmp.w	r9, #0
 800537c:	d020      	beq.n	80053c0 <__multiply+0x134>
 800537e:	6823      	ldr	r3, [r4, #0]
 8005380:	4647      	mov	r7, r8
 8005382:	46a4      	mov	ip, r4
 8005384:	f04f 0a00 	mov.w	sl, #0
 8005388:	f8b7 b000 	ldrh.w	fp, [r7]
 800538c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8005390:	fb09 220b 	mla	r2, r9, fp, r2
 8005394:	4452      	add	r2, sl
 8005396:	b29b      	uxth	r3, r3
 8005398:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800539c:	f84c 3b04 	str.w	r3, [ip], #4
 80053a0:	f857 3b04 	ldr.w	r3, [r7], #4
 80053a4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80053a8:	f8bc 3000 	ldrh.w	r3, [ip]
 80053ac:	fb09 330a 	mla	r3, r9, sl, r3
 80053b0:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80053b4:	42bd      	cmp	r5, r7
 80053b6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80053ba:	d8e5      	bhi.n	8005388 <__multiply+0xfc>
 80053bc:	9a01      	ldr	r2, [sp, #4]
 80053be:	50a3      	str	r3, [r4, r2]
 80053c0:	3404      	adds	r4, #4
 80053c2:	e79f      	b.n	8005304 <__multiply+0x78>
 80053c4:	3e01      	subs	r6, #1
 80053c6:	e7a1      	b.n	800530c <__multiply+0x80>
 80053c8:	08006008 	.word	0x08006008
 80053cc:	08006019 	.word	0x08006019

080053d0 <__pow5mult>:
 80053d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80053d4:	4615      	mov	r5, r2
 80053d6:	f012 0203 	ands.w	r2, r2, #3
 80053da:	4607      	mov	r7, r0
 80053dc:	460e      	mov	r6, r1
 80053de:	d007      	beq.n	80053f0 <__pow5mult+0x20>
 80053e0:	4c25      	ldr	r4, [pc, #148]	@ (8005478 <__pow5mult+0xa8>)
 80053e2:	3a01      	subs	r2, #1
 80053e4:	2300      	movs	r3, #0
 80053e6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80053ea:	f7ff fea7 	bl	800513c <__multadd>
 80053ee:	4606      	mov	r6, r0
 80053f0:	10ad      	asrs	r5, r5, #2
 80053f2:	d03d      	beq.n	8005470 <__pow5mult+0xa0>
 80053f4:	69fc      	ldr	r4, [r7, #28]
 80053f6:	b97c      	cbnz	r4, 8005418 <__pow5mult+0x48>
 80053f8:	2010      	movs	r0, #16
 80053fa:	f7ff fd87 	bl	8004f0c <malloc>
 80053fe:	4602      	mov	r2, r0
 8005400:	61f8      	str	r0, [r7, #28]
 8005402:	b928      	cbnz	r0, 8005410 <__pow5mult+0x40>
 8005404:	4b1d      	ldr	r3, [pc, #116]	@ (800547c <__pow5mult+0xac>)
 8005406:	481e      	ldr	r0, [pc, #120]	@ (8005480 <__pow5mult+0xb0>)
 8005408:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800540c:	f000 fa78 	bl	8005900 <__assert_func>
 8005410:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005414:	6004      	str	r4, [r0, #0]
 8005416:	60c4      	str	r4, [r0, #12]
 8005418:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800541c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005420:	b94c      	cbnz	r4, 8005436 <__pow5mult+0x66>
 8005422:	f240 2171 	movw	r1, #625	@ 0x271
 8005426:	4638      	mov	r0, r7
 8005428:	f7ff ff1a 	bl	8005260 <__i2b>
 800542c:	2300      	movs	r3, #0
 800542e:	f8c8 0008 	str.w	r0, [r8, #8]
 8005432:	4604      	mov	r4, r0
 8005434:	6003      	str	r3, [r0, #0]
 8005436:	f04f 0900 	mov.w	r9, #0
 800543a:	07eb      	lsls	r3, r5, #31
 800543c:	d50a      	bpl.n	8005454 <__pow5mult+0x84>
 800543e:	4631      	mov	r1, r6
 8005440:	4622      	mov	r2, r4
 8005442:	4638      	mov	r0, r7
 8005444:	f7ff ff22 	bl	800528c <__multiply>
 8005448:	4631      	mov	r1, r6
 800544a:	4680      	mov	r8, r0
 800544c:	4638      	mov	r0, r7
 800544e:	f7ff fe53 	bl	80050f8 <_Bfree>
 8005452:	4646      	mov	r6, r8
 8005454:	106d      	asrs	r5, r5, #1
 8005456:	d00b      	beq.n	8005470 <__pow5mult+0xa0>
 8005458:	6820      	ldr	r0, [r4, #0]
 800545a:	b938      	cbnz	r0, 800546c <__pow5mult+0x9c>
 800545c:	4622      	mov	r2, r4
 800545e:	4621      	mov	r1, r4
 8005460:	4638      	mov	r0, r7
 8005462:	f7ff ff13 	bl	800528c <__multiply>
 8005466:	6020      	str	r0, [r4, #0]
 8005468:	f8c0 9000 	str.w	r9, [r0]
 800546c:	4604      	mov	r4, r0
 800546e:	e7e4      	b.n	800543a <__pow5mult+0x6a>
 8005470:	4630      	mov	r0, r6
 8005472:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005476:	bf00      	nop
 8005478:	080060cc 	.word	0x080060cc
 800547c:	08005f99 	.word	0x08005f99
 8005480:	08006019 	.word	0x08006019

08005484 <__lshift>:
 8005484:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005488:	460c      	mov	r4, r1
 800548a:	6849      	ldr	r1, [r1, #4]
 800548c:	6923      	ldr	r3, [r4, #16]
 800548e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005492:	68a3      	ldr	r3, [r4, #8]
 8005494:	4607      	mov	r7, r0
 8005496:	4691      	mov	r9, r2
 8005498:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800549c:	f108 0601 	add.w	r6, r8, #1
 80054a0:	42b3      	cmp	r3, r6
 80054a2:	db0b      	blt.n	80054bc <__lshift+0x38>
 80054a4:	4638      	mov	r0, r7
 80054a6:	f7ff fde7 	bl	8005078 <_Balloc>
 80054aa:	4605      	mov	r5, r0
 80054ac:	b948      	cbnz	r0, 80054c2 <__lshift+0x3e>
 80054ae:	4602      	mov	r2, r0
 80054b0:	4b28      	ldr	r3, [pc, #160]	@ (8005554 <__lshift+0xd0>)
 80054b2:	4829      	ldr	r0, [pc, #164]	@ (8005558 <__lshift+0xd4>)
 80054b4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80054b8:	f000 fa22 	bl	8005900 <__assert_func>
 80054bc:	3101      	adds	r1, #1
 80054be:	005b      	lsls	r3, r3, #1
 80054c0:	e7ee      	b.n	80054a0 <__lshift+0x1c>
 80054c2:	2300      	movs	r3, #0
 80054c4:	f100 0114 	add.w	r1, r0, #20
 80054c8:	f100 0210 	add.w	r2, r0, #16
 80054cc:	4618      	mov	r0, r3
 80054ce:	4553      	cmp	r3, sl
 80054d0:	db33      	blt.n	800553a <__lshift+0xb6>
 80054d2:	6920      	ldr	r0, [r4, #16]
 80054d4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80054d8:	f104 0314 	add.w	r3, r4, #20
 80054dc:	f019 091f 	ands.w	r9, r9, #31
 80054e0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80054e4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80054e8:	d02b      	beq.n	8005542 <__lshift+0xbe>
 80054ea:	f1c9 0e20 	rsb	lr, r9, #32
 80054ee:	468a      	mov	sl, r1
 80054f0:	2200      	movs	r2, #0
 80054f2:	6818      	ldr	r0, [r3, #0]
 80054f4:	fa00 f009 	lsl.w	r0, r0, r9
 80054f8:	4310      	orrs	r0, r2
 80054fa:	f84a 0b04 	str.w	r0, [sl], #4
 80054fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8005502:	459c      	cmp	ip, r3
 8005504:	fa22 f20e 	lsr.w	r2, r2, lr
 8005508:	d8f3      	bhi.n	80054f2 <__lshift+0x6e>
 800550a:	ebac 0304 	sub.w	r3, ip, r4
 800550e:	3b15      	subs	r3, #21
 8005510:	f023 0303 	bic.w	r3, r3, #3
 8005514:	3304      	adds	r3, #4
 8005516:	f104 0015 	add.w	r0, r4, #21
 800551a:	4560      	cmp	r0, ip
 800551c:	bf88      	it	hi
 800551e:	2304      	movhi	r3, #4
 8005520:	50ca      	str	r2, [r1, r3]
 8005522:	b10a      	cbz	r2, 8005528 <__lshift+0xa4>
 8005524:	f108 0602 	add.w	r6, r8, #2
 8005528:	3e01      	subs	r6, #1
 800552a:	4638      	mov	r0, r7
 800552c:	612e      	str	r6, [r5, #16]
 800552e:	4621      	mov	r1, r4
 8005530:	f7ff fde2 	bl	80050f8 <_Bfree>
 8005534:	4628      	mov	r0, r5
 8005536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800553a:	f842 0f04 	str.w	r0, [r2, #4]!
 800553e:	3301      	adds	r3, #1
 8005540:	e7c5      	b.n	80054ce <__lshift+0x4a>
 8005542:	3904      	subs	r1, #4
 8005544:	f853 2b04 	ldr.w	r2, [r3], #4
 8005548:	f841 2f04 	str.w	r2, [r1, #4]!
 800554c:	459c      	cmp	ip, r3
 800554e:	d8f9      	bhi.n	8005544 <__lshift+0xc0>
 8005550:	e7ea      	b.n	8005528 <__lshift+0xa4>
 8005552:	bf00      	nop
 8005554:	08006008 	.word	0x08006008
 8005558:	08006019 	.word	0x08006019

0800555c <__mcmp>:
 800555c:	690a      	ldr	r2, [r1, #16]
 800555e:	4603      	mov	r3, r0
 8005560:	6900      	ldr	r0, [r0, #16]
 8005562:	1a80      	subs	r0, r0, r2
 8005564:	b530      	push	{r4, r5, lr}
 8005566:	d10e      	bne.n	8005586 <__mcmp+0x2a>
 8005568:	3314      	adds	r3, #20
 800556a:	3114      	adds	r1, #20
 800556c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005570:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005574:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005578:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800557c:	4295      	cmp	r5, r2
 800557e:	d003      	beq.n	8005588 <__mcmp+0x2c>
 8005580:	d205      	bcs.n	800558e <__mcmp+0x32>
 8005582:	f04f 30ff 	mov.w	r0, #4294967295
 8005586:	bd30      	pop	{r4, r5, pc}
 8005588:	42a3      	cmp	r3, r4
 800558a:	d3f3      	bcc.n	8005574 <__mcmp+0x18>
 800558c:	e7fb      	b.n	8005586 <__mcmp+0x2a>
 800558e:	2001      	movs	r0, #1
 8005590:	e7f9      	b.n	8005586 <__mcmp+0x2a>
	...

08005594 <__mdiff>:
 8005594:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005598:	4689      	mov	r9, r1
 800559a:	4606      	mov	r6, r0
 800559c:	4611      	mov	r1, r2
 800559e:	4648      	mov	r0, r9
 80055a0:	4614      	mov	r4, r2
 80055a2:	f7ff ffdb 	bl	800555c <__mcmp>
 80055a6:	1e05      	subs	r5, r0, #0
 80055a8:	d112      	bne.n	80055d0 <__mdiff+0x3c>
 80055aa:	4629      	mov	r1, r5
 80055ac:	4630      	mov	r0, r6
 80055ae:	f7ff fd63 	bl	8005078 <_Balloc>
 80055b2:	4602      	mov	r2, r0
 80055b4:	b928      	cbnz	r0, 80055c2 <__mdiff+0x2e>
 80055b6:	4b3f      	ldr	r3, [pc, #252]	@ (80056b4 <__mdiff+0x120>)
 80055b8:	f240 2137 	movw	r1, #567	@ 0x237
 80055bc:	483e      	ldr	r0, [pc, #248]	@ (80056b8 <__mdiff+0x124>)
 80055be:	f000 f99f 	bl	8005900 <__assert_func>
 80055c2:	2301      	movs	r3, #1
 80055c4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80055c8:	4610      	mov	r0, r2
 80055ca:	b003      	add	sp, #12
 80055cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055d0:	bfbc      	itt	lt
 80055d2:	464b      	movlt	r3, r9
 80055d4:	46a1      	movlt	r9, r4
 80055d6:	4630      	mov	r0, r6
 80055d8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80055dc:	bfba      	itte	lt
 80055de:	461c      	movlt	r4, r3
 80055e0:	2501      	movlt	r5, #1
 80055e2:	2500      	movge	r5, #0
 80055e4:	f7ff fd48 	bl	8005078 <_Balloc>
 80055e8:	4602      	mov	r2, r0
 80055ea:	b918      	cbnz	r0, 80055f4 <__mdiff+0x60>
 80055ec:	4b31      	ldr	r3, [pc, #196]	@ (80056b4 <__mdiff+0x120>)
 80055ee:	f240 2145 	movw	r1, #581	@ 0x245
 80055f2:	e7e3      	b.n	80055bc <__mdiff+0x28>
 80055f4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80055f8:	6926      	ldr	r6, [r4, #16]
 80055fa:	60c5      	str	r5, [r0, #12]
 80055fc:	f109 0310 	add.w	r3, r9, #16
 8005600:	f109 0514 	add.w	r5, r9, #20
 8005604:	f104 0e14 	add.w	lr, r4, #20
 8005608:	f100 0b14 	add.w	fp, r0, #20
 800560c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8005610:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8005614:	9301      	str	r3, [sp, #4]
 8005616:	46d9      	mov	r9, fp
 8005618:	f04f 0c00 	mov.w	ip, #0
 800561c:	9b01      	ldr	r3, [sp, #4]
 800561e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8005622:	f853 af04 	ldr.w	sl, [r3, #4]!
 8005626:	9301      	str	r3, [sp, #4]
 8005628:	fa1f f38a 	uxth.w	r3, sl
 800562c:	4619      	mov	r1, r3
 800562e:	b283      	uxth	r3, r0
 8005630:	1acb      	subs	r3, r1, r3
 8005632:	0c00      	lsrs	r0, r0, #16
 8005634:	4463      	add	r3, ip
 8005636:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800563a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800563e:	b29b      	uxth	r3, r3
 8005640:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8005644:	4576      	cmp	r6, lr
 8005646:	f849 3b04 	str.w	r3, [r9], #4
 800564a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800564e:	d8e5      	bhi.n	800561c <__mdiff+0x88>
 8005650:	1b33      	subs	r3, r6, r4
 8005652:	3b15      	subs	r3, #21
 8005654:	f023 0303 	bic.w	r3, r3, #3
 8005658:	3415      	adds	r4, #21
 800565a:	3304      	adds	r3, #4
 800565c:	42a6      	cmp	r6, r4
 800565e:	bf38      	it	cc
 8005660:	2304      	movcc	r3, #4
 8005662:	441d      	add	r5, r3
 8005664:	445b      	add	r3, fp
 8005666:	461e      	mov	r6, r3
 8005668:	462c      	mov	r4, r5
 800566a:	4544      	cmp	r4, r8
 800566c:	d30e      	bcc.n	800568c <__mdiff+0xf8>
 800566e:	f108 0103 	add.w	r1, r8, #3
 8005672:	1b49      	subs	r1, r1, r5
 8005674:	f021 0103 	bic.w	r1, r1, #3
 8005678:	3d03      	subs	r5, #3
 800567a:	45a8      	cmp	r8, r5
 800567c:	bf38      	it	cc
 800567e:	2100      	movcc	r1, #0
 8005680:	440b      	add	r3, r1
 8005682:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005686:	b191      	cbz	r1, 80056ae <__mdiff+0x11a>
 8005688:	6117      	str	r7, [r2, #16]
 800568a:	e79d      	b.n	80055c8 <__mdiff+0x34>
 800568c:	f854 1b04 	ldr.w	r1, [r4], #4
 8005690:	46e6      	mov	lr, ip
 8005692:	0c08      	lsrs	r0, r1, #16
 8005694:	fa1c fc81 	uxtah	ip, ip, r1
 8005698:	4471      	add	r1, lr
 800569a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800569e:	b289      	uxth	r1, r1
 80056a0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80056a4:	f846 1b04 	str.w	r1, [r6], #4
 80056a8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80056ac:	e7dd      	b.n	800566a <__mdiff+0xd6>
 80056ae:	3f01      	subs	r7, #1
 80056b0:	e7e7      	b.n	8005682 <__mdiff+0xee>
 80056b2:	bf00      	nop
 80056b4:	08006008 	.word	0x08006008
 80056b8:	08006019 	.word	0x08006019

080056bc <__d2b>:
 80056bc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80056c0:	460f      	mov	r7, r1
 80056c2:	2101      	movs	r1, #1
 80056c4:	ec59 8b10 	vmov	r8, r9, d0
 80056c8:	4616      	mov	r6, r2
 80056ca:	f7ff fcd5 	bl	8005078 <_Balloc>
 80056ce:	4604      	mov	r4, r0
 80056d0:	b930      	cbnz	r0, 80056e0 <__d2b+0x24>
 80056d2:	4602      	mov	r2, r0
 80056d4:	4b23      	ldr	r3, [pc, #140]	@ (8005764 <__d2b+0xa8>)
 80056d6:	4824      	ldr	r0, [pc, #144]	@ (8005768 <__d2b+0xac>)
 80056d8:	f240 310f 	movw	r1, #783	@ 0x30f
 80056dc:	f000 f910 	bl	8005900 <__assert_func>
 80056e0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80056e4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80056e8:	b10d      	cbz	r5, 80056ee <__d2b+0x32>
 80056ea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80056ee:	9301      	str	r3, [sp, #4]
 80056f0:	f1b8 0300 	subs.w	r3, r8, #0
 80056f4:	d023      	beq.n	800573e <__d2b+0x82>
 80056f6:	4668      	mov	r0, sp
 80056f8:	9300      	str	r3, [sp, #0]
 80056fa:	f7ff fd84 	bl	8005206 <__lo0bits>
 80056fe:	e9dd 1200 	ldrd	r1, r2, [sp]
 8005702:	b1d0      	cbz	r0, 800573a <__d2b+0x7e>
 8005704:	f1c0 0320 	rsb	r3, r0, #32
 8005708:	fa02 f303 	lsl.w	r3, r2, r3
 800570c:	430b      	orrs	r3, r1
 800570e:	40c2      	lsrs	r2, r0
 8005710:	6163      	str	r3, [r4, #20]
 8005712:	9201      	str	r2, [sp, #4]
 8005714:	9b01      	ldr	r3, [sp, #4]
 8005716:	61a3      	str	r3, [r4, #24]
 8005718:	2b00      	cmp	r3, #0
 800571a:	bf0c      	ite	eq
 800571c:	2201      	moveq	r2, #1
 800571e:	2202      	movne	r2, #2
 8005720:	6122      	str	r2, [r4, #16]
 8005722:	b1a5      	cbz	r5, 800574e <__d2b+0x92>
 8005724:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8005728:	4405      	add	r5, r0
 800572a:	603d      	str	r5, [r7, #0]
 800572c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8005730:	6030      	str	r0, [r6, #0]
 8005732:	4620      	mov	r0, r4
 8005734:	b003      	add	sp, #12
 8005736:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800573a:	6161      	str	r1, [r4, #20]
 800573c:	e7ea      	b.n	8005714 <__d2b+0x58>
 800573e:	a801      	add	r0, sp, #4
 8005740:	f7ff fd61 	bl	8005206 <__lo0bits>
 8005744:	9b01      	ldr	r3, [sp, #4]
 8005746:	6163      	str	r3, [r4, #20]
 8005748:	3020      	adds	r0, #32
 800574a:	2201      	movs	r2, #1
 800574c:	e7e8      	b.n	8005720 <__d2b+0x64>
 800574e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005752:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8005756:	6038      	str	r0, [r7, #0]
 8005758:	6918      	ldr	r0, [r3, #16]
 800575a:	f7ff fd35 	bl	80051c8 <__hi0bits>
 800575e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005762:	e7e5      	b.n	8005730 <__d2b+0x74>
 8005764:	08006008 	.word	0x08006008
 8005768:	08006019 	.word	0x08006019

0800576c <__sflush_r>:
 800576c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005770:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005774:	0716      	lsls	r6, r2, #28
 8005776:	4605      	mov	r5, r0
 8005778:	460c      	mov	r4, r1
 800577a:	d454      	bmi.n	8005826 <__sflush_r+0xba>
 800577c:	684b      	ldr	r3, [r1, #4]
 800577e:	2b00      	cmp	r3, #0
 8005780:	dc02      	bgt.n	8005788 <__sflush_r+0x1c>
 8005782:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005784:	2b00      	cmp	r3, #0
 8005786:	dd48      	ble.n	800581a <__sflush_r+0xae>
 8005788:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800578a:	2e00      	cmp	r6, #0
 800578c:	d045      	beq.n	800581a <__sflush_r+0xae>
 800578e:	2300      	movs	r3, #0
 8005790:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005794:	682f      	ldr	r7, [r5, #0]
 8005796:	6a21      	ldr	r1, [r4, #32]
 8005798:	602b      	str	r3, [r5, #0]
 800579a:	d030      	beq.n	80057fe <__sflush_r+0x92>
 800579c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800579e:	89a3      	ldrh	r3, [r4, #12]
 80057a0:	0759      	lsls	r1, r3, #29
 80057a2:	d505      	bpl.n	80057b0 <__sflush_r+0x44>
 80057a4:	6863      	ldr	r3, [r4, #4]
 80057a6:	1ad2      	subs	r2, r2, r3
 80057a8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80057aa:	b10b      	cbz	r3, 80057b0 <__sflush_r+0x44>
 80057ac:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80057ae:	1ad2      	subs	r2, r2, r3
 80057b0:	2300      	movs	r3, #0
 80057b2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80057b4:	6a21      	ldr	r1, [r4, #32]
 80057b6:	4628      	mov	r0, r5
 80057b8:	47b0      	blx	r6
 80057ba:	1c43      	adds	r3, r0, #1
 80057bc:	89a3      	ldrh	r3, [r4, #12]
 80057be:	d106      	bne.n	80057ce <__sflush_r+0x62>
 80057c0:	6829      	ldr	r1, [r5, #0]
 80057c2:	291d      	cmp	r1, #29
 80057c4:	d82b      	bhi.n	800581e <__sflush_r+0xb2>
 80057c6:	4a2a      	ldr	r2, [pc, #168]	@ (8005870 <__sflush_r+0x104>)
 80057c8:	40ca      	lsrs	r2, r1
 80057ca:	07d6      	lsls	r6, r2, #31
 80057cc:	d527      	bpl.n	800581e <__sflush_r+0xb2>
 80057ce:	2200      	movs	r2, #0
 80057d0:	6062      	str	r2, [r4, #4]
 80057d2:	04d9      	lsls	r1, r3, #19
 80057d4:	6922      	ldr	r2, [r4, #16]
 80057d6:	6022      	str	r2, [r4, #0]
 80057d8:	d504      	bpl.n	80057e4 <__sflush_r+0x78>
 80057da:	1c42      	adds	r2, r0, #1
 80057dc:	d101      	bne.n	80057e2 <__sflush_r+0x76>
 80057de:	682b      	ldr	r3, [r5, #0]
 80057e0:	b903      	cbnz	r3, 80057e4 <__sflush_r+0x78>
 80057e2:	6560      	str	r0, [r4, #84]	@ 0x54
 80057e4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80057e6:	602f      	str	r7, [r5, #0]
 80057e8:	b1b9      	cbz	r1, 800581a <__sflush_r+0xae>
 80057ea:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80057ee:	4299      	cmp	r1, r3
 80057f0:	d002      	beq.n	80057f8 <__sflush_r+0x8c>
 80057f2:	4628      	mov	r0, r5
 80057f4:	f7ff fb40 	bl	8004e78 <_free_r>
 80057f8:	2300      	movs	r3, #0
 80057fa:	6363      	str	r3, [r4, #52]	@ 0x34
 80057fc:	e00d      	b.n	800581a <__sflush_r+0xae>
 80057fe:	2301      	movs	r3, #1
 8005800:	4628      	mov	r0, r5
 8005802:	47b0      	blx	r6
 8005804:	4602      	mov	r2, r0
 8005806:	1c50      	adds	r0, r2, #1
 8005808:	d1c9      	bne.n	800579e <__sflush_r+0x32>
 800580a:	682b      	ldr	r3, [r5, #0]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d0c6      	beq.n	800579e <__sflush_r+0x32>
 8005810:	2b1d      	cmp	r3, #29
 8005812:	d001      	beq.n	8005818 <__sflush_r+0xac>
 8005814:	2b16      	cmp	r3, #22
 8005816:	d11e      	bne.n	8005856 <__sflush_r+0xea>
 8005818:	602f      	str	r7, [r5, #0]
 800581a:	2000      	movs	r0, #0
 800581c:	e022      	b.n	8005864 <__sflush_r+0xf8>
 800581e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005822:	b21b      	sxth	r3, r3
 8005824:	e01b      	b.n	800585e <__sflush_r+0xf2>
 8005826:	690f      	ldr	r7, [r1, #16]
 8005828:	2f00      	cmp	r7, #0
 800582a:	d0f6      	beq.n	800581a <__sflush_r+0xae>
 800582c:	0793      	lsls	r3, r2, #30
 800582e:	680e      	ldr	r6, [r1, #0]
 8005830:	bf08      	it	eq
 8005832:	694b      	ldreq	r3, [r1, #20]
 8005834:	600f      	str	r7, [r1, #0]
 8005836:	bf18      	it	ne
 8005838:	2300      	movne	r3, #0
 800583a:	eba6 0807 	sub.w	r8, r6, r7
 800583e:	608b      	str	r3, [r1, #8]
 8005840:	f1b8 0f00 	cmp.w	r8, #0
 8005844:	dde9      	ble.n	800581a <__sflush_r+0xae>
 8005846:	6a21      	ldr	r1, [r4, #32]
 8005848:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800584a:	4643      	mov	r3, r8
 800584c:	463a      	mov	r2, r7
 800584e:	4628      	mov	r0, r5
 8005850:	47b0      	blx	r6
 8005852:	2800      	cmp	r0, #0
 8005854:	dc08      	bgt.n	8005868 <__sflush_r+0xfc>
 8005856:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800585a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800585e:	81a3      	strh	r3, [r4, #12]
 8005860:	f04f 30ff 	mov.w	r0, #4294967295
 8005864:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005868:	4407      	add	r7, r0
 800586a:	eba8 0800 	sub.w	r8, r8, r0
 800586e:	e7e7      	b.n	8005840 <__sflush_r+0xd4>
 8005870:	20400001 	.word	0x20400001

08005874 <_fflush_r>:
 8005874:	b538      	push	{r3, r4, r5, lr}
 8005876:	690b      	ldr	r3, [r1, #16]
 8005878:	4605      	mov	r5, r0
 800587a:	460c      	mov	r4, r1
 800587c:	b913      	cbnz	r3, 8005884 <_fflush_r+0x10>
 800587e:	2500      	movs	r5, #0
 8005880:	4628      	mov	r0, r5
 8005882:	bd38      	pop	{r3, r4, r5, pc}
 8005884:	b118      	cbz	r0, 800588e <_fflush_r+0x1a>
 8005886:	6a03      	ldr	r3, [r0, #32]
 8005888:	b90b      	cbnz	r3, 800588e <_fflush_r+0x1a>
 800588a:	f7fe fba3 	bl	8003fd4 <__sinit>
 800588e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d0f3      	beq.n	800587e <_fflush_r+0xa>
 8005896:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005898:	07d0      	lsls	r0, r2, #31
 800589a:	d404      	bmi.n	80058a6 <_fflush_r+0x32>
 800589c:	0599      	lsls	r1, r3, #22
 800589e:	d402      	bmi.n	80058a6 <_fflush_r+0x32>
 80058a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80058a2:	f7fe fc8e 	bl	80041c2 <__retarget_lock_acquire_recursive>
 80058a6:	4628      	mov	r0, r5
 80058a8:	4621      	mov	r1, r4
 80058aa:	f7ff ff5f 	bl	800576c <__sflush_r>
 80058ae:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80058b0:	07da      	lsls	r2, r3, #31
 80058b2:	4605      	mov	r5, r0
 80058b4:	d4e4      	bmi.n	8005880 <_fflush_r+0xc>
 80058b6:	89a3      	ldrh	r3, [r4, #12]
 80058b8:	059b      	lsls	r3, r3, #22
 80058ba:	d4e1      	bmi.n	8005880 <_fflush_r+0xc>
 80058bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80058be:	f7fe fc81 	bl	80041c4 <__retarget_lock_release_recursive>
 80058c2:	e7dd      	b.n	8005880 <_fflush_r+0xc>

080058c4 <_sbrk_r>:
 80058c4:	b538      	push	{r3, r4, r5, lr}
 80058c6:	4d06      	ldr	r5, [pc, #24]	@ (80058e0 <_sbrk_r+0x1c>)
 80058c8:	2300      	movs	r3, #0
 80058ca:	4604      	mov	r4, r0
 80058cc:	4608      	mov	r0, r1
 80058ce:	602b      	str	r3, [r5, #0]
 80058d0:	f7fd fe40 	bl	8003554 <_sbrk>
 80058d4:	1c43      	adds	r3, r0, #1
 80058d6:	d102      	bne.n	80058de <_sbrk_r+0x1a>
 80058d8:	682b      	ldr	r3, [r5, #0]
 80058da:	b103      	cbz	r3, 80058de <_sbrk_r+0x1a>
 80058dc:	6023      	str	r3, [r4, #0]
 80058de:	bd38      	pop	{r3, r4, r5, pc}
 80058e0:	20000424 	.word	0x20000424

080058e4 <memcpy>:
 80058e4:	440a      	add	r2, r1
 80058e6:	4291      	cmp	r1, r2
 80058e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80058ec:	d100      	bne.n	80058f0 <memcpy+0xc>
 80058ee:	4770      	bx	lr
 80058f0:	b510      	push	{r4, lr}
 80058f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80058f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80058fa:	4291      	cmp	r1, r2
 80058fc:	d1f9      	bne.n	80058f2 <memcpy+0xe>
 80058fe:	bd10      	pop	{r4, pc}

08005900 <__assert_func>:
 8005900:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005902:	4614      	mov	r4, r2
 8005904:	461a      	mov	r2, r3
 8005906:	4b09      	ldr	r3, [pc, #36]	@ (800592c <__assert_func+0x2c>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4605      	mov	r5, r0
 800590c:	68d8      	ldr	r0, [r3, #12]
 800590e:	b14c      	cbz	r4, 8005924 <__assert_func+0x24>
 8005910:	4b07      	ldr	r3, [pc, #28]	@ (8005930 <__assert_func+0x30>)
 8005912:	9100      	str	r1, [sp, #0]
 8005914:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005918:	4906      	ldr	r1, [pc, #24]	@ (8005934 <__assert_func+0x34>)
 800591a:	462b      	mov	r3, r5
 800591c:	f000 f842 	bl	80059a4 <fiprintf>
 8005920:	f000 f852 	bl	80059c8 <abort>
 8005924:	4b04      	ldr	r3, [pc, #16]	@ (8005938 <__assert_func+0x38>)
 8005926:	461c      	mov	r4, r3
 8005928:	e7f3      	b.n	8005912 <__assert_func+0x12>
 800592a:	bf00      	nop
 800592c:	20000010 	.word	0x20000010
 8005930:	0800607c 	.word	0x0800607c
 8005934:	08006089 	.word	0x08006089
 8005938:	080060b7 	.word	0x080060b7

0800593c <_calloc_r>:
 800593c:	b570      	push	{r4, r5, r6, lr}
 800593e:	fba1 5402 	umull	r5, r4, r1, r2
 8005942:	b934      	cbnz	r4, 8005952 <_calloc_r+0x16>
 8005944:	4629      	mov	r1, r5
 8005946:	f7ff fb0b 	bl	8004f60 <_malloc_r>
 800594a:	4606      	mov	r6, r0
 800594c:	b928      	cbnz	r0, 800595a <_calloc_r+0x1e>
 800594e:	4630      	mov	r0, r6
 8005950:	bd70      	pop	{r4, r5, r6, pc}
 8005952:	220c      	movs	r2, #12
 8005954:	6002      	str	r2, [r0, #0]
 8005956:	2600      	movs	r6, #0
 8005958:	e7f9      	b.n	800594e <_calloc_r+0x12>
 800595a:	462a      	mov	r2, r5
 800595c:	4621      	mov	r1, r4
 800595e:	f7fe fbb2 	bl	80040c6 <memset>
 8005962:	e7f4      	b.n	800594e <_calloc_r+0x12>

08005964 <__ascii_mbtowc>:
 8005964:	b082      	sub	sp, #8
 8005966:	b901      	cbnz	r1, 800596a <__ascii_mbtowc+0x6>
 8005968:	a901      	add	r1, sp, #4
 800596a:	b142      	cbz	r2, 800597e <__ascii_mbtowc+0x1a>
 800596c:	b14b      	cbz	r3, 8005982 <__ascii_mbtowc+0x1e>
 800596e:	7813      	ldrb	r3, [r2, #0]
 8005970:	600b      	str	r3, [r1, #0]
 8005972:	7812      	ldrb	r2, [r2, #0]
 8005974:	1e10      	subs	r0, r2, #0
 8005976:	bf18      	it	ne
 8005978:	2001      	movne	r0, #1
 800597a:	b002      	add	sp, #8
 800597c:	4770      	bx	lr
 800597e:	4610      	mov	r0, r2
 8005980:	e7fb      	b.n	800597a <__ascii_mbtowc+0x16>
 8005982:	f06f 0001 	mvn.w	r0, #1
 8005986:	e7f8      	b.n	800597a <__ascii_mbtowc+0x16>

08005988 <__ascii_wctomb>:
 8005988:	4603      	mov	r3, r0
 800598a:	4608      	mov	r0, r1
 800598c:	b141      	cbz	r1, 80059a0 <__ascii_wctomb+0x18>
 800598e:	2aff      	cmp	r2, #255	@ 0xff
 8005990:	d904      	bls.n	800599c <__ascii_wctomb+0x14>
 8005992:	228a      	movs	r2, #138	@ 0x8a
 8005994:	601a      	str	r2, [r3, #0]
 8005996:	f04f 30ff 	mov.w	r0, #4294967295
 800599a:	4770      	bx	lr
 800599c:	700a      	strb	r2, [r1, #0]
 800599e:	2001      	movs	r0, #1
 80059a0:	4770      	bx	lr
	...

080059a4 <fiprintf>:
 80059a4:	b40e      	push	{r1, r2, r3}
 80059a6:	b503      	push	{r0, r1, lr}
 80059a8:	4601      	mov	r1, r0
 80059aa:	ab03      	add	r3, sp, #12
 80059ac:	4805      	ldr	r0, [pc, #20]	@ (80059c4 <fiprintf+0x20>)
 80059ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80059b2:	6800      	ldr	r0, [r0, #0]
 80059b4:	9301      	str	r3, [sp, #4]
 80059b6:	f000 f837 	bl	8005a28 <_vfiprintf_r>
 80059ba:	b002      	add	sp, #8
 80059bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80059c0:	b003      	add	sp, #12
 80059c2:	4770      	bx	lr
 80059c4:	20000010 	.word	0x20000010

080059c8 <abort>:
 80059c8:	b508      	push	{r3, lr}
 80059ca:	2006      	movs	r0, #6
 80059cc:	f000 fa00 	bl	8005dd0 <raise>
 80059d0:	2001      	movs	r0, #1
 80059d2:	f7fd fd47 	bl	8003464 <_exit>

080059d6 <__sfputc_r>:
 80059d6:	6893      	ldr	r3, [r2, #8]
 80059d8:	3b01      	subs	r3, #1
 80059da:	2b00      	cmp	r3, #0
 80059dc:	b410      	push	{r4}
 80059de:	6093      	str	r3, [r2, #8]
 80059e0:	da08      	bge.n	80059f4 <__sfputc_r+0x1e>
 80059e2:	6994      	ldr	r4, [r2, #24]
 80059e4:	42a3      	cmp	r3, r4
 80059e6:	db01      	blt.n	80059ec <__sfputc_r+0x16>
 80059e8:	290a      	cmp	r1, #10
 80059ea:	d103      	bne.n	80059f4 <__sfputc_r+0x1e>
 80059ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 80059f0:	f000 b932 	b.w	8005c58 <__swbuf_r>
 80059f4:	6813      	ldr	r3, [r2, #0]
 80059f6:	1c58      	adds	r0, r3, #1
 80059f8:	6010      	str	r0, [r2, #0]
 80059fa:	7019      	strb	r1, [r3, #0]
 80059fc:	4608      	mov	r0, r1
 80059fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005a02:	4770      	bx	lr

08005a04 <__sfputs_r>:
 8005a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a06:	4606      	mov	r6, r0
 8005a08:	460f      	mov	r7, r1
 8005a0a:	4614      	mov	r4, r2
 8005a0c:	18d5      	adds	r5, r2, r3
 8005a0e:	42ac      	cmp	r4, r5
 8005a10:	d101      	bne.n	8005a16 <__sfputs_r+0x12>
 8005a12:	2000      	movs	r0, #0
 8005a14:	e007      	b.n	8005a26 <__sfputs_r+0x22>
 8005a16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a1a:	463a      	mov	r2, r7
 8005a1c:	4630      	mov	r0, r6
 8005a1e:	f7ff ffda 	bl	80059d6 <__sfputc_r>
 8005a22:	1c43      	adds	r3, r0, #1
 8005a24:	d1f3      	bne.n	8005a0e <__sfputs_r+0xa>
 8005a26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005a28 <_vfiprintf_r>:
 8005a28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a2c:	460d      	mov	r5, r1
 8005a2e:	b09d      	sub	sp, #116	@ 0x74
 8005a30:	4614      	mov	r4, r2
 8005a32:	4698      	mov	r8, r3
 8005a34:	4606      	mov	r6, r0
 8005a36:	b118      	cbz	r0, 8005a40 <_vfiprintf_r+0x18>
 8005a38:	6a03      	ldr	r3, [r0, #32]
 8005a3a:	b90b      	cbnz	r3, 8005a40 <_vfiprintf_r+0x18>
 8005a3c:	f7fe faca 	bl	8003fd4 <__sinit>
 8005a40:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005a42:	07d9      	lsls	r1, r3, #31
 8005a44:	d405      	bmi.n	8005a52 <_vfiprintf_r+0x2a>
 8005a46:	89ab      	ldrh	r3, [r5, #12]
 8005a48:	059a      	lsls	r2, r3, #22
 8005a4a:	d402      	bmi.n	8005a52 <_vfiprintf_r+0x2a>
 8005a4c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005a4e:	f7fe fbb8 	bl	80041c2 <__retarget_lock_acquire_recursive>
 8005a52:	89ab      	ldrh	r3, [r5, #12]
 8005a54:	071b      	lsls	r3, r3, #28
 8005a56:	d501      	bpl.n	8005a5c <_vfiprintf_r+0x34>
 8005a58:	692b      	ldr	r3, [r5, #16]
 8005a5a:	b99b      	cbnz	r3, 8005a84 <_vfiprintf_r+0x5c>
 8005a5c:	4629      	mov	r1, r5
 8005a5e:	4630      	mov	r0, r6
 8005a60:	f000 f938 	bl	8005cd4 <__swsetup_r>
 8005a64:	b170      	cbz	r0, 8005a84 <_vfiprintf_r+0x5c>
 8005a66:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005a68:	07dc      	lsls	r4, r3, #31
 8005a6a:	d504      	bpl.n	8005a76 <_vfiprintf_r+0x4e>
 8005a6c:	f04f 30ff 	mov.w	r0, #4294967295
 8005a70:	b01d      	add	sp, #116	@ 0x74
 8005a72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a76:	89ab      	ldrh	r3, [r5, #12]
 8005a78:	0598      	lsls	r0, r3, #22
 8005a7a:	d4f7      	bmi.n	8005a6c <_vfiprintf_r+0x44>
 8005a7c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005a7e:	f7fe fba1 	bl	80041c4 <__retarget_lock_release_recursive>
 8005a82:	e7f3      	b.n	8005a6c <_vfiprintf_r+0x44>
 8005a84:	2300      	movs	r3, #0
 8005a86:	9309      	str	r3, [sp, #36]	@ 0x24
 8005a88:	2320      	movs	r3, #32
 8005a8a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005a8e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005a92:	2330      	movs	r3, #48	@ 0x30
 8005a94:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005c44 <_vfiprintf_r+0x21c>
 8005a98:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005a9c:	f04f 0901 	mov.w	r9, #1
 8005aa0:	4623      	mov	r3, r4
 8005aa2:	469a      	mov	sl, r3
 8005aa4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005aa8:	b10a      	cbz	r2, 8005aae <_vfiprintf_r+0x86>
 8005aaa:	2a25      	cmp	r2, #37	@ 0x25
 8005aac:	d1f9      	bne.n	8005aa2 <_vfiprintf_r+0x7a>
 8005aae:	ebba 0b04 	subs.w	fp, sl, r4
 8005ab2:	d00b      	beq.n	8005acc <_vfiprintf_r+0xa4>
 8005ab4:	465b      	mov	r3, fp
 8005ab6:	4622      	mov	r2, r4
 8005ab8:	4629      	mov	r1, r5
 8005aba:	4630      	mov	r0, r6
 8005abc:	f7ff ffa2 	bl	8005a04 <__sfputs_r>
 8005ac0:	3001      	adds	r0, #1
 8005ac2:	f000 80a7 	beq.w	8005c14 <_vfiprintf_r+0x1ec>
 8005ac6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005ac8:	445a      	add	r2, fp
 8005aca:	9209      	str	r2, [sp, #36]	@ 0x24
 8005acc:	f89a 3000 	ldrb.w	r3, [sl]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	f000 809f 	beq.w	8005c14 <_vfiprintf_r+0x1ec>
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	f04f 32ff 	mov.w	r2, #4294967295
 8005adc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005ae0:	f10a 0a01 	add.w	sl, sl, #1
 8005ae4:	9304      	str	r3, [sp, #16]
 8005ae6:	9307      	str	r3, [sp, #28]
 8005ae8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005aec:	931a      	str	r3, [sp, #104]	@ 0x68
 8005aee:	4654      	mov	r4, sl
 8005af0:	2205      	movs	r2, #5
 8005af2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005af6:	4853      	ldr	r0, [pc, #332]	@ (8005c44 <_vfiprintf_r+0x21c>)
 8005af8:	f7fa fb6a 	bl	80001d0 <memchr>
 8005afc:	9a04      	ldr	r2, [sp, #16]
 8005afe:	b9d8      	cbnz	r0, 8005b38 <_vfiprintf_r+0x110>
 8005b00:	06d1      	lsls	r1, r2, #27
 8005b02:	bf44      	itt	mi
 8005b04:	2320      	movmi	r3, #32
 8005b06:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005b0a:	0713      	lsls	r3, r2, #28
 8005b0c:	bf44      	itt	mi
 8005b0e:	232b      	movmi	r3, #43	@ 0x2b
 8005b10:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005b14:	f89a 3000 	ldrb.w	r3, [sl]
 8005b18:	2b2a      	cmp	r3, #42	@ 0x2a
 8005b1a:	d015      	beq.n	8005b48 <_vfiprintf_r+0x120>
 8005b1c:	9a07      	ldr	r2, [sp, #28]
 8005b1e:	4654      	mov	r4, sl
 8005b20:	2000      	movs	r0, #0
 8005b22:	f04f 0c0a 	mov.w	ip, #10
 8005b26:	4621      	mov	r1, r4
 8005b28:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005b2c:	3b30      	subs	r3, #48	@ 0x30
 8005b2e:	2b09      	cmp	r3, #9
 8005b30:	d94b      	bls.n	8005bca <_vfiprintf_r+0x1a2>
 8005b32:	b1b0      	cbz	r0, 8005b62 <_vfiprintf_r+0x13a>
 8005b34:	9207      	str	r2, [sp, #28]
 8005b36:	e014      	b.n	8005b62 <_vfiprintf_r+0x13a>
 8005b38:	eba0 0308 	sub.w	r3, r0, r8
 8005b3c:	fa09 f303 	lsl.w	r3, r9, r3
 8005b40:	4313      	orrs	r3, r2
 8005b42:	9304      	str	r3, [sp, #16]
 8005b44:	46a2      	mov	sl, r4
 8005b46:	e7d2      	b.n	8005aee <_vfiprintf_r+0xc6>
 8005b48:	9b03      	ldr	r3, [sp, #12]
 8005b4a:	1d19      	adds	r1, r3, #4
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	9103      	str	r1, [sp, #12]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	bfbb      	ittet	lt
 8005b54:	425b      	neglt	r3, r3
 8005b56:	f042 0202 	orrlt.w	r2, r2, #2
 8005b5a:	9307      	strge	r3, [sp, #28]
 8005b5c:	9307      	strlt	r3, [sp, #28]
 8005b5e:	bfb8      	it	lt
 8005b60:	9204      	strlt	r2, [sp, #16]
 8005b62:	7823      	ldrb	r3, [r4, #0]
 8005b64:	2b2e      	cmp	r3, #46	@ 0x2e
 8005b66:	d10a      	bne.n	8005b7e <_vfiprintf_r+0x156>
 8005b68:	7863      	ldrb	r3, [r4, #1]
 8005b6a:	2b2a      	cmp	r3, #42	@ 0x2a
 8005b6c:	d132      	bne.n	8005bd4 <_vfiprintf_r+0x1ac>
 8005b6e:	9b03      	ldr	r3, [sp, #12]
 8005b70:	1d1a      	adds	r2, r3, #4
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	9203      	str	r2, [sp, #12]
 8005b76:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005b7a:	3402      	adds	r4, #2
 8005b7c:	9305      	str	r3, [sp, #20]
 8005b7e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005c54 <_vfiprintf_r+0x22c>
 8005b82:	7821      	ldrb	r1, [r4, #0]
 8005b84:	2203      	movs	r2, #3
 8005b86:	4650      	mov	r0, sl
 8005b88:	f7fa fb22 	bl	80001d0 <memchr>
 8005b8c:	b138      	cbz	r0, 8005b9e <_vfiprintf_r+0x176>
 8005b8e:	9b04      	ldr	r3, [sp, #16]
 8005b90:	eba0 000a 	sub.w	r0, r0, sl
 8005b94:	2240      	movs	r2, #64	@ 0x40
 8005b96:	4082      	lsls	r2, r0
 8005b98:	4313      	orrs	r3, r2
 8005b9a:	3401      	adds	r4, #1
 8005b9c:	9304      	str	r3, [sp, #16]
 8005b9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ba2:	4829      	ldr	r0, [pc, #164]	@ (8005c48 <_vfiprintf_r+0x220>)
 8005ba4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005ba8:	2206      	movs	r2, #6
 8005baa:	f7fa fb11 	bl	80001d0 <memchr>
 8005bae:	2800      	cmp	r0, #0
 8005bb0:	d03f      	beq.n	8005c32 <_vfiprintf_r+0x20a>
 8005bb2:	4b26      	ldr	r3, [pc, #152]	@ (8005c4c <_vfiprintf_r+0x224>)
 8005bb4:	bb1b      	cbnz	r3, 8005bfe <_vfiprintf_r+0x1d6>
 8005bb6:	9b03      	ldr	r3, [sp, #12]
 8005bb8:	3307      	adds	r3, #7
 8005bba:	f023 0307 	bic.w	r3, r3, #7
 8005bbe:	3308      	adds	r3, #8
 8005bc0:	9303      	str	r3, [sp, #12]
 8005bc2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005bc4:	443b      	add	r3, r7
 8005bc6:	9309      	str	r3, [sp, #36]	@ 0x24
 8005bc8:	e76a      	b.n	8005aa0 <_vfiprintf_r+0x78>
 8005bca:	fb0c 3202 	mla	r2, ip, r2, r3
 8005bce:	460c      	mov	r4, r1
 8005bd0:	2001      	movs	r0, #1
 8005bd2:	e7a8      	b.n	8005b26 <_vfiprintf_r+0xfe>
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	3401      	adds	r4, #1
 8005bd8:	9305      	str	r3, [sp, #20]
 8005bda:	4619      	mov	r1, r3
 8005bdc:	f04f 0c0a 	mov.w	ip, #10
 8005be0:	4620      	mov	r0, r4
 8005be2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005be6:	3a30      	subs	r2, #48	@ 0x30
 8005be8:	2a09      	cmp	r2, #9
 8005bea:	d903      	bls.n	8005bf4 <_vfiprintf_r+0x1cc>
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d0c6      	beq.n	8005b7e <_vfiprintf_r+0x156>
 8005bf0:	9105      	str	r1, [sp, #20]
 8005bf2:	e7c4      	b.n	8005b7e <_vfiprintf_r+0x156>
 8005bf4:	fb0c 2101 	mla	r1, ip, r1, r2
 8005bf8:	4604      	mov	r4, r0
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	e7f0      	b.n	8005be0 <_vfiprintf_r+0x1b8>
 8005bfe:	ab03      	add	r3, sp, #12
 8005c00:	9300      	str	r3, [sp, #0]
 8005c02:	462a      	mov	r2, r5
 8005c04:	4b12      	ldr	r3, [pc, #72]	@ (8005c50 <_vfiprintf_r+0x228>)
 8005c06:	a904      	add	r1, sp, #16
 8005c08:	4630      	mov	r0, r6
 8005c0a:	f7fd fda1 	bl	8003750 <_printf_float>
 8005c0e:	4607      	mov	r7, r0
 8005c10:	1c78      	adds	r0, r7, #1
 8005c12:	d1d6      	bne.n	8005bc2 <_vfiprintf_r+0x19a>
 8005c14:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005c16:	07d9      	lsls	r1, r3, #31
 8005c18:	d405      	bmi.n	8005c26 <_vfiprintf_r+0x1fe>
 8005c1a:	89ab      	ldrh	r3, [r5, #12]
 8005c1c:	059a      	lsls	r2, r3, #22
 8005c1e:	d402      	bmi.n	8005c26 <_vfiprintf_r+0x1fe>
 8005c20:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005c22:	f7fe facf 	bl	80041c4 <__retarget_lock_release_recursive>
 8005c26:	89ab      	ldrh	r3, [r5, #12]
 8005c28:	065b      	lsls	r3, r3, #25
 8005c2a:	f53f af1f 	bmi.w	8005a6c <_vfiprintf_r+0x44>
 8005c2e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005c30:	e71e      	b.n	8005a70 <_vfiprintf_r+0x48>
 8005c32:	ab03      	add	r3, sp, #12
 8005c34:	9300      	str	r3, [sp, #0]
 8005c36:	462a      	mov	r2, r5
 8005c38:	4b05      	ldr	r3, [pc, #20]	@ (8005c50 <_vfiprintf_r+0x228>)
 8005c3a:	a904      	add	r1, sp, #16
 8005c3c:	4630      	mov	r0, r6
 8005c3e:	f7fe f81f 	bl	8003c80 <_printf_i>
 8005c42:	e7e4      	b.n	8005c0e <_vfiprintf_r+0x1e6>
 8005c44:	080060b8 	.word	0x080060b8
 8005c48:	080060c2 	.word	0x080060c2
 8005c4c:	08003751 	.word	0x08003751
 8005c50:	08005a05 	.word	0x08005a05
 8005c54:	080060be 	.word	0x080060be

08005c58 <__swbuf_r>:
 8005c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c5a:	460e      	mov	r6, r1
 8005c5c:	4614      	mov	r4, r2
 8005c5e:	4605      	mov	r5, r0
 8005c60:	b118      	cbz	r0, 8005c6a <__swbuf_r+0x12>
 8005c62:	6a03      	ldr	r3, [r0, #32]
 8005c64:	b90b      	cbnz	r3, 8005c6a <__swbuf_r+0x12>
 8005c66:	f7fe f9b5 	bl	8003fd4 <__sinit>
 8005c6a:	69a3      	ldr	r3, [r4, #24]
 8005c6c:	60a3      	str	r3, [r4, #8]
 8005c6e:	89a3      	ldrh	r3, [r4, #12]
 8005c70:	071a      	lsls	r2, r3, #28
 8005c72:	d501      	bpl.n	8005c78 <__swbuf_r+0x20>
 8005c74:	6923      	ldr	r3, [r4, #16]
 8005c76:	b943      	cbnz	r3, 8005c8a <__swbuf_r+0x32>
 8005c78:	4621      	mov	r1, r4
 8005c7a:	4628      	mov	r0, r5
 8005c7c:	f000 f82a 	bl	8005cd4 <__swsetup_r>
 8005c80:	b118      	cbz	r0, 8005c8a <__swbuf_r+0x32>
 8005c82:	f04f 37ff 	mov.w	r7, #4294967295
 8005c86:	4638      	mov	r0, r7
 8005c88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c8a:	6823      	ldr	r3, [r4, #0]
 8005c8c:	6922      	ldr	r2, [r4, #16]
 8005c8e:	1a98      	subs	r0, r3, r2
 8005c90:	6963      	ldr	r3, [r4, #20]
 8005c92:	b2f6      	uxtb	r6, r6
 8005c94:	4283      	cmp	r3, r0
 8005c96:	4637      	mov	r7, r6
 8005c98:	dc05      	bgt.n	8005ca6 <__swbuf_r+0x4e>
 8005c9a:	4621      	mov	r1, r4
 8005c9c:	4628      	mov	r0, r5
 8005c9e:	f7ff fde9 	bl	8005874 <_fflush_r>
 8005ca2:	2800      	cmp	r0, #0
 8005ca4:	d1ed      	bne.n	8005c82 <__swbuf_r+0x2a>
 8005ca6:	68a3      	ldr	r3, [r4, #8]
 8005ca8:	3b01      	subs	r3, #1
 8005caa:	60a3      	str	r3, [r4, #8]
 8005cac:	6823      	ldr	r3, [r4, #0]
 8005cae:	1c5a      	adds	r2, r3, #1
 8005cb0:	6022      	str	r2, [r4, #0]
 8005cb2:	701e      	strb	r6, [r3, #0]
 8005cb4:	6962      	ldr	r2, [r4, #20]
 8005cb6:	1c43      	adds	r3, r0, #1
 8005cb8:	429a      	cmp	r2, r3
 8005cba:	d004      	beq.n	8005cc6 <__swbuf_r+0x6e>
 8005cbc:	89a3      	ldrh	r3, [r4, #12]
 8005cbe:	07db      	lsls	r3, r3, #31
 8005cc0:	d5e1      	bpl.n	8005c86 <__swbuf_r+0x2e>
 8005cc2:	2e0a      	cmp	r6, #10
 8005cc4:	d1df      	bne.n	8005c86 <__swbuf_r+0x2e>
 8005cc6:	4621      	mov	r1, r4
 8005cc8:	4628      	mov	r0, r5
 8005cca:	f7ff fdd3 	bl	8005874 <_fflush_r>
 8005cce:	2800      	cmp	r0, #0
 8005cd0:	d0d9      	beq.n	8005c86 <__swbuf_r+0x2e>
 8005cd2:	e7d6      	b.n	8005c82 <__swbuf_r+0x2a>

08005cd4 <__swsetup_r>:
 8005cd4:	b538      	push	{r3, r4, r5, lr}
 8005cd6:	4b29      	ldr	r3, [pc, #164]	@ (8005d7c <__swsetup_r+0xa8>)
 8005cd8:	4605      	mov	r5, r0
 8005cda:	6818      	ldr	r0, [r3, #0]
 8005cdc:	460c      	mov	r4, r1
 8005cde:	b118      	cbz	r0, 8005ce8 <__swsetup_r+0x14>
 8005ce0:	6a03      	ldr	r3, [r0, #32]
 8005ce2:	b90b      	cbnz	r3, 8005ce8 <__swsetup_r+0x14>
 8005ce4:	f7fe f976 	bl	8003fd4 <__sinit>
 8005ce8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005cec:	0719      	lsls	r1, r3, #28
 8005cee:	d422      	bmi.n	8005d36 <__swsetup_r+0x62>
 8005cf0:	06da      	lsls	r2, r3, #27
 8005cf2:	d407      	bmi.n	8005d04 <__swsetup_r+0x30>
 8005cf4:	2209      	movs	r2, #9
 8005cf6:	602a      	str	r2, [r5, #0]
 8005cf8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005cfc:	81a3      	strh	r3, [r4, #12]
 8005cfe:	f04f 30ff 	mov.w	r0, #4294967295
 8005d02:	e033      	b.n	8005d6c <__swsetup_r+0x98>
 8005d04:	0758      	lsls	r0, r3, #29
 8005d06:	d512      	bpl.n	8005d2e <__swsetup_r+0x5a>
 8005d08:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005d0a:	b141      	cbz	r1, 8005d1e <__swsetup_r+0x4a>
 8005d0c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005d10:	4299      	cmp	r1, r3
 8005d12:	d002      	beq.n	8005d1a <__swsetup_r+0x46>
 8005d14:	4628      	mov	r0, r5
 8005d16:	f7ff f8af 	bl	8004e78 <_free_r>
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	6363      	str	r3, [r4, #52]	@ 0x34
 8005d1e:	89a3      	ldrh	r3, [r4, #12]
 8005d20:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005d24:	81a3      	strh	r3, [r4, #12]
 8005d26:	2300      	movs	r3, #0
 8005d28:	6063      	str	r3, [r4, #4]
 8005d2a:	6923      	ldr	r3, [r4, #16]
 8005d2c:	6023      	str	r3, [r4, #0]
 8005d2e:	89a3      	ldrh	r3, [r4, #12]
 8005d30:	f043 0308 	orr.w	r3, r3, #8
 8005d34:	81a3      	strh	r3, [r4, #12]
 8005d36:	6923      	ldr	r3, [r4, #16]
 8005d38:	b94b      	cbnz	r3, 8005d4e <__swsetup_r+0x7a>
 8005d3a:	89a3      	ldrh	r3, [r4, #12]
 8005d3c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005d40:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005d44:	d003      	beq.n	8005d4e <__swsetup_r+0x7a>
 8005d46:	4621      	mov	r1, r4
 8005d48:	4628      	mov	r0, r5
 8005d4a:	f000 f883 	bl	8005e54 <__smakebuf_r>
 8005d4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d52:	f013 0201 	ands.w	r2, r3, #1
 8005d56:	d00a      	beq.n	8005d6e <__swsetup_r+0x9a>
 8005d58:	2200      	movs	r2, #0
 8005d5a:	60a2      	str	r2, [r4, #8]
 8005d5c:	6962      	ldr	r2, [r4, #20]
 8005d5e:	4252      	negs	r2, r2
 8005d60:	61a2      	str	r2, [r4, #24]
 8005d62:	6922      	ldr	r2, [r4, #16]
 8005d64:	b942      	cbnz	r2, 8005d78 <__swsetup_r+0xa4>
 8005d66:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005d6a:	d1c5      	bne.n	8005cf8 <__swsetup_r+0x24>
 8005d6c:	bd38      	pop	{r3, r4, r5, pc}
 8005d6e:	0799      	lsls	r1, r3, #30
 8005d70:	bf58      	it	pl
 8005d72:	6962      	ldrpl	r2, [r4, #20]
 8005d74:	60a2      	str	r2, [r4, #8]
 8005d76:	e7f4      	b.n	8005d62 <__swsetup_r+0x8e>
 8005d78:	2000      	movs	r0, #0
 8005d7a:	e7f7      	b.n	8005d6c <__swsetup_r+0x98>
 8005d7c:	20000010 	.word	0x20000010

08005d80 <_raise_r>:
 8005d80:	291f      	cmp	r1, #31
 8005d82:	b538      	push	{r3, r4, r5, lr}
 8005d84:	4605      	mov	r5, r0
 8005d86:	460c      	mov	r4, r1
 8005d88:	d904      	bls.n	8005d94 <_raise_r+0x14>
 8005d8a:	2316      	movs	r3, #22
 8005d8c:	6003      	str	r3, [r0, #0]
 8005d8e:	f04f 30ff 	mov.w	r0, #4294967295
 8005d92:	bd38      	pop	{r3, r4, r5, pc}
 8005d94:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8005d96:	b112      	cbz	r2, 8005d9e <_raise_r+0x1e>
 8005d98:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005d9c:	b94b      	cbnz	r3, 8005db2 <_raise_r+0x32>
 8005d9e:	4628      	mov	r0, r5
 8005da0:	f000 f830 	bl	8005e04 <_getpid_r>
 8005da4:	4622      	mov	r2, r4
 8005da6:	4601      	mov	r1, r0
 8005da8:	4628      	mov	r0, r5
 8005daa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005dae:	f000 b817 	b.w	8005de0 <_kill_r>
 8005db2:	2b01      	cmp	r3, #1
 8005db4:	d00a      	beq.n	8005dcc <_raise_r+0x4c>
 8005db6:	1c59      	adds	r1, r3, #1
 8005db8:	d103      	bne.n	8005dc2 <_raise_r+0x42>
 8005dba:	2316      	movs	r3, #22
 8005dbc:	6003      	str	r3, [r0, #0]
 8005dbe:	2001      	movs	r0, #1
 8005dc0:	e7e7      	b.n	8005d92 <_raise_r+0x12>
 8005dc2:	2100      	movs	r1, #0
 8005dc4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8005dc8:	4620      	mov	r0, r4
 8005dca:	4798      	blx	r3
 8005dcc:	2000      	movs	r0, #0
 8005dce:	e7e0      	b.n	8005d92 <_raise_r+0x12>

08005dd0 <raise>:
 8005dd0:	4b02      	ldr	r3, [pc, #8]	@ (8005ddc <raise+0xc>)
 8005dd2:	4601      	mov	r1, r0
 8005dd4:	6818      	ldr	r0, [r3, #0]
 8005dd6:	f7ff bfd3 	b.w	8005d80 <_raise_r>
 8005dda:	bf00      	nop
 8005ddc:	20000010 	.word	0x20000010

08005de0 <_kill_r>:
 8005de0:	b538      	push	{r3, r4, r5, lr}
 8005de2:	4d07      	ldr	r5, [pc, #28]	@ (8005e00 <_kill_r+0x20>)
 8005de4:	2300      	movs	r3, #0
 8005de6:	4604      	mov	r4, r0
 8005de8:	4608      	mov	r0, r1
 8005dea:	4611      	mov	r1, r2
 8005dec:	602b      	str	r3, [r5, #0]
 8005dee:	f7fd fb29 	bl	8003444 <_kill>
 8005df2:	1c43      	adds	r3, r0, #1
 8005df4:	d102      	bne.n	8005dfc <_kill_r+0x1c>
 8005df6:	682b      	ldr	r3, [r5, #0]
 8005df8:	b103      	cbz	r3, 8005dfc <_kill_r+0x1c>
 8005dfa:	6023      	str	r3, [r4, #0]
 8005dfc:	bd38      	pop	{r3, r4, r5, pc}
 8005dfe:	bf00      	nop
 8005e00:	20000424 	.word	0x20000424

08005e04 <_getpid_r>:
 8005e04:	f7fd bb16 	b.w	8003434 <_getpid>

08005e08 <__swhatbuf_r>:
 8005e08:	b570      	push	{r4, r5, r6, lr}
 8005e0a:	460c      	mov	r4, r1
 8005e0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e10:	2900      	cmp	r1, #0
 8005e12:	b096      	sub	sp, #88	@ 0x58
 8005e14:	4615      	mov	r5, r2
 8005e16:	461e      	mov	r6, r3
 8005e18:	da0d      	bge.n	8005e36 <__swhatbuf_r+0x2e>
 8005e1a:	89a3      	ldrh	r3, [r4, #12]
 8005e1c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005e20:	f04f 0100 	mov.w	r1, #0
 8005e24:	bf14      	ite	ne
 8005e26:	2340      	movne	r3, #64	@ 0x40
 8005e28:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005e2c:	2000      	movs	r0, #0
 8005e2e:	6031      	str	r1, [r6, #0]
 8005e30:	602b      	str	r3, [r5, #0]
 8005e32:	b016      	add	sp, #88	@ 0x58
 8005e34:	bd70      	pop	{r4, r5, r6, pc}
 8005e36:	466a      	mov	r2, sp
 8005e38:	f000 f848 	bl	8005ecc <_fstat_r>
 8005e3c:	2800      	cmp	r0, #0
 8005e3e:	dbec      	blt.n	8005e1a <__swhatbuf_r+0x12>
 8005e40:	9901      	ldr	r1, [sp, #4]
 8005e42:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005e46:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005e4a:	4259      	negs	r1, r3
 8005e4c:	4159      	adcs	r1, r3
 8005e4e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005e52:	e7eb      	b.n	8005e2c <__swhatbuf_r+0x24>

08005e54 <__smakebuf_r>:
 8005e54:	898b      	ldrh	r3, [r1, #12]
 8005e56:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005e58:	079d      	lsls	r5, r3, #30
 8005e5a:	4606      	mov	r6, r0
 8005e5c:	460c      	mov	r4, r1
 8005e5e:	d507      	bpl.n	8005e70 <__smakebuf_r+0x1c>
 8005e60:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005e64:	6023      	str	r3, [r4, #0]
 8005e66:	6123      	str	r3, [r4, #16]
 8005e68:	2301      	movs	r3, #1
 8005e6a:	6163      	str	r3, [r4, #20]
 8005e6c:	b003      	add	sp, #12
 8005e6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e70:	ab01      	add	r3, sp, #4
 8005e72:	466a      	mov	r2, sp
 8005e74:	f7ff ffc8 	bl	8005e08 <__swhatbuf_r>
 8005e78:	9f00      	ldr	r7, [sp, #0]
 8005e7a:	4605      	mov	r5, r0
 8005e7c:	4639      	mov	r1, r7
 8005e7e:	4630      	mov	r0, r6
 8005e80:	f7ff f86e 	bl	8004f60 <_malloc_r>
 8005e84:	b948      	cbnz	r0, 8005e9a <__smakebuf_r+0x46>
 8005e86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e8a:	059a      	lsls	r2, r3, #22
 8005e8c:	d4ee      	bmi.n	8005e6c <__smakebuf_r+0x18>
 8005e8e:	f023 0303 	bic.w	r3, r3, #3
 8005e92:	f043 0302 	orr.w	r3, r3, #2
 8005e96:	81a3      	strh	r3, [r4, #12]
 8005e98:	e7e2      	b.n	8005e60 <__smakebuf_r+0xc>
 8005e9a:	89a3      	ldrh	r3, [r4, #12]
 8005e9c:	6020      	str	r0, [r4, #0]
 8005e9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ea2:	81a3      	strh	r3, [r4, #12]
 8005ea4:	9b01      	ldr	r3, [sp, #4]
 8005ea6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005eaa:	b15b      	cbz	r3, 8005ec4 <__smakebuf_r+0x70>
 8005eac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005eb0:	4630      	mov	r0, r6
 8005eb2:	f000 f81d 	bl	8005ef0 <_isatty_r>
 8005eb6:	b128      	cbz	r0, 8005ec4 <__smakebuf_r+0x70>
 8005eb8:	89a3      	ldrh	r3, [r4, #12]
 8005eba:	f023 0303 	bic.w	r3, r3, #3
 8005ebe:	f043 0301 	orr.w	r3, r3, #1
 8005ec2:	81a3      	strh	r3, [r4, #12]
 8005ec4:	89a3      	ldrh	r3, [r4, #12]
 8005ec6:	431d      	orrs	r5, r3
 8005ec8:	81a5      	strh	r5, [r4, #12]
 8005eca:	e7cf      	b.n	8005e6c <__smakebuf_r+0x18>

08005ecc <_fstat_r>:
 8005ecc:	b538      	push	{r3, r4, r5, lr}
 8005ece:	4d07      	ldr	r5, [pc, #28]	@ (8005eec <_fstat_r+0x20>)
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	4604      	mov	r4, r0
 8005ed4:	4608      	mov	r0, r1
 8005ed6:	4611      	mov	r1, r2
 8005ed8:	602b      	str	r3, [r5, #0]
 8005eda:	f7fd fb13 	bl	8003504 <_fstat>
 8005ede:	1c43      	adds	r3, r0, #1
 8005ee0:	d102      	bne.n	8005ee8 <_fstat_r+0x1c>
 8005ee2:	682b      	ldr	r3, [r5, #0]
 8005ee4:	b103      	cbz	r3, 8005ee8 <_fstat_r+0x1c>
 8005ee6:	6023      	str	r3, [r4, #0]
 8005ee8:	bd38      	pop	{r3, r4, r5, pc}
 8005eea:	bf00      	nop
 8005eec:	20000424 	.word	0x20000424

08005ef0 <_isatty_r>:
 8005ef0:	b538      	push	{r3, r4, r5, lr}
 8005ef2:	4d06      	ldr	r5, [pc, #24]	@ (8005f0c <_isatty_r+0x1c>)
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	4604      	mov	r4, r0
 8005ef8:	4608      	mov	r0, r1
 8005efa:	602b      	str	r3, [r5, #0]
 8005efc:	f7fd fb12 	bl	8003524 <_isatty>
 8005f00:	1c43      	adds	r3, r0, #1
 8005f02:	d102      	bne.n	8005f0a <_isatty_r+0x1a>
 8005f04:	682b      	ldr	r3, [r5, #0]
 8005f06:	b103      	cbz	r3, 8005f0a <_isatty_r+0x1a>
 8005f08:	6023      	str	r3, [r4, #0]
 8005f0a:	bd38      	pop	{r3, r4, r5, pc}
 8005f0c:	20000424 	.word	0x20000424

08005f10 <_init>:
 8005f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f12:	bf00      	nop
 8005f14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f16:	bc08      	pop	{r3}
 8005f18:	469e      	mov	lr, r3
 8005f1a:	4770      	bx	lr

08005f1c <_fini>:
 8005f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f1e:	bf00      	nop
 8005f20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f22:	bc08      	pop	{r3}
 8005f24:	469e      	mov	lr, r3
 8005f26:	4770      	bx	lr
